/*! For license information please see pages_plan-schedule_tsx.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([["pages_plan-schedule_tsx"],{"../../node_modules/@material-ui/core/colors/amber.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00"}},"../../node_modules/@material-ui/core/colors/green.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},"../../node_modules/@material-ui/core/colors/lightBlue.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"}},"../../node_modules/@material-ui/core/esm/Fab/Fab.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>b,styles:()=>p});var o=a("../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=a("../../node_modules/@babel/runtime/helpers/esm/extends.js"),s=a("../../node_modules/react/index.js"),n=a("../../node_modules/prop-types/index.js"),r=a.n(n),i=a("../../node_modules/clsx/dist/clsx.m.js"),d=a("../../node_modules/@material-ui/utils/esm/chainPropTypes.js"),u=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),c=a("../../node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js"),m=a("../../node_modules/@material-ui/core/esm/utils/capitalize.js"),p=function(e){return{root:(0,l.default)({},e.typography.button,{boxSizing:"border-box",minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]},color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground},textDecoration:"none"},"&$focusVisible":{boxShadow:e.shadows[6]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},primary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},secondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},extended:{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48,"&$sizeSmall":{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"&$sizeMedium":{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40}},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},sizeSmall:{width:40,height:40},sizeMedium:{width:48,height:48}}},f=s.forwardRef((function(e,t){var a=e.children,n=e.classes,r=e.className,d=e.color,u=void 0===d?"default":d,p=e.component,f=void 0===p?"button":p,b=e.disabled,h=void 0!==b&&b,y=e.disableFocusRipple,_=void 0!==y&&y,g=e.focusVisibleClassName,v=e.size,x=void 0===v?"large":v,j=e.variant,E=void 0===j?"circular":j,k=(0,o.default)(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"]);return s.createElement(c.default,(0,l.default)({className:(0,i.default)(n.root,r,"large"!==x&&n["size".concat((0,m.default)(x))],h&&n.disabled,"extended"===E&&n.extended,{primary:n.primary,secondary:n.secondary,inherit:n.colorInherit}[u]),component:f,disabled:h,focusRipple:!_,focusVisibleClassName:(0,i.default)(n.focusVisible,g),ref:t},k),s.createElement("span",{className:n.label},a))}));f.propTypes={children:r().node.isRequired,classes:r().object,className:r().string,color:r().oneOf(["default","inherit","primary","secondary"]),component:r().elementType,disabled:r().bool,disableFocusRipple:r().bool,disableRipple:r().bool,focusVisibleClassName:r().string,href:r().string,size:r().oneOf(["large","medium","small"]),variant:(0,d.default)(r().oneOf(["extended","circular","round"]),(function(e){if("round"===e.variant)throw new Error('Material-UI: variant="round" was renamed variant="circular" for consistency.');return null}))};const b=(0,u.default)(p,{name:"MuiFab"})(f)},"../../node_modules/@material-ui/icons/Add.js":(e,t,a)=>{"use strict";var o=a("../../node_modules/@babel/runtime/helpers/interopRequireDefault.js"),l=a("../../node_modules/@babel/runtime/helpers/interopRequireWildcard.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=l(a("../../node_modules/react/index.js")),n=(0,o(a("../../node_modules/@material-ui/icons/utils/createSvgIcon.js")).default)(s.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");t.default=n},"../../assets/icon_black.svg":(e,t,a)=>{e.exports=a.p+"icon_black.svg?5136879a03a13f9fb18f241b081f38cb"},"./api/callAPI.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>l});var o=a("../../node_modules/tslib/tslib.es6.js");function l(e,t,a=null){return(0,o.__awaiter)(this,void 0,void 0,(function*(){const o={method:e,headers:{"Content-Type":"application/json"},cache:"no-store"};null!=a&&(o.body=JSON.stringify(a));const l=yield fetch(`http://homey-pro.iot.home.arpa/api/app/app.mskg.homey-heating${t}`,o);return yield l.json()}))}},"./api/heating/index.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{modeAPI:()=>i,planAPI:()=>r});var o=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/lodash/lodash.js"),s=a("./api/callAPI.tsx");const n=e=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){const t=Object.assign({},e);return t.zones&&0!==t.zones.length||(t.zones=void 0),t.devices&&0!==t.devices.length||(t.devices=void 0),yield(0,s.default)("PUT",`/plans/${e.id}`,t)})),r={fetchPlans:()=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,s.default)("GET","/plans");return(0,l.sortBy)((0,l.map)(e,(e=>(e.zones=e.zones||[],e.devices=e.devices||[],e))),(e=>e.name))})),fetchPlanById:e=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){const t=yield(0,s.default)("GET",`/plans/${e}`);if(null==t)throw new Error(`Plan ${e} not found.`);return t.zones=t.zones||[],t.devices=t.devices||[],t})),fetchSchedule:()=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,s.default)("GET","/schedule");return e.temperatures=(0,l.sortBy)(e.temperatures,[e=>e.device.name]),e})),updatePlan:n,removePlan:e=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,s.default)("DELETE",`/plans/${e}`)})),togglePlanState:e=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){return e.enabled=!e.enabled,yield n(e),!0}))},i={fetchMode:()=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){return(yield(0,s.default)("GET","/mode")).mode})),setMode:e=>(0,o.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,s.default)("PUT","/mode",{mode:e})}))}},"./components/AddFab.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});var o=a("../../node_modules/@material-ui/core/esm/Fab/Fab.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),s=a("../../node_modules/@material-ui/icons/Add.js"),n=a("../../node_modules/react/index.js");const r=(0,l.default)((e=>({fabButton:{zIndex:1,margin:"0 auto",position:"absolute",bottom:e.spacing(2),right:e.spacing(2)}})))((e=>{const{classes:t}=e;return n.createElement(o.default,{color:"secondary","aria-label":"Add",className:t.fabButton,onClick:()=>e.onClick()},n.createElement(s.default,null))}))},"./components/AppHeader.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var o=a("../../node_modules/@material-ui/core/esm/AppBar/AppBar.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),s=a("../../node_modules/@material-ui/core/esm/Toolbar/Toolbar.js"),n=a("../../node_modules/@material-ui/core/esm/Typography/Typography.js"),r=a("../../node_modules/react/index.js");const i=(0,l.default)((e=>({appBar:{},grow:{flexGrow:1},buttons:{display:"flex"},toolbar:{alignItems:"center",justifyContent:"space-between"}})))((e=>{const{classes:t}=e,{button:a,title:l,actions:i,subBar:d}=e.children||{button:null,title:null,actions:null,subBar:null};return r.createElement(r.Fragment,null,r.createElement(o.default,{position:"absolute",color:"primary",className:t.appBar},r.createElement(s.default,{className:t.toolbar},e.button||a,r.createElement(n.default,{variant:"h6",color:"inherit",noWrap:!0},e.title||l),r.createElement("div",{className:t.grow}),null!=i&&r.createElement("div",{className:t.buttons},i)),null!=d&&d))}))},"./components/ListItemLink.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var o=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/@material-ui/core/esm/ListItem/ListItem.js"),s=a("../../node_modules/react/index.js"),n=a("../../node_modules/react-router-dom/esm/react-router-dom.js");function r(e){var{innerRef:t}=e,a=(0,o.__rest)(e,["innerRef"]);return a.to.toString().match(/https/)?s.createElement("a",Object.assign({onClick:()=>Homey.openURL(a.to.toString())},a),a.children):s.createElement(n.Link,Object.assign({},a))}const i=e=>s.createElement(l.default,Object.assign({},e,{component:r}),e.children)},"./components/Menu.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{AppMenuButton:()=>y,MenuButton:()=>g,default:()=>v});var o=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/@material-ui/core/esm/Typography/Typography.js"),s=a("../../node_modules/@material-ui/core/esm/Divider/Divider.js"),n=a("../../node_modules/@material-ui/core/esm/List/List.js"),r=a("../../node_modules/@material-ui/core/esm/ListItemText/ListItemText.js"),i=a("../../node_modules/@material-ui/core/esm/IconButton/IconButton.js"),d=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),u=a("../../node_modules/@material-ui/core/esm/Drawer/Drawer.js"),c=a("../../node_modules/@material-ui/icons/Menu.js"),m=a("../../node_modules/react/index.js"),p=a("../../node_modules/react-router/esm/react-router.js"),f=a("./i18n/Translation.tsx"),b=a("./components/ListItemLink.tsx");const h=e=>({text:{padding:e.spacing(2),paddingBottom:0},version:{padding:e.spacing(2),paddingTop:0},normal:{},selected:{color:e.palette.primary.main},otherButton:{},firstButton:{marginLeft:-12}}),y=e=>{const[t,a]=m.useState(!1);return m.createElement(m.Fragment,null,m.createElement(_,{open:t,onClose:()=>{a(!1)}}),m.createElement(g,{first:!0,onClick:()=>{a(!0)},icon:m.createElement(c.default,null)}))},_=(0,p.withRouter)((0,d.default)(h)((e=>{const{classes:t}=e,a=[{type:"entry",to:"/",text:(0,f.default)("menu.plans")},{to:"/temperatures",text:(0,f.default)("menu.temperatures")},{to:"/schedules",text:(0,f.default)("menu.schedules")},{to:"/settings",text:(0,f.default)("menu.settings")},{to:"https://homey-heating.mskg.app",text:(0,f.default)("menu.help")}];return m.createElement(u.default,{open:e.open,onClose:e.onClose},m.createElement(l.default,{className:t.text,variant:"h5",gutterBottom:!0},(0,f.default)("menu.title")),m.createElement(l.default,{className:t.version,variant:"body2",color:"textSecondary",gutterBottom:!0},"Version ","2.0.0-rc10"," (","v2.0.0-rc10",")"),m.createElement(s.default,null),m.createElement(n.default,null,a.map((a=>"Divider"===a.type?m.createElement(s.default,null):m.createElement(b.default,{key:a.to,to:a.to,disabled:e.match.url===a.to,button:!0},m.createElement(r.default,{primary:a.text,classes:{primary:e.match.url!==a.to?t.normal:t.selected}}))))))}))),g=(0,d.default)(h)((e=>{const{classes:t,first:a,icon:l}=e,s=(0,o.__rest)(e,["classes","first","icon"]);return m.createElement(i.default,Object.assign({className:a?t.firstButton:t.otherButton,color:"inherit"},s),l)})),v=_},"./components/TemperatureAvatar.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FilledTemperatureAvatar:()=>b,TemperatureAvatar:()=>h,normalize:()=>f});var o=a("../../node_modules/@material-ui/core/esm/Typography/Typography.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),s=a("../../node_modules/@material-ui/core/esm/Avatar/Avatar.js"),n=a("../../node_modules/@material-ui/core/colors/deepOrange.js"),r=a("../../node_modules/@material-ui/core/colors/lightBlue.js"),i=a("../../node_modules/react/index.js"),d=a("./components/temperatureToColor.tsx");const u=a("../../assets/icon_black.svg"),c=35,m=e=>({root:{fontSize:"1em",float:"left",textAlign:"center",display:"flex",flexDirection:"column",alignItems:"center",width:45},avatar:{width:c,height:c,lineHeight:c,position:"relative",overflow:"hidden"},img:{width:c,height:c,zIndex:2,position:"absolute",left:0,bottom:0},fill:{display:"block",width:c,height:33,zIndex:1,position:"absolute",left:0,bottom:1}});function p(e,t){return(Math.round(e*Math.pow(10,t))/Math.pow(10,t)).toFixed(t)}function f(e,t,a){return(a-e)/(t-e)}const b=(0,l.default)(m)((e=>{const{value:t,classes:a,fill:l}=e;let{digits:s}=e;const d=(100===l?r.default:n.default)[500];return null==s&&(s=2),i.createElement("div",{className:a.root},i.createElement("div",{className:a.avatar},i.createElement("object",{className:a.img,data:u,type:"image/svg+xml"}),i.createElement("span",{style:{height:`calc(${l}% - 5px)`,background:d},className:a.fill})),i.createElement(o.default,{variant:"body1",color:"textSecondary",component:"div"},p(t,s),"°"))})),h=(0,l.default)(m)((e=>{const{value:t}=e;return i.createElement(s.default,{style:{padding:"25px",background:(0,d.temperatureToColor)(t),fontSize:"1em"}},p(t,1),"°")}))},"./components/temperatureToColor.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{slotTemperature:()=>r,temperatureToColor:()=>i});var o=a("../../node_modules/@material-ui/core/colors/amber.js"),l=a("../../node_modules/@material-ui/core/colors/blue.js"),s=a("../../node_modules/@material-ui/core/colors/deepOrange.js"),n=a("../../node_modules/@material-ui/core/colors/green.js");function r(e,t,a,o,l){return Math.floor((l-o)*(e-t)/(a-t)+o)}const i=e=>{const t=Math.round(100*r(Math.min(Math.max(16,e),24),16,24,1,8)+100);return e<=16?l.default[t]:e<=18.5?n.default[t]:e<=20.5?o.default[t]:s.default[t]}},"./layouts/Page.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var o=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),l=a("../../node_modules/react/index.js");const s=(0,o.default)((e=>({root:{webkitOverflowScrolling:"touch",display:"flex",flexFlow:"column",height:"100vh",width:"100vw",backgroundColor:"#fff"},body:{flex:"1 0 100%",margin:0,maxWidth:"100%",overflowY:"scroll"}})))((e=>{const{classes:t}=e,{header:a,body:o,paddingTop:s,paddingBottom:n}=e.children,r=n||"auto";return l.createElement(l.Fragment,null,l.createElement("div",{className:t.root},a,l.createElement("div",{className:t.body,style:{paddingTop:s,paddingBottom:r}},o)))}))},"./pages/plan-schedule.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>I});var o=a("../../node_modules/@material-ui/core/esm/Button/Button.js"),l=a("../../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js"),s=a("../../node_modules/@material-ui/core/esm/Divider/Divider.js"),n=a("../../node_modules/@material-ui/core/esm/IconButton/IconButton.js"),r=a("../../node_modules/@material-ui/core/esm/List/List.js"),i=a("../../node_modules/@material-ui/core/esm/ListItem/ListItem.js"),d=a("../../node_modules/@material-ui/core/esm/ListItemText/ListItemText.js"),u=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),c=a("../../node_modules/@material-ui/core/esm/Tab/Tab.js"),m=a("../../node_modules/@material-ui/core/esm/Tabs/Tabs.js"),p=a("../../node_modules/@material-ui/icons/ArrowBackIos.js"),f=a("../../node_modules/@material-ui/icons/Cancel.js"),b=a("../../node_modules/@material-ui/icons/Delete.js"),h=a("../../node_modules/@material-ui/icons/FileCopy.js"),y=a("../../node_modules/react/index.js"),_=a("../../node_modules/react-router/esm/react-router.js"),g=a("../../node_modules/react-scroll-locky/dist/es2015/component.js"),v=a("../app/model/index.ts"),x=a("./components/AddFab.tsx"),j=a("./components/AppHeader.tsx"),E=a("./components/Menu.tsx"),k=a("./components/TemperatureAvatar.tsx"),C=a("./i18n/Translation.tsx"),w=a("./layouts/Page.tsx"),P=a("./state/planHooks.tsx"),S=a("./state/PlanProvider.tsx");const T=y.lazy((()=>Promise.all([a.e("vendors-node_modules_material-ui_core_esm_Dialog_Dialog_js-node_modules_material-ui_core_esm_-633b1f"),a.e("vendors-node_modules_material-ui_core_esm_Checkbox_Checkbox_js-node_modules_material-ui_core_-59d411"),a.e("node_modules_material-ui_core_esm_internal_SwitchBase_js-dialogs_CopyDayDialog_tsx")]).then(a.bind(a,"./dialogs/CopyDayDialog.tsx")))),D=y.lazy((()=>Promise.all([a.e("vendors-node_modules_material-ui_core_esm_Select_Select_js"),a.e("vendors-node_modules_material-ui_core_esm_TextField_TextField_js"),a.e("vendors-node_modules_material-ui_core_esm_Dialog_Dialog_js-node_modules_material-ui_core_esm_-633b1f"),a.e("dialogs_SetPointDialog_tsx")]).then(a.bind(a,"./dialogs/SetPointDialog.tsx"))));function B(e){return e>9?e.toString():"0"+e}function A(e){return e+1>6?0:e+1}const I=(0,_.withRouter)((0,u.default)((e=>({list:{marginTop:0,marginBottom:e.spacing(2)},tab:{minWidth:"50px"},avatar:{}})))((e=>{const{classes:t,location:a,history:u}=e,_=(0,S.usePlanDispatch)(),[I,M]=y.useState(!1),[z,N]=y.useState(!1),[F,R]=y.useState(0),{plan:L,loaded:O}=(0,P.usePlan)(e.match.params.id),{undo:$,commit:G}=(0,P.useHistory)();y.useEffect((()=>{K(0),M(!1),N(!1)}),[a,O]);const{isDirty:H,setDirty:W,selectedDay:V,copyDays:U,loadSetPoint:q,newSetPoint:Z,selectDay:J,removeSetPoint:Y}=(0,P.useModifySetPoints)(),K=(0,y.useCallback)((e=>{R(e),J(A(e))}),[_]);return y.createElement(y.Fragment,null,y.createElement(T,{open:z,onConfirm:e=>{U(A(F),e),K(F),N(!1)},onCancel:()=>{N(!1)}}),y.createElement(D,{open:I,onClose:e=>{e&&(W(!0),K(F)),M(!1)}}),y.createElement(w.default,null,{header:y.createElement(j.default,null,{title:(0,C.default)("schedule.title"),button:y.createElement(E.MenuButton,{first:!0,onClick:function(){$(),u.replace({pathname:`/plans/${L.id}`,state:!0})},icon:H?y.createElement(f.default,null):y.createElement(p.default,null)}),actions:y.createElement(y.Fragment,null,y.createElement(E.MenuButton,{onClick:()=>{N(!0)},icon:y.createElement(h.default,null)}),H&&y.createElement(o.default,{color:"inherit",onClick:function(){G(),u.replace({pathname:`/plans/${L.id}`,state:!0})}},(0,C.default)("schedule.save"))),subBar:y.createElement(m.default,{value:F,onChange:(e,t)=>K(t),variant:"fullWidth"},y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Monday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Tuesday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Wednesday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Thursday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Friday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Saturday")}),y.createElement(c.default,{classes:{root:e.classes.tab},disableRipple:!0,label:(0,C.default)("schedule.Sunday")}))}),paddingTop:100,paddingBottom:60,body:y.createElement(y.Fragment,null,y.createElement(g.ScrollLocky,{enabled:I||z,isolation:!1},y.createElement(r.default,{className:t.list},V.last&&y.createElement(y.Fragment,{key:"-1"},y.createElement(i.default,{button:!0,onClick:()=>{return K(0===(e=V.last&&V.last.day||0)?6:e-1);var e}},y.createElement(k.TemperatureAvatar,{value:V.last.targetTemperature}),y.createElement(d.default,{primary:`${v.Day[V.last.day]}`,secondary:`${B(V.last.hour)}:${B(V.last.minute)}`})),y.createElement(s.default,null)),V.schedules.map((e=>y.createElement(y.Fragment,{key:e.index},y.createElement(i.default,{button:!0,onClick:()=>{return t=e,a=e.index,q(Object.assign(Object.assign({},t),{index:a})),void M(!0);var t,a}},y.createElement(k.TemperatureAvatar,{value:e.targetTemperature}),y.createElement(d.default,{primary:`${B(e.hour)}:${B(e.minute)}`}),y.createElement(l.default,null,y.createElement(n.default,{className:t.menuButton,onClick:()=>{return t=e.index,Y(t),void K(F);var t}},y.createElement(b.default,null)))),y.createElement(s.default,null)))))),y.createElement(x.default,{onClick:function(){Z(A(F)),M(!0)}}))}))})))},"./state/planHooks.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{useHistory:()=>r,useModifyExceptions:()=>d,useModifyPlan:()=>i,useModifySetPoints:()=>u,usePlan:()=>m});var o=a("../../node_modules/react/index.js"),l=a("../../node_modules/uuid/v1.js"),s=a("./api/heating/index.tsx"),n=a("./state/PlanProvider.tsx");const r=()=>{const e=(0,n.usePlanDispatch)(),t=(0,n.usePlanGlobalState)("loaded"),a=(0,o.useCallback)((()=>e({type:"savePoint"})),[e]),l=(0,o.useCallback)((()=>e({type:"undo"})),[e]),s=(0,o.useCallback)((()=>e({type:"commit"})),[e]);return(0,o.useEffect)((()=>{a()}),[t]),{savePoint:a,undo:l,commit:s}},i=()=>{const e=(0,n.usePlanDispatch)();return{setName:(0,o.useCallback)((t=>e({type:"setName",name:t.target.value})),[e]),setDescription:(0,o.useCallback)((t=>e({type:"setDescription",description:t.target.value})),[e]),toggleState:(0,o.useCallback)((()=>e({type:"toggleEnabled"})),[e]),toggleZone:(0,o.useCallback)((t=>e({type:"toggleZone",zone:t})),[e]),toggleDevice:(0,o.useCallback)((t=>e({type:"toggleDevice",device:t})),[e])}},d=()=>{const e=(0,n.usePlanDispatch)(),[t,a]=(0,o.useState)(!1),l=(0,o.useCallback)(((t,o)=>{e({type:"setOverride",mode:t,temperature:o}),a(!0)}),[e]),s=(0,o.useCallback)((t=>{e({type:"clearOverride",mode:t}),a(!0)}),[e]),r=(0,o.useCallback)(((e,t)=>{0===t?s(e):l(e,t)}),[e]);return(0,o.useEffect)((()=>{a(!1)}),[]),{isDirty:t,setOverride:l,clearOverride:s,updateOverride:r}},u=()=>{const[e,t]=(0,o.useState)(!1),a=(0,n.usePlanDispatch)(),l=(0,o.useCallback)((e=>{a({type:"selectDay",day:e})}),[a]),s=(0,n.usePlanGlobalState)("selectedDay"),r=(0,n.usePlanGlobalState)("setPoint"),i=(0,o.useCallback)(((e,o)=>{null!=o&&o.length>0&&(t(!0),a({type:"copyDays",source:e,targets:o}))}),[a]),d=(0,o.useCallback)((e=>{t(!0),a({type:"removeSetPoint",index:e})}),[a]),u=(0,o.useCallback)((e=>{a({type:"loadSetPoint",setPoint:e})}),[a]),c=(0,o.useCallback)((e=>{a({type:"newSetPoint",day:e})}),[a]),m=(0,o.useCallback)((e=>{-1===e.index?a({type:"addSetPoint",setPoint:e}):a({type:"updateSetPoint",setPoint:e})}),[a]),p=(0,o.useCallback)((e=>a({type:"setStart",start:e})),[a]),f=(0,o.useCallback)((e=>a({type:"setTargetTemperature",temperature:parseFloat(e.target.value)})),[a]);return(0,o.useEffect)((()=>{t(!1)}),[]),{setDirty:t,isDirty:e,selectedDay:s,setPoint:r,copyDays:i,removeSetPoint:d,loadSetPoint:u,newSetPoint:c,selectDay:l,saveSetPoint:m,setStart:p,setTargetTemperature:f}};let c=!1;const m=(e,t=!0)=>{const a=(0,n.usePlanDispatch)(),r=(0,n.usePlanGlobalState)("plan"),i=(0,n.usePlanGlobalState)("loaded"),d=(0,n.usePlanGlobalState)("dirty");if(!i||!t)if(null!=e&&"new"!==e||c){if(!c)throw s.planAPI.fetchPlanById(e).then((e=>{c=!0,a({type:"loadPlan",plan:e})}))}else c=!0,a({type:"loadPlan",plan:{id:l(),enabled:!1,name:"",zones:[],devices:[],schedule:[],overrides:void 0}});return(0,o.useEffect)((()=>()=>{c=!1}),[e,t]),{plan:r,isDirty:d,loaded:i}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,