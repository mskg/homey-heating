{"version":3,"file":"24.js","mappings":"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","sources":["webpack:///./api/devices/index.tsx","webpack:///./api/zones/index.tsx","webpack:///./components/FormTextField.tsx","webpack:///./components/InputContainer.tsx","webpack:///./components/Transition.tsx","webpack:///./components/ConfirmDialog.tsx","webpack:///./components/Icons.tsx","webpack:///./state/deviceHooks.tsx","webpack:///./state/zoneHooks.tsx","webpack:///./pages/plan.tsx","webpack:///./state/planHooks.tsx"],"sourcesContent":["\nimport { sortBy } from \"lodash\";\nimport { IHeatingDevice } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingDevice;\n} & ArrayLike<IHeatingDevice>;\n\n// Homey.api( String method, String path, Mixed body, Function callback )\nconst fetchHeatingDevices = async (): Promise<HashType> => {\n  const devices = await callAPI<any[]>(\"GET\", \"/devices\");\n\n  const result = sortBy(devices, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n  result.length = devices.length;\n\n  return result;\n};\n\nexport const deviceAPI = {\n  fetchHeatingDevices,\n};\n","import { sortBy } from \"lodash\";\nimport { IHeatingZone } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingZone;\n} & ArrayLike<IHeatingZone>;\n\nconst fetchHeatingZones = async (): Promise<HashType> => {\n  const zones = await callAPI<any[]>(\"GET\", \"/zones\");\n\n  const result = sortBy(zones, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n\n  result.length = zones.length;\n  return result;\n};\n\nexport const zoneAPI = {\n  fetchHeatingZones,\n};\n","import TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport InputContainer from \"./InputContainer\";\n\nconst FormTextField = ({ classes, ...otherProps }: TextFieldProps) => {\n    return (\n        <InputContainer>\n            <TextField\n                fullWidth={true}\n                margin=\"normal\"\n                {...otherProps}\n            />\n        </InputContainer>\n    );\n};\n\nexport default FormTextField;\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    inputContainer: {\n        width: \"100%\",\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(3),\n    },\n});\n\ntype Props = {\n    children: React.ReactElement<any>,\n} & WithStyles<typeof styles>;\n\nconst InputContainer: React.FunctionComponent<Props> = (props) => {\n    return (<div className={props.classes.inputContainer}>{props.children}</div>);\n};\n\nexport default withStyles(styles)(InputContainer);\n","import { Zoom } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default function Transition(props: any) {\n    return <Zoom {...props} />;\n}\n","import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport React, { useState } from \"react\";\nimport translate from \"../i18n/Translation\";\nimport Transition from \"./Transition\";\n\ntype ExternalProps = {\n  title?: string;\n  content: string;\n};\n\ntype Props = {\n  open: boolean;\n\n  onOK: () => void;\n  onCancel: () => void;\n} & ExternalProps;\n\nconst ConfirmDialog: React.FunctionComponent<Props> = (props: Props) => {\n  const { open, title, content, onOK, onCancel, ...others } = props;\n\n  return (\n    <Dialog open={open} onClose={() => { onCancel(); }} TransitionComponent={Transition}  {...others}>\n      <DialogTitle>{title || translate(\"confirm.title\")}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {content}\n        </DialogContentText>\n\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => { onCancel(); }} color=\"primary\">\n          {translate(\"confirm.cancel\")}\n        </Button>\n\n        <Button onClick={() => { onOK(); }} color=\"primary\">\n          {translate(\"confirm.ok\")}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport const useConfirmDialog = (props: { onConfirm: () => void } & ExternalProps) => {\n  const { onConfirm, ...others } = props;\n  const [open, setIsOpen] = useState(false);\n\n  const dialog = (\n    <ConfirmDialog open={open} onCancel={() => { setIsOpen(false); }} onOK={onConfirm} {...others} />\n  );\n\n  return {\n    dialog, isOpen: open, open: () => {\n      setIsOpen(true);\n    },\n  };\n};\n","import { BusinessCenter, DirectionsWalk, FreeBreakfast, Home, Hotel, HotTub, People } from \"@material-ui/icons\";\nimport React from \"react\";\n\ntype Props = {\n    name: string,\n};\n\nexport default function ZoneIcon(props: Props) {\n    switch (props.name) {\n        case \"home\":\n            return (<Home />);\n\n        case \"bed\":\n            return (<Hotel />);\n\n        case \"living\":\n            return (<People />);\n\n        case \"toilet\":\n        case \"shower\":\n            return (<HotTub />);\n\n        case \"books\":\n        case \"study\":\n            return (<BusinessCenter />);\n\n        case \"kitchen\":\n            return (<FreeBreakfast />);\n\n        default:\n            return (<DirectionsWalk />);\n    }\n}\n","import { useEffect } from \"react\";\nimport { deviceAPI } from \"../api/devices\";\nimport { usePlanDispatch, usePlanGlobalState } from \"./PlanProvider\";\n\nlet loadingDevices = false;\nexport const useDevices = (keep?: boolean) => {\n    const dispatch = usePlanDispatch();\n    const devices = usePlanGlobalState(\"devices\");\n\n    if (!keep && !loadingDevices) {\n        loadingDevices = true;\n        throw deviceAPI.fetchHeatingDevices().then((d) => {\n            dispatch({ type: \"loadDevices\", devices: d });\n        });\n    }\n\n    useEffect(() => {\n        return () => {\n            loadingDevices = false;\n        };\n    }, [keep]);\n\n    return devices;\n};\n","import { useEffect } from \"react\";\nimport { zoneAPI } from \"../api/zones\";\nimport { usePlanDispatch, usePlanGlobalState } from \"./PlanProvider\";\n\nlet loadingZones = false;\nexport const useZones = (keep?: boolean) => {\n    const dispatch = usePlanDispatch();\n    const zones = usePlanGlobalState(\"zones\");\n\n    if (!keep && !loadingZones) {\n        loadingZones = true;\n        throw zoneAPI.fetchHeatingZones().then((z) => {\n            dispatch({ type: \"loadZones\", zones: z });\n        });\n    }\n\n    useEffect(() => {\n        return () => {\n            loadingZones = false;\n        };\n    }, [keep]);\n\n    return zones;\n};\n","import { IHeatingPlan } from \"@app/model\";\nimport { Button, LinearProgress, Tab, Tabs } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport RemoveIcon from \"@material-ui/icons/Delete\";\nimport CopyIcon from \"@material-ui/icons/FileCopy\";\nimport { map } from \"lodash\";\nimport { withSnackbar, WithSnackbarProps } from \"notistack\";\nimport React, { Fragment, ReactNode, useEffect, useState } from \"react\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { ScrollLocky } from \"react-scroll-locky\";\nimport * as uuidv1 from \"uuid/v1\";\nimport { planAPI } from \"../api/heating\";\nimport AppHeader from \"../components/AppHeader\";\nimport BodyText from \"../components/BodyText\";\nimport { useConfirmDialog } from \"../components/ConfirmDialog\";\nimport FormTextField from \"../components/FormTextField\";\nimport ZoneIcon from \"../components/Icons\";\nimport { MenuButton } from \"../components/Menu\";\nimport SubHeader from \"../components/SubHeader\";\nimport translate from \"../i18n/Translation\";\nimport Page from \"../layouts/Page\";\nimport { useDevices } from \"../state/deviceHooks\";\nimport { useModifyPlan, usePlan } from \"../state/planHooks\";\nimport { useZones } from \"../state/zoneHooks\";\n\nconst CloneDialog = React.lazy(() => import(\"../dialogs/CloneDialog\"));\nconst Chart = React.lazy(() => import(\"../components/TemperatureChart\"));\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    button: {\n        margin: theme.spacing(2),\n    },\n\n    divider: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(1),\n    },\n\n    avatar: {\n        // padding: \"3px\",\n        width: \"24px\",\n        height: \"24px\",\n    },\n});\n\ntype Params = {\n    id: string;\n};\n\ntype Props = WithStyles<typeof styles>\n    & RouteComponentProps<Params, any, boolean>\n    & WithSnackbarProps;\n\ntype TabProps = {\n    id: number,\n    activeTab: number,\n    children?: ReactNode,\n};\n\nconst TabContainer: React.FunctionComponent<TabProps> = (props) => {\n    const { children, id, activeTab } = props;\n\n    return (\n        <React.Suspense fallback={<LinearProgress style={{margin: 16}} color=\"secondary\" />}>\n            {id === activeTab && children}\n        </React.Suspense>\n    );\n};\n\nconst PlanOverviewPage: React.FunctionComponent<Props> = (props: Props) => {\n    const { classes } = props;\n    const [selectedTab, selectTab] = React.useState(0);\n\n    const { plan, isDirty } = usePlan(\n        props.match.params.id,\n        props.location.state === true,\n    );\n\n    const { setName, setDescription, toggleState, toggleZone, toggleDevice } = useModifyPlan();\n\n    const zones = useZones(props.location.state === true);\n    const devices = useDevices(props.location.state === true);\n\n    useEffect(() => {\n        setIsCloneDialogOpen(false);\n        // we use 1 as tab (which is true)\n        selectTab(props.location.state === true ? 1 : 0);\n    }, [props.location]);\n\n    const [isCloneDialogOpen, setIsCloneDialogOpen] = useState(false);\n\n    const { dialog: confirmRemoveDialog, open: openConfirmRemove, isOpen: isConfirmRemoveOpen } = useConfirmDialog({\n        title: translate(\"plan.confirm.title\"),\n        content: translate(\"plan.confirm.content\"),\n        onConfirm: () => { removePlan(); },\n    });\n\n    const save = () => {\n        planAPI.updatePlan(plan as IHeatingPlan).then((_p) => {\n            props.history.push({\n                pathname: `/`,\n                state: false,\n            });\n\n            props.enqueueSnackbar(translate(\"plan.saved\", {\n                name: plan.name,\n            }));\n        });\n    };\n\n    const removePlan = () => {\n        planAPI.removePlan(plan.id).then((_p) => {\n            props.history.push({\n                pathname: `/`,\n                state: false,\n            });\n\n            props.enqueueSnackbar(translate(\"plan.removed\", {\n                name: plan.name,\n            }));\n        });\n    };\n\n    const duplicatePlan = (name: string) => {\n        const newPlan = { ...plan, enabled: false, id: uuidv1(), name } as IHeatingPlan;\n\n        planAPI.updatePlan(newPlan).then((_p) => {\n            props.history.push({\n                pathname: `/plans/${newPlan.id}`,\n                state: false,\n            });\n\n            props.enqueueSnackbar(translate(\"plan.duplicated\", {\n                name: plan.name,\n            }));\n        }).catch((r: any) => {\n            throw r;\n        });\n    };\n\n    return (\n        <Fragment>\n            {confirmRemoveDialog}\n\n            <CloneDialog\n                open={isCloneDialogOpen}\n                name={plan.name}\n                onConfirm={duplicatePlan}\n                onCancel={() => { setIsCloneDialogOpen(false); }}\n            />\n\n            <Page>\n                {{\n                    header: (\n                        <AppHeader>\n                            {{\n                                title: plan.name || translate(\"plan.unnamed\"),\n                                button: (\n                                    <MenuButton first={true} {...{ to: `/` }} component={Link as unknown as \"a\"} icon={isDirty ? <CancelIcon /> : <BackIcon />} />\n                                ),\n                                actions: (\n                                    <Fragment>\n                                        {plan.id !== \"new\" && !isDirty &&\n                                            <MenuButton onClick={() => { setIsCloneDialogOpen(true); }} icon={<CopyIcon />} />\n                                        }\n\n                                        {plan.id !== \"new\" &&\n                                            <MenuButton onClick={openConfirmRemove} icon={<RemoveIcon />} />\n                                        }\n\n                                        {isDirty &&\n                                            <Button color=\"inherit\" onClick={save}>\n                                                {translate(\"plan.save\")}\n                                            </Button>\n                                        }\n                                    </Fragment>\n                                ),\n                                subBar: (\n                                    <Tabs value={selectedTab} onChange={(_e, v) => selectTab(v)} variant=\"scrollable\" scrollButtons=\"off\" >\n                                        <Tab classes={{ root: props.classes.tab }} disableRipple={true} label={translate(\"plan.tabs.overview\")} />\n                                        <Tab classes={{ root: props.classes.tab }} disableRipple={true} label={translate(\"plan.tabs.schedule\")} />\n                                        <Tab classes={{ root: props.classes.tab }} disableRipple={true} label={translate(\"plan.tabs.zones\", { n: plan.zones.length })} />\n                                        <Tab classes={{ root: props.classes.tab }} disableRipple={true} label={translate(\"plan.tabs.devices\", { n: plan.devices.length })} />\n                                    </Tabs>\n                                ),\n                            }}\n                        </AppHeader>\n\n                    ),\n                    paddingTop: 100,\n                    body: (\n                        <ScrollLocky enabled={isCloneDialogOpen || isConfirmRemoveOpen} isolation={false}>\n                            <Fragment>\n                                <TabContainer id={0} activeTab={selectedTab}>\n                                    <SubHeader text={translate(\"plan.overview.section\")} />\n                                    <BodyText text={translate(\"plan.overview.text\")} />\n\n                                    <FormTextField\n                                        label={translate(\"plan.overview.name.label\")}\n                                        placeholder={translate(\"plan.overview.name.placeholder\")}\n\n                                        value={plan.name}\n                                        onChange={setName}\n                                    />\n\n                                    <BodyText style={{ paddingTop: 16 }} text={translate(\"plan.overview.text_enable\")} />\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                onChange={toggleState}\n                                                checked={plan.enabled}\n                                            />\n                                        }\n                                        label={translate(\"plan.overview.enabled.label\")}\n                                        labelPlacement=\"start\"\n                                    />\n\n                                    <BodyText style={{ paddingTop: 16 }} text={translate(\"plan.overview.text_description\")} />\n                                    <FormTextField\n                                        label={translate(\"plan.overview.description.label\")}\n                                        placeholder={translate(\"plan.overview.description.placeholder\")}\n\n                                        multiline={true}\n                                        value={plan.description}\n                                        onChange={setDescription}\n                                    />\n                                </TabContainer>\n\n                                <TabContainer id={1} activeTab={selectedTab}>\n                                    <SubHeader text={translate(\"plan.schedules.section\")} />\n                                    <BodyText text={translate(\"plan.schedules.text\")} />\n\n                                    <div style={{ paddingTop: 16, display: \"flex\", flexDirection: \"row\" }}>\n                                        <Link style={{ textDecoration: \"none\" }} to={{ pathname: `/plans/${plan.id}/schedule`, state: plan }} replace={true}>\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n                                                {translate(\"plan.schedules.edit\")}\n                                            </Button>\n                                        </Link>\n\n                                        <Link style={{ textDecoration: \"none\" }} to={{ pathname: `/plans/${plan.id}/exceptions`, state: plan }} replace={true}>\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n                                                {translate(\"plan.schedules.exceptions\")}\n                                            </Button>\n                                        </Link>\n                                    </div>\n\n                                    {plan.schedule.length !== 0 && <SubHeader text={translate(\"plan.schedules.section_summary\")} />}\n                                    {plan.schedule.length !== 0 && <Chart plan={plan as IHeatingPlan} />}\n                                </TabContainer>\n\n                                <TabContainer id={2} activeTab={selectedTab}>\n                                    <SubHeader text={translate(\"plan.zones.section\")} />\n                                    <BodyText text={translate(\"plan.zones.text\")} />\n\n                                    {zones.length === 0\n                                        ? <BodyText style={{ paddingTop: 16 }} text={translate(\"plan.zones.empty\")} />\n                                        : <List>\n                                            {map(zones, (zone) => (\n                                                <ListItem key={zone.id} button={true} onClick={() => toggleZone(zone.id)}>\n                                                    {zone.icon != null &&\n                                                        <ListItemAvatar>\n                                                            <ZoneIcon name={zone.icon} />\n                                                        </ListItemAvatar>\n                                                    }\n                                                    <ListItemText primary={zone.name} />\n                                                    <ListItemSecondaryAction>\n                                                        <Checkbox onChange={() => toggleZone(zone.id)} checked={plan.zones.find((c) => c === zone.id) != null} />\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    }\n                                </TabContainer>\n\n                                <TabContainer id={3} activeTab={selectedTab}>\n                                    <SubHeader text={translate(\"plan.devices.section\")} />\n                                    <BodyText text={translate(\"plan.devices.text\")} />\n\n                                    {devices.length === 0\n                                        ? <BodyText style={{ paddingTop: 16 }} text={translate(\"plan.devices.empty\")} />\n                                        : <List>\n                                            {map(devices, (device) => (\n                                                <ListItem key={device.id} button={true} onClick={() => toggleDevice(device.id)}>\n                                                    {device.icon != null &&\n                                                        <ListItemAvatar>\n                                                            <Avatar className={classes.avatar} src={`${__PRODUCTION__ ? \"\" : __HOMEY_DEV_URL}${device.icon}`} />\n                                                        </ListItemAvatar>\n                                                    }\n                                                    <ListItemText primary={device.name} />\n                                                    <ListItemSecondaryAction>\n                                                        <Checkbox onChange={() => toggleDevice(device.id)} checked={plan.devices.find((c) => c === device.id) != null} />\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    }\n                                </TabContainer>\n                            </Fragment>\n                        </ScrollLocky>\n                    ),\n                }}\n            </Page>\n        </Fragment>\n    );\n};\n\n// @ts-ignore\nexport default withSnackbar(withRouter(withStyles(styles)(PlanOverviewPage)));\n","import { useCallback, useEffect, useState } from \"react\";\nimport * as uuidv1 from \"uuid/v1\";\nimport { OverrideMode } from \"../../app/model\";\nimport { planAPI } from \"../api/heating\";\nimport { usePlanDispatch, usePlanGlobalState } from \"./PlanProvider\";\n\nexport const useHistory = () => {\n    const dispatch = usePlanDispatch();\n    const loaded = usePlanGlobalState(\"loaded\");\n\n    const savePoint = useCallback(() => dispatch({ type: \"savePoint\" }), [dispatch]);\n    const undo = useCallback(() => dispatch({ type: \"undo\" }), [dispatch]);\n    const commit = useCallback(() => dispatch({ type: \"commit\" }), [dispatch]);\n\n    useEffect(() => {\n        savePoint();\n    }, [loaded]);\n\n    return {\n        savePoint, undo, commit,\n    };\n};\n\nexport const useModifyPlan = () => {\n    const dispatch = usePlanDispatch();\n\n    const setName = useCallback((evt) => dispatch({ type: \"setName\", name: evt.target.value }), [dispatch]);\n    const setDescription = useCallback((evt) => dispatch({ type: \"setDescription\", description: evt.target.value }), [dispatch]);\n\n    const toggleState = useCallback(() => dispatch({ type: \"toggleEnabled\" }), [dispatch]);\n    const toggleZone = useCallback((id) => dispatch({ type: \"toggleZone\", zone: id }), [dispatch]);\n    const toggleDevice = useCallback((id) => dispatch({ type: \"toggleDevice\", device: id }), [dispatch]);\n\n    return { setName, setDescription, toggleState, toggleZone, toggleDevice };\n};\n\nexport const useModifyExceptions = () => {\n    const dispatch = usePlanDispatch();\n    const [isDirty, setDirty] = useState<boolean>(false);\n\n    const setOverride = useCallback((mode, temp) => {\n        dispatch({ type: \"setOverride\", mode, temperature: temp });\n        setDirty(true);\n    }, [dispatch]);\n\n    const clearOverride = useCallback((mode) => {\n        dispatch({ type: \"clearOverride\", mode });\n        setDirty(true);\n    }, [dispatch]);\n\n    const updateOverride = useCallback((mode: OverrideMode, target: number) => {\n        if (target === 0) { clearOverride(mode); } else { setOverride(mode, target); }\n    }, [dispatch]);\n\n    useEffect(() => {\n        setDirty(false);\n    }, []);\n\n    return { isDirty, setOverride, clearOverride, updateOverride };\n};\n\nexport const useModifySetPoints = () => {\n    const [isDirty, setDirty] = useState<boolean>(false);\n\n    const dispatch = usePlanDispatch();\n\n    const selectDay = useCallback((day) => { dispatch({ type: \"selectDay\", day }); }, [dispatch]);\n    const selectedDay = usePlanGlobalState(\"selectedDay\");\n    const setPoint = usePlanGlobalState(\"setPoint\");\n\n    const copyDays = useCallback((source, days) => {\n        if (days != null && days.length > 0) {\n            setDirty(true);\n            dispatch({ type: \"copyDays\", source, targets: days });\n        }\n    }, [dispatch]);\n\n    const removeSetPoint = useCallback((idx) => { setDirty(true); dispatch({ type: \"removeSetPoint\", index: idx }); }, [dispatch]);\n\n    const loadSetPoint = useCallback((point) => { dispatch({ type: \"loadSetPoint\", setPoint: point }); }, [dispatch]);\n    const newSetPoint = useCallback((day) => { dispatch({ type: \"newSetPoint\", day }); }, [dispatch]);\n\n    const saveSetPoint = useCallback((s) => {\n        if (s.index === -1) {\n            dispatch({ type: \"addSetPoint\", setPoint: s });\n        } else {\n            dispatch({ type: \"updateSetPoint\", setPoint: s });\n        }\n    }, [dispatch]);\n\n    const setStart = useCallback((date: Date | string) => dispatch({ type: \"setStart\", start: date }), [dispatch]);\n    const setTargetTemperature = useCallback((evt) => dispatch({ type: \"setTargetTemperature\", temperature: parseFloat(evt.target.value) }), [dispatch]);\n\n    useEffect(() => {\n        setDirty(false);\n    }, []);\n\n    return { setDirty, isDirty, selectedDay, setPoint, copyDays, removeSetPoint, loadSetPoint, newSetPoint, selectDay, saveSetPoint, setStart, setTargetTemperature };\n};\n\nlet cachedPlan = false;\nexport const usePlan = (id: string, keep: boolean = true) => {\n    const dispatch = usePlanDispatch();\n\n    const plan = usePlanGlobalState(\"plan\");\n    const loaded = usePlanGlobalState(\"loaded\");\n    const isDirty = usePlanGlobalState(\"dirty\");\n\n    if (!loaded || !keep) {\n        if ((id == null || id === \"new\") && !cachedPlan) {\n            cachedPlan = true;\n            dispatch({\n                type: \"loadPlan\", plan: {\n                    id: uuidv1(),\n                    enabled: false,\n                    name: \"\",\n                    zones: [],\n                    devices: [],\n                    schedule: [],\n                    overrides: undefined,\n                },\n            });\n        } else {\n            if (!cachedPlan) {\n                throw planAPI.fetchPlanById(id).then((p) => {\n                    cachedPlan = true;\n                    dispatch({ type: \"loadPlan\", plan: p });\n                });\n            }\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            cachedPlan = false;\n        };\n    }, [id, keep]);\n\n    return { plan, isDirty, loaded };\n};\n"],"names":["deviceAPI","fetchHeatingDevices","devices","result","sortBy","reduce","map","obj","idx","id","length","zoneAPI","fetchHeatingZones","zones","classes","otherProps","fullWidth","margin","theme","inputContainer","width","paddingLeft","spacing","paddingRight","props","className","children","Transition","Z","ConfirmDialog","open","title","content","onOK","onCancel","others","Dialog","onClose","TransitionComponent","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","ZoneIcon","name","Home","Hotel","People","HotTub","BusinessCenter","FreeBreakfast","DirectionsWalk","loadingDevices","loadingZones","CloneDialog","Chart","TabContainer","activeTab","fallback","LinearProgress","style","withStyles","button","divider","marginTop","marginBottom","avatar","height","selectedTab","selectTab","plan","isDirty","match","params","location","state","setName","setDescription","toggleState","toggleZone","toggleDevice","keep","dispatch","then","z","type","useEffect","useZones","d","useDevices","setIsCloneDialogOpen","isCloneDialogOpen","useState","dialog","confirmRemoveDialog","openConfirmRemove","isOpen","isConfirmRemoveOpen","onConfirm","setIsOpen","useConfirmDialog","removePlan","_p","history","push","pathname","enqueueSnackbar","Fragment","newPlan","enabled","catch","r","Page","header","AppHeader","Menu","first","to","component","icon","Cancel","actions","subBar","Tabs","value","onChange","_e","v","variant","scrollButtons","Tab","root","tab","disableRipple","label","n","paddingTop","body","isolation","SubHeader","text","BodyText","FormTextField","placeholder","FormControlLabel","control","Switch","checked","labelPlacement","multiline","description","display","flexDirection","textDecoration","replace","schedule","List","zone","ListItem","key","ListItemAvatar","ListItemText","primary","ListItemSecondaryAction","Checkbox","find","c","device","Avatar","src","useHistory","loaded","savePoint","useCallback","undo","commit","useModifyPlan","evt","target","useModifyExceptions","setDirty","setOverride","mode","temp","temperature","clearOverride","updateOverride","useModifySetPoints","selectDay","day","selectedDay","setPoint","copyDays","source","days","targets","removeSetPoint","index","loadSetPoint","point","newSetPoint","saveSetPoint","s","setStart","date","start","setTargetTemperature","parseFloat","cachedPlan","usePlan","p","overrides","undefined"],"sourceRoot":""}