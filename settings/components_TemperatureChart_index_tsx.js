/*! For license information please see components_TemperatureChart_index_tsx.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["components_TemperatureChart_index_tsx"],{"./components/TemperatureChart/Component.tsx":(t,e,a)=>{a.r(e),a.d(e,{default:()=>d});var s=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),r=a("../../node_modules/lodash/lodash.js"),i=a("../../node_modules/react/index.js"),n=a("../app/model/index.ts"),h=a("./state/calculateDay.tsx"),l=a("./components/TemperatureChart/SeriesElement.tsx"),o=a("./components/TemperatureChart/SVGGenerator.tsx");const d=(0,s.default)((t=>({chart:{padding:t.spacing(2),width:"100%","& .axis domain":{fill:t.palette.text.primary},"& text":{fill:t.palette.text.primary,fontSize:"12px"}}})))((t=>{const{classes:e,plan:a,height:s,legend:d}=t,u=i.createRef(),[c,m]=(()=>{const[t,e]=i.useState(null),[a,s]=i.useState({width:t?t.clientWidth:0,height:t?t.clientHeight:0});function n(t){s({width:t?t.clientWidth:0,height:t?t.clientHeight:0})}return i.useEffect((()=>{if(null!=t){n(t);const a=(e=t,(0,r.debounce)((()=>{n(e)}),300));return window.addEventListener("resize",a),()=>{window.removeEventListener("resize",a)}}var e}),[t]),[e,a]})();return i.useEffect((()=>{if(null!=u.current){const t=new o.SVGGenerator(u.current,d,m.width,m.height),e=[];[n.Day.Monday,n.Day.Tuesday,n.Day.Wednesday,n.Day.Thursday,n.Day.Friday,n.Day.Saturday,n.Day.Sunday].forEach((t=>{const{schedules:s,last:r}=(0,h.calculateDay)(Object.assign(Object.assign({},a),{schedule:(0,h.sortSchedules)(a.schedule)}),t);if(0===s.length){if(null==r)return;return void e.push(l.SeriesElement.fullDay(t,r.targetTemperature))}if(1===s.length&&null==r)return void e.push(l.SeriesElement.fullDay(t,s[0].targetTemperature));let i=null;s.forEach((t=>{null==i?e.push(l.SeriesElement.firstHalf(r,t)):e.push(new l.SeriesElement(i,t)),i=t})),null!=i&&e.push(new l.SeriesElement(i))})),t.data(e)}}),[a,m]),i.useEffect((()=>{c(u.current)}),[u]),i.createElement("div",{style:{height:s||300},className:e.chart,ref:u})}))},"./components/TemperatureChart/SVGGenerator.tsx":(t,e,a)=>{a.r(e),a.d(e,{MAX_DATE:()=>n,MIN_DATE:()=>i,SVGGenerator:()=>h});var s=a("../../node_modules/d3/index.js"),r=a("./i18n/Translation.tsx");const i=new Date(1979,1,29,0,0,0,0),n=new Date(1979,1,30,0,0,0,0);class h{constructor(t,e=!0,a,s){this.rootElement=t,this.showLegend=e,this.tickFormat="%H:%M",this.margin={top:0,right:16,bottom:16,left:28},this.series=[],this.minTime=i,this.maxTime=n,this.showLegend||(this.margin={top:0,right:0,bottom:0,left:0}),this.height=(s||t.clientHeight)-this.margin.top-this.margin.bottom,this.width=(a||t.clientWidth)-32-this.margin.right-this.margin.left,this.series=[(0,r.default)("schedule.Monday"),(0,r.default)("schedule.Tuesday"),(0,r.default)("schedule.Wednesday"),(0,r.default)("schedule.Thursday"),(0,r.default)("schedule.Friday"),(0,r.default)("schedule.Saturday"),(0,r.default)("schedule.Sunday")],this.initAxis(),this.createChart(!0)}data(t){const e=this.createChart(!1).select(".chart").selectAll("g").data(t,(t=>t.start+t.taskName+t.end)),a=e.enter().insert("g").attr("fill",(t=>t.color)).attr("transform",(t=>"translate("+this.xScale(t.start)+","+this.yScale(t.taskName)+")"));if(a.insert("rect").attr("height",this.yScale.bandwidth).attr("width",(t=>Math.max(1,(this.xScale(t.end)||0)-(this.xScale(t.start)||0)))),this.showLegend){const t=a.insert("text").attr("text-anchor","start").attr("x",6).attr("y",20).attr("width",(t=>Math.max(1,(this.xScale(t.end)||0)-(this.xScale(t.start)||0)-6))).text((t=>this.fixedDigits(t.temperature,1)));this.dotme(t)}e.exit().remove()}initAxis(){this.xScale=s.scaleTime().domain([this.minTime,this.maxTime]).range([0,this.width]).clamp(!0),this.yScale=s.scaleBand().domain(this.series).rangeRound([0,this.height-this.margin.top-this.margin.bottom]).padding(this.showLegend?.1:0),this.xAxis=s.axisBottom(this.xScale).tickFormat(s.timeFormat(this.tickFormat)).tickSize(this.showLegend?8:0).tickPadding(this.showLegend?8:0),this.yAxis=s.axisLeft(this.yScale).tickPadding(this.showLegend?8:0).tickSize(0)}dotme(t){t.each((function(){const t=s.select(this),e=parseInt(t.attr("width"),10);6.75*t.text().length>e&&t.text("")}))}fixedDigits(t,e){return(Math.round(t*Math.pow(10,e))/Math.pow(10,e)).toFixed(e)}createChart(t){let e=s.select(this.rootElement).select("svg");return t&&e.remove(),e.empty()&&(e=s.select(this.rootElement).append("svg").attr("width",this.width+this.margin.left+this.margin.right).attr("height",this.height+this.margin.top+this.margin.bottom),e.append("g").attr("class","chart").attr("width",this.width+this.margin.left+this.margin.right).attr("height",this.height+this.margin.top+this.margin.bottom).attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this.showLegend&&(e.append("g").attr("class","x axis").attr("transform","translate("+this.margin.left+", "+(this.height-this.margin.top-this.margin.bottom)+")").call(this.xAxis),e.append("g").attr("class","y axis").attr("transform","translate("+this.margin.left+", 0)").call(this.yAxis))),e}}},"./components/TemperatureChart/SeriesElement.tsx":(t,e,a)=>{a.r(e),a.d(e,{SeriesElement:()=>h});var s=a("../app/model/index.ts"),r=a("./i18n/Translation.tsx"),i=a("./components/temperatureToColor.tsx"),n=a("./components/TemperatureChart/SVGGenerator.tsx");class h{static fullDay(t,e){return new h({hour:0,minute:0,targetTemperature:e,index:-1,day:t})}static firstHalf(t,e){return new h({hour:0,minute:0,targetTemperature:t?t.targetTemperature:e.targetTemperature,index:-1,day:e.day},e)}constructor(t,e){this.start=new Date(n.MIN_DATE),this.end=new Date(n.MIN_DATE),this.temperature=t?t.targetTemperature:e?e.targetTemperature:0,this.start.setHours(t?t.hour:0,t?t.minute:0),this.end.setHours(e?e.hour:24,e?e.minute:0),this.taskName=(t=>{switch(t){case s.Day.Sunday:return(0,r.default)("schedule.Sunday");case s.Day.Monday:return(0,r.default)("schedule.Monday");case s.Day.Tuesday:return(0,r.default)("schedule.Tuesday");case s.Day.Wednesday:return(0,r.default)("schedule.Wednesday");case s.Day.Thursday:return(0,r.default)("schedule.Thursday");case s.Day.Friday:return(0,r.default)("schedule.Friday");case s.Day.Saturday:return(0,r.default)("schedule.Saturday");default:return"XX"}})(t?t.day:e?e.day:0),this.color=(0,i.temperatureToColor)(this.temperature)}}},"./components/TemperatureChart/index.tsx":(t,e,a)=>{a.r(e),a.d(e,{calculateDay:()=>r.calculateDay,default:()=>i});var s=a("./components/TemperatureChart/Component.tsx"),r=a("./state/calculateDay.tsx");const i=s.default},"./components/temperatureToColor.tsx":(t,e,a)=>{a.r(e),a.d(e,{slotTemperature:()=>h,temperatureToColor:()=>l});var s=a("../../node_modules/@material-ui/core/colors/amber.js"),r=a("../../node_modules/@material-ui/core/colors/blue.js"),i=a("../../node_modules/@material-ui/core/colors/deepOrange.js"),n=a("../../node_modules/@material-ui/core/colors/green.js");function h(t,e,a,s,r){return Math.floor((r-s)*(t-e)/(a-e)+s)}const l=t=>{const e=Math.round(100*h(Math.min(Math.max(16,t),24),16,24,1,8)+100);return t<=16?r.default[e]:t<=18.5?n.default[e]:t<=20.5?s.default[e]:i.default[e]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,