{"version":3,"file":"20.js","mappings":"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","sources":["webpack:///../app/services/homey-api/declarations.ts","webpack:///./components/FormTextField.tsx","webpack:///./components/InputContainer.tsx","webpack:///./components/OverrideSetting.tsx","webpack:///./pages/plan-exceptions.tsx","webpack:///./state/planHooks.tsx"],"sourcesContent":["export enum CapabilityType {\n    TargetTemperature = \"target_temperature\",\n    MeasureTemperature = \"measure_temperature\",\n\n    // Can not be called mode as this is a standard capability\n    ThermostatOverride = \"thermostat_override\",\n}\n\nexport const CLASS_THERMOSTAT: string = \"thermostat\";\n\n// from Capability â€” target_temperature\nexport const TARGET_TEMPERATURE_MIN = 4;\nexport const TARGET_TEMPERATURE_MAX = 35;\n","import TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport InputContainer from \"./InputContainer\";\n\nconst FormTextField = ({ classes, ...otherProps }: TextFieldProps) => {\n    return (\n        <InputContainer>\n            <TextField\n                fullWidth={true}\n                margin=\"normal\"\n                {...otherProps}\n            />\n        </InputContainer>\n    );\n};\n\nexport default FormTextField;\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    inputContainer: {\n        width: \"100%\",\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(3),\n    },\n});\n\ntype Props = {\n    children: React.ReactElement<any>,\n} & WithStyles<typeof styles>;\n\nconst InputContainer: React.FunctionComponent<Props> = (props) => {\n    return (<div className={props.classes.inputContainer}>{props.children}</div>);\n};\n\nexport default withStyles(styles)(InputContainer);\n","import FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport React, { Fragment } from \"react\";\nimport { OverrideMode } from \"../../app/model\";\nimport { TARGET_TEMPERATURE_MAX, TARGET_TEMPERATURE_MIN } from \"../../app/services/homey-api/declarations\";\nimport translate from \"../i18n/Translation\";\nimport FormTextField from \"./FormTextField\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    planOverride: {\n        marginBottom: theme.spacing(2),\n    },\n});\n\ntype PlanOverrideProps = {\n    mode: OverrideMode,\n    enabled: boolean;\n    targetTemperature: number,\n\n    text: string,\n    setOverride: (mode: OverrideMode, target: number) => void,\n} & WithStyles<typeof styles>;\n\nconst OverrideSetting: React.FunctionComponent<PlanOverrideProps> = (props) => {\n\n    return (\n        <Fragment>\n            <div className={props.classes.planOverride}>\n                <FormControlLabel\n                    style={{ marginLeft: 0 }}\n                    control={\n                        <Switch\n                            checked={props.enabled}\n                            onChange={(_e, checked) => {\n                                props.setOverride(props.mode,\n                                    checked ? (props.targetTemperature === 0 ? 16 : props.targetTemperature) : 0);\n                            }}\n                        />\n                    }\n                    label={props.text}\n                    labelPlacement=\"end\"\n                />\n\n                <FormTextField\n                    label={translate(\"plan.target.label\")}\n                    placeholder={translate(\"plan.target.placeholder\")}\n                    disabled={!props.enabled}\n                    hidden={!props.enabled}\n\n                    type=\"number\"\n                    InputProps={{ inputProps: { min: TARGET_TEMPERATURE_MIN, max: TARGET_TEMPERATURE_MAX, step: 0.5 } }}\n\n                    value={props.targetTemperature}\n                    onChange={(evt) => {\n                        props.setOverride(props.mode, parseFloat(evt.target.value));\n                    }}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nexport default withStyles(styles)(OverrideSetting);\n","import { Button } from \"@material-ui/core\";\nimport { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport BackIcon from \"@material-ui/icons/ArrowBackIos\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { OverrideMode } from \"../../app/model\";\nimport AppHeader from \"../components/AppHeader\";\nimport BodyText from \"../components/BodyText\";\nimport { MenuButton } from \"../components/Menu\";\nimport OverrideSetting from \"../components/OverrideSetting\";\nimport SubHeader from \"../components/SubHeader\";\nimport translate from \"../i18n/Translation\";\nimport Page from \"../layouts/Page\";\nimport { useHistory, useModifyExceptions, usePlan } from \"../state/planHooks\";\n\nconst styles: StyleRulesCallback<any, any> = (_theme) => ({\n    resetPadding: {\n        paddingBottom: 100,\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n});\n\ntype Params = {\n    id: string;\n};\n\ntype Props = WithStyles<typeof styles> & RouteComponentProps<Params, {}, boolean>;\n\nconst ScheduleExceptionsPage: React.FunctionComponent<Props> = (props: Props) => {\n    const { history, classes } = props;\n\n    const { plan } = usePlan(props.match.params.id);\n    const { isDirty, updateOverride } = useModifyExceptions();\n    const { undo, commit } = useHistory();\n\n    function onCancelDialog() {\n        undo();\n\n        // @ts-ignore\n        history.replace({\n            pathname: `/plans/${plan.id}`,\n            state: true,\n        });\n    }\n\n    function onSaveDialog() {\n        commit();\n\n        // @ts-ignore\n        history.replace({\n            pathname: `/plans/${plan.id}`,\n            state: true,\n        });\n    }\n\n    const getOverride = (mode: OverrideMode) => {\n        const override = plan.overrides != null\n            // made an error in first implementation storing the number instead of the value\n            ? (plan.overrides[OverrideMode[mode]] || plan.overrides[mode])\n            : null;\n\n        return {\n            mode,\n            enabled: override != null && override.targetTemperature !== 0,\n            targetTemperature: override != null ? override.targetTemperature : 0,\n        };\n    };\n\n    return (\n        <Page>\n            {{\n                header: (\n                    <AppHeader>\n                        {{\n                            title: translate(\"overrides.title\"),\n                            button: (\n                                <MenuButton first={true} onClick={onCancelDialog} icon={isDirty ? <CancelIcon /> : <BackIcon />} />\n                            ),\n                            actions: (\n                                <React.Fragment>\n                                    {isDirty &&\n                                        <Button color=\"inherit\" onClick={onSaveDialog}>\n                                            {translate(\"schedule.save\")}\n                                        </Button>\n                                    }\n                                </React.Fragment>\n                            ),\n                        }}\n                    </AppHeader>\n                ),\n                paddingTop: 50,\n                body: (\n                    <div className={classes.resetPadding}>\n                        <SubHeader text={translate(\"overrides.section\")} />\n                        <BodyText text={translate(\"overrides.text\")} />\n\n                        <OverrideSetting text={translate(\"overrides.athome\")} setOverride={updateOverride} {...getOverride(OverrideMode.DayAtHome)} />\n                        <OverrideSetting text={translate(\"overrides.away\")} setOverride={updateOverride} {...getOverride(OverrideMode.DayAway)} />\n                        <OverrideSetting text={translate(\"overrides.sleeping\")} setOverride={updateOverride} {...getOverride(OverrideMode.Sleep)} />\n                        <OverrideSetting text={translate(\"overrides.holiday\")} setOverride={updateOverride} {...getOverride(OverrideMode.Holiday)} />\n                        <OverrideSetting text={translate(\"overrides.outofseason\")} setOverride={updateOverride} {...getOverride(OverrideMode.OutOfSeason)} />\n                    </div>\n                ),\n            }}\n        </Page>\n    );\n};\n\nexport default withRouter(withStyles(styles)(ScheduleExceptionsPage));\n","import { useCallback, useEffect, useState } from \"react\";\nimport * as uuidv1 from \"uuid/v1\";\nimport { OverrideMode } from \"../../app/model\";\nimport { planAPI } from \"../api/heating\";\nimport { usePlanDispatch, usePlanGlobalState } from \"./PlanProvider\";\n\nexport const useHistory = () => {\n    const dispatch = usePlanDispatch();\n    const loaded = usePlanGlobalState(\"loaded\");\n\n    const savePoint = useCallback(() => dispatch({ type: \"savePoint\" }), [dispatch]);\n    const undo = useCallback(() => dispatch({ type: \"undo\" }), [dispatch]);\n    const commit = useCallback(() => dispatch({ type: \"commit\" }), [dispatch]);\n\n    useEffect(() => {\n        savePoint();\n    }, [loaded]);\n\n    return {\n        savePoint, undo, commit,\n    };\n};\n\nexport const useModifyPlan = () => {\n    const dispatch = usePlanDispatch();\n\n    const setName = useCallback((evt) => dispatch({ type: \"setName\", name: evt.target.value }), [dispatch]);\n    const setDescription = useCallback((evt) => dispatch({ type: \"setDescription\", description: evt.target.value }), [dispatch]);\n\n    const toggleState = useCallback(() => dispatch({ type: \"toggleEnabled\" }), [dispatch]);\n    const toggleZone = useCallback((id) => dispatch({ type: \"toggleZone\", zone: id }), [dispatch]);\n    const toggleDevice = useCallback((id) => dispatch({ type: \"toggleDevice\", device: id }), [dispatch]);\n\n    return { setName, setDescription, toggleState, toggleZone, toggleDevice };\n};\n\nexport const useModifyExceptions = () => {\n    const dispatch = usePlanDispatch();\n    const [isDirty, setDirty] = useState<boolean>(false);\n\n    const setOverride = useCallback((mode, temp) => {\n        dispatch({ type: \"setOverride\", mode, temperature: temp });\n        setDirty(true);\n    }, [dispatch]);\n\n    const clearOverride = useCallback((mode) => {\n        dispatch({ type: \"clearOverride\", mode });\n        setDirty(true);\n    }, [dispatch]);\n\n    const updateOverride = useCallback((mode: OverrideMode, target: number) => {\n        if (target === 0) { clearOverride(mode); } else { setOverride(mode, target); }\n    }, [dispatch]);\n\n    useEffect(() => {\n        setDirty(false);\n    }, []);\n\n    return { isDirty, setOverride, clearOverride, updateOverride };\n};\n\nexport const useModifySetPoints = () => {\n    const [isDirty, setDirty] = useState<boolean>(false);\n\n    const dispatch = usePlanDispatch();\n\n    const selectDay = useCallback((day) => { dispatch({ type: \"selectDay\", day }); }, [dispatch]);\n    const selectedDay = usePlanGlobalState(\"selectedDay\");\n    const setPoint = usePlanGlobalState(\"setPoint\");\n\n    const copyDays = useCallback((source, days) => {\n        if (days != null && days.length > 0) {\n            setDirty(true);\n            dispatch({ type: \"copyDays\", source, targets: days });\n        }\n    }, [dispatch]);\n\n    const removeSetPoint = useCallback((idx) => { setDirty(true); dispatch({ type: \"removeSetPoint\", index: idx }); }, [dispatch]);\n\n    const loadSetPoint = useCallback((point) => { dispatch({ type: \"loadSetPoint\", setPoint: point }); }, [dispatch]);\n    const newSetPoint = useCallback((day) => { dispatch({ type: \"newSetPoint\", day }); }, [dispatch]);\n\n    const saveSetPoint = useCallback((s) => {\n        if (s.index === -1) {\n            dispatch({ type: \"addSetPoint\", setPoint: s });\n        } else {\n            dispatch({ type: \"updateSetPoint\", setPoint: s });\n        }\n    }, [dispatch]);\n\n    const setStart = useCallback((date: Date | string) => dispatch({ type: \"setStart\", start: date }), [dispatch]);\n    const setTargetTemperature = useCallback((evt) => dispatch({ type: \"setTargetTemperature\", temperature: parseFloat(evt.target.value) }), [dispatch]);\n\n    useEffect(() => {\n        setDirty(false);\n    }, []);\n\n    return { setDirty, isDirty, selectedDay, setPoint, copyDays, removeSetPoint, loadSetPoint, newSetPoint, selectDay, saveSetPoint, setStart, setTargetTemperature };\n};\n\nlet cachedPlan = false;\nexport const usePlan = (id: string, keep: boolean = true) => {\n    const dispatch = usePlanDispatch();\n\n    const plan = usePlanGlobalState(\"plan\");\n    const loaded = usePlanGlobalState(\"loaded\");\n    const isDirty = usePlanGlobalState(\"dirty\");\n\n    if (!loaded || !keep) {\n        if ((id == null || id === \"new\") && !cachedPlan) {\n            cachedPlan = true;\n            dispatch({\n                type: \"loadPlan\", plan: {\n                    id: uuidv1(),\n                    enabled: false,\n                    name: \"\",\n                    zones: [],\n                    devices: [],\n                    schedule: [],\n                    overrides: undefined,\n                },\n            });\n        } else {\n            if (!cachedPlan) {\n                throw planAPI.fetchPlanById(id).then((p) => {\n                    cachedPlan = true;\n                    dispatch({ type: \"loadPlan\", plan: p });\n                });\n            }\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            cachedPlan = false;\n        };\n    }, [id, keep]);\n\n    return { plan, isDirty, loaded };\n};\n"],"names":["CapabilityType","TARGET_TEMPERATURE_MIN","TARGET_TEMPERATURE_MAX","classes","otherProps","fullWidth","margin","theme","inputContainer","width","paddingLeft","spacing","paddingRight","props","className","children","withStyles","planOverride","marginBottom","Fragment","FormControlLabel","style","marginLeft","control","Switch","checked","enabled","onChange","_e","setOverride","mode","targetTemperature","label","text","labelPlacement","FormTextField","placeholder","disabled","hidden","type","InputProps","inputProps","min","max","step","value","evt","parseFloat","target","_theme","resetPadding","paddingBottom","history","plan","match","params","id","isDirty","updateOverride","undo","commit","getOverride","override","overrides","Page","header","AppHeader","title","button","Menu","first","onClick","replace","pathname","state","icon","Cancel","actions","Button","color","paddingTop","body","SubHeader","BodyText","useHistory","dispatch","loaded","savePoint","useCallback","useEffect","useModifyPlan","setName","name","setDescription","description","toggleState","toggleZone","zone","toggleDevice","device","useModifyExceptions","setDirty","useState","temp","temperature","clearOverride","useModifySetPoints","selectDay","day","selectedDay","setPoint","copyDays","source","days","length","targets","removeSetPoint","idx","index","loadSetPoint","point","newSetPoint","saveSetPoint","s","setStart","date","start","setTargetTemperature","cachedPlan","usePlan","keep","then","p","zones","devices","schedule","undefined"],"sourceRoot":""}