{"version":3,"file":"17.js","mappings":"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","sources":["webpack:///../../node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js","webpack:///./api/devices/index.tsx","webpack:///./api/suspendableState.tsx","webpack:///./api/hooks.tsx","webpack:///./api/settings/index.tsx","webpack:///./api/zones/index.tsx","webpack:///./components/FormTextField.tsx","webpack:///./components/InputContainer.tsx","webpack:///./pages/settings.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      WebkitTapHighlightColor: 'transparent',\n      marginLeft: -11,\n      marginRight: 16,\n      // used for row presentation of radio/checkbox\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n    labelPlacementStart: {\n      flexDirection: 'row-reverse',\n      marginLeft: 16,\n      // used for row presentation of radio/checkbox\n      marginRight: -11\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n    labelPlacementTop: {\n      flexDirection: 'column-reverse',\n      marginLeft: 16\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n    labelPlacementBottom: {\n      flexDirection: 'column',\n      marginLeft: 16\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the label's Typography component. */\n    label: {\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      }\n    }\n  };\n};\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nvar FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {\n  var checked = props.checked,\n      classes = props.classes,\n      className = props.className,\n      control = props.control,\n      disabledProp = props.disabled,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$labelPlacement = props.labelPlacement,\n      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,\n      name = props.name,\n      onChange = props.onChange,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"checked\", \"classes\", \"className\", \"control\", \"disabled\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"]);\n\n  var muiFormControl = useFormControl();\n  var disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  var controlProps = {\n    disabled: disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"label\", _extends({\n    className: clsx(classes.root, className, labelPlacement !== 'end' && classes[\"labelPlacement\".concat(capitalize(labelPlacement))], disabled && classes.disabled),\n    ref: ref\n  }, other), /*#__PURE__*/React.cloneElement(control, controlProps), /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\",\n    className: clsx(classes.label, disabled && classes.disabled)\n  }, label));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);","\nimport { sortBy } from \"lodash\";\nimport { IHeatingDevice } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingDevice;\n} & ArrayLike<IHeatingDevice>;\n\n// Homey.api( String method, String path, Mixed body, Function callback )\nconst fetchHeatingDevices = async (): Promise<HashType> => {\n  const devices = await callAPI<any[]>(\"GET\", \"/devices\");\n\n  const result = sortBy(devices, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n  result.length = devices.length;\n\n  return result;\n};\n\nexport const deviceAPI = {\n  fetchHeatingDevices,\n};\n","import React, { Dispatch, SetStateAction, useEffect } from \"react\";\n\nexport type MapType = {[key: string]: any};\n\nexport type HookSetType<T> = Dispatch<SetStateAction<T>>;\nexport type HookReturnType = () => void;\nexport type ProvideState<T extends MapType> = (provideState?: boolean, provideFailed?: boolean) => T;\n\ntype Async<T> = () => Promise<T>;\n\n/***\n * Call the apiMethod asynchronously.\n *\n * If the method fails, throw the exception inside set SetStateAction of the hook.\n * This allows to catch the error \"in the ErrorBoundary.\"\n */\nasync function tryMethod<T>(apiMethod: () => Promise<T>, setStateAction: Dispatch<SetStateAction<T>>): Promise<void> {\n    try {\n        setStateAction(await apiMethod());\n    } catch (e) {\n        // required for the error to popup the hierarchy\n        setStateAction(() => { throw e; });\n    }\n}\n\nconst cache = new Map<string, any>();\nconst LOADING: any = \"Loading...\";\n\n/**\n * Create a \"hook\" that is able to suspend.\n *\n * @param name Must be unique\n * @param method The async method to wait for\n */\nexport function useSuspendableState<T extends MapType>(name: string, method: Async<any>): ProvideState<T> {\n    return (provideState = false, provideFailed = false) => {\n        // this is imporant as it sets the state after the promise resolves\n        const val = cache.get(name);\n        let [state, setState] = [null, null];\n        if (provideState) {\n            // we use instance compare on LOADING to determine non existing value\n            // @ts-ignore\n            [state, setState] = React.useState<any>(val !== LOADING ? val : null);\n        }\n\n        const [failed, setFailed] = React.useState(false);\n\n        function loadValue(force: boolean = false) {\n            if (cache.get(name) == null || force) {\n                cache.set(name, LOADING);\n\n                // this unloads the component and waits for the promise to resolve\n                throw tryMethod(method, (r) => {\n                    if (typeof r === \"function\") {\n                        cache.set(name, (r as any)(cache.get(name)));\n                    } else {\n                        cache.set(name, r);\n                    }\n                }).catch((e) => {\n                    if (!provideFailed) {\n                        // console.error(e);\n                        // check me - this doesn't work\n                        setFailed(() => { throw e; });\n                    } else {\n                        setFailed(true);\n                    }\n                });\n            }\n        }\n\n        loadValue();\n\n        useEffect(() => {\n            // console.log(\"killed value\");\n            return () => { cache.delete(name); };\n        }, []);\n\n        // we tell the DEV that this is not the way to go\n        function failOnNoState() {\n            if (!__PRODUCTION__) {\n                throw new Error(`You must use hooks to save the value ${name}`);\n            }\n        }\n\n        return {\n            [name]: provideState ? state : val,\n            [`set${name.charAt(0).toUpperCase() + name.slice(1)}`]: provideState ? setState : failOnNoState,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}`]: loadValue,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}Failed`]: failed,\n        } as T;\n    };\n}\n","import { IHeatingDevice, IHeatingPlan, IHeatingZone, IScheduleInformation, OperationMode } from \"../../app/model\";\nimport { deviceAPI } from \"./devices\";\nimport { modeAPI, planAPI } from \"./heating\";\nimport { settingsAPI, SettingsHashMap } from \"./settings\";\nimport { HookReturnType, HookSetType, useSuspendableState } from \"./suspendableState\";\nimport { zoneAPI } from \"./zones\";\n\ntype PlansType = {\n    plans: IHeatingPlan[],\n    setPlans: HookSetType<IHeatingPlan[]>,\n    loadPlans(force?: boolean): HookReturnType,\n};\n\ntype DevicesType = {\n    devices: IHeatingDevice[],\n    setDevices: HookSetType<IHeatingDevice[]>,\n    loadDevices: HookReturnType,\n};\n\ntype ZonesType = {\n    zones: IHeatingZone[],\n    setZones: HookSetType<IHeatingZone[]>,\n    loadZones: HookReturnType,\n};\n\ntype ScheduleInformationType = {\n    scheduleInformation: IScheduleInformation,\n    setScheduleInformation: HookSetType<IScheduleInformation>,\n    loadScheduleInformation: HookReturnType,\n};\n\ntype SettingsType = {\n    settings: SettingsHashMap,\n    setSettings: HookSetType<SettingsHashMap>,\n    loadSettings: HookReturnType,\n};\n\ntype ModeType = {\n    mode: OperationMode,\n    setMode: HookSetType<OperationMode>,\n    loadMode: HookReturnType,\n};\n\nexport const usePlans = useSuspendableState<PlansType>(\"plans\", planAPI.fetchPlans);\nexport const useDevices = useSuspendableState<DevicesType>(\"devices\", deviceAPI.fetchHeatingDevices);\nexport const useZones = useSuspendableState<ZonesType>(\"zones\", zoneAPI.fetchHeatingZones);\nexport const useScheduleInformation = useSuspendableState<ScheduleInformationType>(\"scheduleInformation\", planAPI.fetchSchedule);\nexport const useSettings = useSuspendableState<SettingsType>(\"settings\", settingsAPI.fetchSettings);\nexport const useMode = useSuspendableState<ModeType>(\"mode\", modeAPI.fetchMode);\n","import { Settings } from \"../../../app/services/settings-manager/types\";\nimport callAPI from \"../callAPI\";\n\nexport type SettingsHashMap = {\n  [key in keyof typeof Settings]?: string | boolean;\n};\n\nconst fetchSettings = async (): Promise<SettingsHashMap> => {\n  return await callAPI<SettingsHashMap>(\"GET\", \"/settings\");\n};\n\nconst updateSettings = async (settings: {}): Promise<void> => {\n  return await callAPI<any>(\"PUT\", `/settings`, settings);\n};\n\nexport const settingsAPI = {\n  fetchSettings,\n  updateSettings,\n};\n","import { sortBy } from \"lodash\";\nimport { IHeatingZone } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingZone;\n} & ArrayLike<IHeatingZone>;\n\nconst fetchHeatingZones = async (): Promise<HashType> => {\n  const zones = await callAPI<any[]>(\"GET\", \"/zones\");\n\n  const result = sortBy(zones, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n\n  result.length = zones.length;\n  return result;\n};\n\nexport const zoneAPI = {\n  fetchHeatingZones,\n};\n","import TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport InputContainer from \"./InputContainer\";\n\nconst FormTextField = ({ classes, ...otherProps }: TextFieldProps) => {\n    return (\n        <InputContainer>\n            <TextField\n                fullWidth={true}\n                margin=\"normal\"\n                {...otherProps}\n            />\n        </InputContainer>\n    );\n};\n\nexport default FormTextField;\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    inputContainer: {\n        width: \"100%\",\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(3),\n    },\n});\n\ntype Props = {\n    children: React.ReactElement<any>,\n} & WithStyles<typeof styles>;\n\nconst InputContainer: React.FunctionComponent<Props> = (props) => {\n    return (<div className={props.classes.inputContainer}>{props.children}</div>);\n};\n\nexport default withStyles(styles)(InputContainer);\n","import { Button } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { withSnackbar, WithSnackbarProps } from \"notistack\";\nimport React, { ChangeEvent } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Settings } from \"../../app/services/settings-manager/types\";\nimport { useSettings } from \"../api/hooks\";\nimport { settingsAPI, SettingsHashMap } from \"../api/settings\";\nimport AppHeader from \"../components/AppHeader\";\nimport BodyText from \"../components/BodyText\";\nimport FormTextField from \"../components/FormTextField\";\nimport InputContainer from \"../components/InputContainer\";\nimport { AppMenuButton, MenuButton } from \"../components/Menu\";\nimport SubHeader from \"../components/SubHeader\";\nimport translate from \"../i18n/Translation\";\nimport Page from \"../layouts/Page\";\n\nconst styles: StyleRulesCallback<any, any> = (_theme) => ({\n});\n\ntype Params = {\n    id: string;\n};\n\ntype SettingsName = keyof typeof Settings;\ntype Props = WithStyles<typeof styles> & RouteComponentProps<Params> & WithSnackbarProps;\n\nconst SettingsPage: React.FunctionComponent<Props> = (props) => {\n    const { settings, setSettings, loadSettings } = useSettings(true);\n    const [isDirty, setDirty] = React.useState<boolean>(false);\n\n    function getFieldValue(name: SettingsName, def: any = null) {\n        const val = settings[name];\n        return val == null ? def : val;\n    }\n\n    const updateField = (name: SettingsName, field: \"value\" | \"checked\" = \"value\") => (event: ChangeEvent) => {\n        const val = event.target[field];\n\n        setSettings((old) => {\n            return { ...old, [name]: val } as SettingsHashMap;\n        });\n        setDirty(true);\n    };\n\n    const save = () => {\n        settingsAPI.updateSettings(settings).then((_p) => {\n            props.enqueueSnackbar(translate(\"settings.saved\"));\n            setDirty(false);\n        });\n    };\n\n    return (\n        <Page>\n            {{\n                header: (\n                    <AppHeader>\n                        {{\n                            title: translate(\"settings.title\"),\n                            button: (\n                                <React.Fragment>\n                                    {!isDirty && <AppMenuButton />}\n                                    {isDirty &&\n                                        <MenuButton\n                                            first={true}\n                                            onClick={async () => {\n                                                await loadSettings();\n                                                setDirty(false);\n                                            }}\n                                            icon={<CancelIcon />}\n                                        />\n                                    }\n                                </React.Fragment>\n                            ),\n                            actions: (\n                                <React.Fragment>\n                                    {isDirty &&\n                                        <Button color=\"inherit\" onClick={save}>\n                                            save\n                                        </Button>\n                                    }\n                                </React.Fragment>\n                            ),\n                        }}\n                    </AppHeader>\n                ),\n                paddingTop: 50,\n                paddingBottom: 50,\n                body: (\n                    <React.Fragment>\n                        <SubHeader text={translate(\"settings.notifications.category\")} />\n                        <BodyText text={translate(\"settings.notifications.text\")} />\n                        <InputContainer>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={getFieldValue(\"NotifyModeChange\", true) === true}\n                                        onChange={updateField(\"NotifyModeChange\", \"checked\")}\n                                    />\n                                }\n                                label={translate(\"settings.notifications.NotifyModeChange\")}\n                                labelPlacement=\"end\"\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={getFieldValue(\"NotifySetError\", true) === true}\n                                        onChange={updateField(\"NotifySetError\", \"checked\")}\n                                    />\n                                }\n                                label={translate(\"settings.notifications.NotifySetError\")}\n                                labelPlacement=\"end\"\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={getFieldValue(\"NotifySetSuccess\", true) === true}\n                                        onChange={updateField(\"NotifySetSuccess\", \"checked\")}\n                                    />\n                                }\n                                label={translate(\"settings.notifications.NotifySetSuccess\")}\n                                labelPlacement=\"end\"\n                            />\n                        </InputContainer>\n\n                        <SubHeader text={translate(\"settings.sentry.category\")} />\n                        <BodyText text={translate(\"settings.sentry.text\")} />\n\n                        <InputContainer>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={getFieldValue(\"SentryEnabled\", true) === true}\n                                        onChange={updateField(\"SentryEnabled\", \"checked\")}\n                                    />\n                                }\n                                label={translate(\"settings.enabled.label\")}\n                                labelPlacement=\"end\"\n                            />\n                        </InputContainer>\n\n                        <SubHeader text={translate(\"settings.log.category\")} />\n                        <BodyText text={translate(\"settings.log.text\")} />\n\n                        <InputContainer>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={getFieldValue(\"ConsoleReLogEnabled\") === true}\n                                        onChange={updateField(\"ConsoleReLogEnabled\", \"checked\")}\n                                    />\n                                }\n                                label={translate(\"settings.enabled.label\")}\n                                labelPlacement=\"end\"\n                            />\n                        </InputContainer>\n\n                        <FormTextField\n                            label={translate(\"settings.category.label\")}\n                            placeholder={translate(\"settings.category.placeholder\")}\n\n                            required={getFieldValue(\"ConsoleReLogEnabled\") === true}\n                            value={getFieldValue(\"ConsoleReLogCategory\", \"\")}\n                            onChange={updateField(\"ConsoleReLogCategory\")}\n                        />\n\n                        <SubHeader text={translate(\"settings.backup.title\")} />\n                        <BodyText text={translate(\"settings.backup.text\")} />\n                        <FormTextField\n                            label={translate(\"settings.backup.label\")}\n                            placeholder={translate(\"settings.backup.placeholder\")}\n\n                            multiline={true}\n                            rowsMax=\"10\"\n\n                            value={getFieldValue(\"Plans\", \"\")}\n                            onChange={updateField(\"Plans\")}\n                        />\n                    </React.Fragment>\n                ),\n            }}\n        </Page>\n    );\n};\n\n// @ts-ignore\nexport default withSnackbar(withRouter(withStyles(styles)(SettingsPage)));\n"],"names":["FormControlLabel","props","ref","checked","classes","className","control","disabledProp","disabled","label","inputRef","_props$labelPlacement","labelPlacement","other","name","onChange","value","muiFormControl","controlProps","forEach","key","root","concat","component","propTypes","theme","display","alignItems","cursor","verticalAlign","WebkitTapHighlightColor","marginLeft","marginRight","labelPlacementStart","flexDirection","labelPlacementTop","labelPlacementBottom","color","palette","text","deviceAPI","fetchHeatingDevices","devices","result","sortBy","reduce","map","obj","idx","id","length","cache","Map","LOADING","useSuspendableState","method","provideState","provideFailed","val","get","state","setState","failed","setFailed","loadValue","force","set","apiMethod","setStateAction","e","tryMethod","r","catch","useEffect","delete","charAt","toUpperCase","slice","usePlans","useDevices","useZones","useScheduleInformation","useSettings","settings","useMode","settingsAPI","fetchSettings","updateSettings","zoneAPI","fetchHeatingZones","zones","otherProps","fullWidth","margin","inputContainer","width","paddingLeft","spacing","paddingRight","children","_theme","setSettings","loadSettings","isDirty","setDirty","getFieldValue","def","updateField","field","event","target","old","header","title","button","first","onClick","icon","actions","then","_p","enqueueSnackbar","paddingTop","paddingBottom","body","placeholder","required","multiline","rowsMax"],"sourceRoot":""}