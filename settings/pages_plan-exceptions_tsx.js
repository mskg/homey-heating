/*! For license information please see pages_plan-exceptions_tsx.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["pages_plan-exceptions_tsx"],{"../app/services/homey-api/declarations.ts":(e,t,a)=>{var s;a.r(t),a.d(t,{CLASS_THERMOSTAT:()=>l,CapabilityType:()=>s,TARGET_TEMPERATURE_MAX:()=>n,TARGET_TEMPERATURE_MIN:()=>r}),function(e){e.TargetTemperature="target_temperature",e.MeasureTemperature="measure_temperature",e.ThermostatOverride="thermostat_override"}(s||(s={}));const l="thermostat",r=4,n=35},"./components/FormTextField.tsx":(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/@material-ui/core/esm/TextField/TextField.js"),r=a("../../node_modules/react/index.js"),n=a("./components/InputContainer.tsx");const o=e=>{var{classes:t}=e,a=(0,s.__rest)(e,["classes"]);return r.createElement(n.default,null,r.createElement(l.default,Object.assign({fullWidth:!0,margin:"normal"},a)))}},"./components/InputContainer.tsx":(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});var s=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),l=a("../../node_modules/react/index.js");const r=(0,s.default)((e=>({inputContainer:{width:"100%",paddingLeft:e.spacing(2),paddingRight:e.spacing(3)}})))((e=>l.createElement("div",{className:e.classes.inputContainer},e.children)))},"./components/OverrideSetting.tsx":(e,t,a)=>{a.r(t),a.d(t,{default:()=>u});var s=a("../../node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),r=a("../../node_modules/@material-ui/core/esm/Switch/Switch.js"),n=a("../../node_modules/react/index.js"),o=a("../app/services/homey-api/declarations.ts"),d=a("./i18n/Translation.tsx"),i=a("./components/FormTextField.tsx");const u=(0,l.default)((e=>({planOverride:{marginBottom:e.spacing(2)}})))((e=>n.createElement(n.Fragment,null,n.createElement("div",{className:e.classes.planOverride},n.createElement(s.default,{style:{marginLeft:0},control:n.createElement(r.default,{checked:e.enabled,onChange:(t,a)=>{e.setOverride(e.mode,a?0===e.targetTemperature?16:e.targetTemperature:0)}}),label:e.text,labelPlacement:"end"}),n.createElement(i.default,{label:(0,d.default)("plan.target.label"),placeholder:(0,d.default)("plan.target.placeholder"),disabled:!e.enabled,hidden:!e.enabled,type:"number",InputProps:{inputProps:{min:o.TARGET_TEMPERATURE_MIN,max:o.TARGET_TEMPERATURE_MAX,step:.5}},value:e.targetTemperature,onChange:t=>{e.setOverride(e.mode,parseFloat(t.target.value))}})))))},"./pages/plan-exceptions.tsx":(e,t,a)=>{a.r(t),a.d(t,{default:()=>b});var s=a("../../node_modules/@material-ui/core/esm/Button/Button.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),r=a("../../node_modules/@material-ui/icons/ArrowBackIos.js"),n=a("../../node_modules/@material-ui/icons/Cancel.js"),o=a("../../node_modules/react/index.js"),d=a("../../node_modules/react-router/esm/react-router.js"),i=a("../app/model/index.ts"),u=a("./components/AppHeader.tsx"),c=a("./components/BodyText.tsx"),m=a("./components/Menu.tsx"),p=a("./components/OverrideSetting.tsx"),v=a("./components/SubHeader.tsx"),y=a("./i18n/Translation.tsx"),f=a("./layouts/Page.tsx"),g=a("./state/planHooks.tsx");const b=(0,d.withRouter)((0,l.default)((e=>({resetPadding:{paddingBottom:100,paddingLeft:0,paddingRight:0}})))((e=>{const{history:t,classes:a}=e,{plan:l}=(0,g.usePlan)(e.match.params.id),{isDirty:d,updateOverride:b}=(0,g.useModifyExceptions)(),{undo:x,commit:E}=(0,g.useHistory)(),P=e=>{const t=null!=l.overrides?l.overrides[i.OverrideMode[e]]||l.overrides[e]:null;return{mode:e,enabled:null!=t&&0!==t.targetTemperature,targetTemperature:null!=t?t.targetTemperature:0}};return o.createElement(f.default,null,{header:o.createElement(u.default,null,{title:(0,y.default)("overrides.title"),button:o.createElement(m.MenuButton,{first:!0,onClick:function(){x(),t.replace({pathname:`/plans/${l.id}`,state:!0})},icon:d?o.createElement(n.default,null):o.createElement(r.default,null)}),actions:o.createElement(o.Fragment,null,d&&o.createElement(s.default,{color:"inherit",onClick:function(){E(),t.replace({pathname:`/plans/${l.id}`,state:!0})}},(0,y.default)("schedule.save")))}),paddingTop:50,body:o.createElement("div",{className:a.resetPadding},o.createElement(v.default,{text:(0,y.default)("overrides.section")}),o.createElement(c.default,{text:(0,y.default)("overrides.text")}),o.createElement(p.default,Object.assign({text:(0,y.default)("overrides.athome"),setOverride:b},P(i.OverrideMode.DayAtHome))),o.createElement(p.default,Object.assign({text:(0,y.default)("overrides.away"),setOverride:b},P(i.OverrideMode.DayAway))),o.createElement(p.default,Object.assign({text:(0,y.default)("overrides.sleeping"),setOverride:b},P(i.OverrideMode.Sleep))),o.createElement(p.default,Object.assign({text:(0,y.default)("overrides.holiday"),setOverride:b},P(i.OverrideMode.Holiday))),o.createElement(p.default,Object.assign({text:(0,y.default)("overrides.outofseason"),setOverride:b},P(i.OverrideMode.OutOfSeason))))})})))},"./state/planHooks.tsx":(e,t,a)=>{a.r(t),a.d(t,{useHistory:()=>o,useModifyExceptions:()=>i,useModifyPlan:()=>d,useModifySetPoints:()=>u,usePlan:()=>m});var s=a("../../node_modules/react/index.js"),l=a("../../node_modules/uuid/v1.js"),r=a("./api/heating/index.tsx"),n=a("./state/PlanProvider.tsx");const o=()=>{const e=(0,n.usePlanDispatch)(),t=(0,n.usePlanGlobalState)("loaded"),a=(0,s.useCallback)((()=>e({type:"savePoint"})),[e]),l=(0,s.useCallback)((()=>e({type:"undo"})),[e]),r=(0,s.useCallback)((()=>e({type:"commit"})),[e]);return(0,s.useEffect)((()=>{a()}),[t]),{savePoint:a,undo:l,commit:r}},d=()=>{const e=(0,n.usePlanDispatch)();return{setName:(0,s.useCallback)((t=>e({type:"setName",name:t.target.value})),[e]),setDescription:(0,s.useCallback)((t=>e({type:"setDescription",description:t.target.value})),[e]),toggleState:(0,s.useCallback)((()=>e({type:"toggleEnabled"})),[e]),toggleZone:(0,s.useCallback)((t=>e({type:"toggleZone",zone:t})),[e]),toggleDevice:(0,s.useCallback)((t=>e({type:"toggleDevice",device:t})),[e])}},i=()=>{const e=(0,n.usePlanDispatch)(),[t,a]=(0,s.useState)(!1),l=(0,s.useCallback)(((t,s)=>{e({type:"setOverride",mode:t,temperature:s}),a(!0)}),[e]),r=(0,s.useCallback)((t=>{e({type:"clearOverride",mode:t}),a(!0)}),[e]),o=(0,s.useCallback)(((e,t)=>{0===t?r(e):l(e,t)}),[e]);return(0,s.useEffect)((()=>{a(!1)}),[]),{isDirty:t,setOverride:l,clearOverride:r,updateOverride:o}},u=()=>{const[e,t]=(0,s.useState)(!1),a=(0,n.usePlanDispatch)(),l=(0,s.useCallback)((e=>{a({type:"selectDay",day:e})}),[a]),r=(0,n.usePlanGlobalState)("selectedDay"),o=(0,n.usePlanGlobalState)("setPoint"),d=(0,s.useCallback)(((e,s)=>{null!=s&&s.length>0&&(t(!0),a({type:"copyDays",source:e,targets:s}))}),[a]),i=(0,s.useCallback)((e=>{t(!0),a({type:"removeSetPoint",index:e})}),[a]),u=(0,s.useCallback)((e=>{a({type:"loadSetPoint",setPoint:e})}),[a]),c=(0,s.useCallback)((e=>{a({type:"newSetPoint",day:e})}),[a]),m=(0,s.useCallback)((e=>{-1===e.index?a({type:"addSetPoint",setPoint:e}):a({type:"updateSetPoint",setPoint:e})}),[a]),p=(0,s.useCallback)((e=>a({type:"setStart",start:e})),[a]),v=(0,s.useCallback)((e=>a({type:"setTargetTemperature",temperature:parseFloat(e.target.value)})),[a]);return(0,s.useEffect)((()=>{t(!1)}),[]),{setDirty:t,isDirty:e,selectedDay:r,setPoint:o,copyDays:d,removeSetPoint:i,loadSetPoint:u,newSetPoint:c,selectDay:l,saveSetPoint:m,setStart:p,setTargetTemperature:v}};let c=!1;const m=(e,t=!0)=>{const a=(0,n.usePlanDispatch)(),o=(0,n.usePlanGlobalState)("plan"),d=(0,n.usePlanGlobalState)("loaded"),i=(0,n.usePlanGlobalState)("dirty");if(!d||!t)if(null!=e&&"new"!==e||c){if(!c)throw r.planAPI.fetchPlanById(e).then((e=>{c=!0,a({type:"loadPlan",plan:e})}))}else c=!0,a({type:"loadPlan",plan:{id:l(),enabled:!1,name:"",zones:[],devices:[],schedule:[],overrides:void 0}});return(0,s.useEffect)((()=>()=>{c=!1}),[e,t]),{plan:o,isDirty:i,loaded:d}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,