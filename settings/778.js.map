{"version":3,"file":"778.js","mappings":"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","sources":["webpack:///./components/TemperatureChart/SVGGenerator.tsx","webpack:///./components/TemperatureChart/SeriesElement.tsx","webpack:///./components/TemperatureChart/Component.tsx","webpack:///./components/TemperatureChart/index.tsx","webpack:///./components/temperatureToColor.tsx"],"sourcesContent":["/**\n * Inspired by https://github.com/dk8996/Gantt-Chart\n */\n\nimport * as d3 from \"d3\";\nimport { Axis, ScaleBand, ScaleTime } from \"d3\";\nimport translate from \"../../i18n/Translation\";\nimport { SeriesElement } from \"./SeriesElement\";\n\nexport const MIN_DATE = new Date(1979, 1, 29, 0, 0, 0, 0);\nexport const MAX_DATE = new Date(1979, 1, 30, 0, 0, 0, 0);\n\nexport class SVGGenerator {\n    public tickFormat: string = \"%H:%M\";\n    public margin = {\n        top: 0,\n        right: 16,\n        bottom: 16,\n        left: 28,\n    };\n\n    private minTime: Date;\n    private maxTime: Date;\n\n    private height: number;\n    private width: number;\n\n    private xScale!: ScaleTime<number, number>;\n    private yScale!: ScaleBand<string>;\n\n    private xAxis!: Axis<any>;\n    private yAxis!: Axis<string>;\n\n    private series: string[] = [];\n\n    constructor(\n        private rootElement: HTMLElement, private showLegend = true,\n        width?: number, height?: number) {\n        this.minTime = MIN_DATE;\n        this.maxTime = MAX_DATE;\n\n        if (!this.showLegend) {\n            this.margin = {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n            };\n        }\n\n        this.height = (height ? height : rootElement.clientHeight) - this.margin.top - this.margin.bottom;\n        this.width = (width ? width : rootElement.clientWidth) - 32 - this.margin.right - this.margin.left;\n\n        this.series = [\n            translate(\"schedule.Monday\"),\n            translate(\"schedule.Tuesday\"),\n            translate(\"schedule.Wednesday\"),\n            translate(\"schedule.Thursday\"),\n            translate(\"schedule.Friday\"),\n            translate(\"schedule.Saturday\"),\n            translate(\"schedule.Sunday\"),\n        ];\n\n        this.initAxis();\n        this.createChart(true);\n    }\n\n    public data(data: SeriesElement[]) {\n        const svg = this.createChart(false);\n        const chart = svg.select(\".chart\");\n\n        // @ts-ignore\n        const allData = chart.selectAll(\"g\").data<SeriesElement>(\n            data, (d: SeriesElement) => d.start + d.taskName + d.end);\n\n        const timeslot = allData.enter()\n            .insert(\"g\")\n            .attr(\"fill\", (d: SeriesElement) => d.color)\n            .attr(\"transform\", (d: SeriesElement) => \"translate(\" + this.xScale(d.start) + \",\" + this.yScale(d.taskName) + \")\");\n\n        timeslot.insert(\"rect\")\n            .attr(\"height\", this.yScale.bandwidth)\n            .attr(\"width\", (d: SeriesElement) => {\n                return Math.max(1, ((this.xScale(d.end) || 0) - (this.xScale(d.start) || 0)));\n            });\n\n        if (this.showLegend) {\n            const text = timeslot.insert(\"text\")\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"x\", 6)\n                .attr(\"y\", 20)\n                .attr(\"width\", (d: SeriesElement) => {\n                    return Math.max(1, ((this.xScale(d.end) || 0) - (this.xScale(d.start) || 0) - 6));\n                })\n                .text((d: SeriesElement) => this.fixedDigits(d.temperature, 1));\n\n            this.dotme(text);\n        }\n        allData.exit().remove();\n    }\n\n    private initAxis() {\n        this.xScale = d3.scaleTime()\n            .domain([this.minTime, this.maxTime])\n            .range([0, this.width])\n            .clamp(true); // cut off longer entries (should not happen)\n\n        this.yScale = d3.scaleBand()\n            .domain(this.series)\n            .rangeRound([0, this.height - this.margin.top - this.margin.bottom])\n            .padding(this.showLegend ? .1 : 0); // some space between\n\n        this.xAxis = d3.axisBottom(this.xScale)\n            // @ts-ignore\n            .tickFormat(d3.timeFormat(this.tickFormat))\n            .tickSize(this.showLegend ? 8 : 0)\n            .tickPadding(this.showLegend ? 8 : 0);\n\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickPadding(this.showLegend ? 8 : 0)\n            .tickSize(0); // no ticks\n    }\n\n    private dotme(textNode: any) {\n        textNode.each(function() {\n            // @ts-ignore\n            const text = d3.select(this);\n            const width = parseInt(text.attr(\"width\"), 10);\n\n            if (text.text().length * (27 / 4 /* per character */) > width) {\n                text.text(\"\");\n            }\n        });\n    }\n\n    private fixedDigits(value: number, digits: number) {\n        return (Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits)).toFixed(digits);\n    }\n\n    private createChart(init: boolean) {\n        let svg = d3.select(this.rootElement).select(\"svg\");\n        if (init) { svg.remove(); }\n\n        if (svg.empty()) {\n            // @ts-ignore\n            svg = d3.select(this.rootElement)\n                .append(\"svg\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n\n            svg.append(\"g\")\n                .attr(\"class\", \"chart\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom)\n                .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + this.margin.top + \")\");\n\n            if (this.showLegend) {\n                svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + (this.height - this.margin.top - this.margin.bottom) + \")\")\n                    .call(this.xAxis);\n\n                svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n                    .call(this.yAxis);\n            }\n        }\n\n        return svg;\n    }\n}\n","import { Day } from \"../../../app/model\";\nimport translate from \"../../i18n/Translation\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { temperatureToColor } from \"../temperatureToColor\";\nimport { MIN_DATE } from \"./SVGGenerator\";\n\nconst translateDay = (day: Day) => {\n    switch (day) {\n        case Day.Sunday: return translate(\"schedule.Sunday\");\n        case Day.Monday: return translate(\"schedule.Monday\");\n        case Day.Tuesday: return translate(\"schedule.Tuesday\");\n        case Day.Wednesday: return translate(\"schedule.Wednesday\");\n        case Day.Thursday: return translate(\"schedule.Thursday\");\n        case Day.Friday: return translate(\"schedule.Friday\");\n        case Day.Saturday: return translate(\"schedule.Saturday\");\n        default: return \"XX\";\n    }\n};\n\nexport class SeriesElement {\n    public static fullDay(day: Day, temperature: number) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: temperature,\n            index: -1,\n            day,\n        });\n    }\n\n    public static firstHalf(from: IndexedSetPoint, to: IndexedSetPoint) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: from ? from.targetTemperature : to.targetTemperature,\n            index: -1,\n            day: to.day,\n        }, to);\n    }\n\n    public readonly start = new Date(MIN_DATE);\n    public readonly end = new Date(MIN_DATE);\n\n    public readonly temperature: number;\n    public readonly taskName: string;\n\n    public readonly color: string;\n\n    constructor(from?: IndexedSetPoint, to?: IndexedSetPoint) {\n        this.temperature = from\n            ? from.targetTemperature\n            : to ? to.targetTemperature : 0;\n\n        this.start.setHours(from ? from.hour : 0, from ? from.minute : 0);\n        this.end.setHours(to ? to.hour : 24, to ? to.minute : 0);\n\n        this.taskName = translateDay(from\n                ? from.day\n                : to ? to.day : 0);\n\n        this.color = temperatureToColor(this.temperature);\n    }\n}\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport { debounce } from \"lodash\";\nimport React from \"react\";\nimport { Day, IHeatingPlan } from \"../../../app/model\";\nimport { calculateDay, sortSchedules } from \"../../state/calculateDay\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { SeriesElement } from \"./SeriesElement\";\nimport { SVGGenerator } from \"./SVGGenerator\";\n\nconst useDimensions = () => {\n    const [ref, setRef] = React.useState<HTMLDivElement | null>(null);\n\n    const [dimensions, setDimensions] = React.useState({\n        width: ref ? ref.clientWidth : 0,\n        height: ref ? ref.clientHeight : 0,\n    });\n\n    function updateDimensions(inner: HTMLDivElement) {\n        setDimensions({\n            width: inner ? inner.clientWidth : 0,\n            height: inner ? inner.clientHeight : 0,\n        });\n    }\n\n    // @ts-ignore\n    React.useEffect(() => {\n        if (ref != null) {\n            updateDimensions(ref);\n\n            const func = ((savedRef) => debounce(() => {\n                updateDimensions(savedRef);\n            }, 300))(ref);\n\n            window.addEventListener(\"resize\", func);\n\n            return () => {\n                window.removeEventListener(\"resize\", func);\n            };\n        }\n    }, [ref]);\n\n    return [setRef, dimensions];\n};\n\nconst styles: StyleRulesCallback<any, any> = (theme) => {\n    return {\n        chart: {\n            padding: theme.spacing(2),\n            width: \"100%\",\n\n            [\"& .axis domain\"]: {\n                fill: theme.palette.text.primary,\n            },\n\n            [\"& text\"]: {\n                fill: theme.palette.text.primary,\n                fontSize: \"12px\",\n            },\n        },\n    };\n};\n\ntype Props = {\n    plan: IHeatingPlan,\n    height?: number,\n    legend?: boolean,\n} & WithStyles<typeof styles>;\n\nconst TemperatureChart: React.FunctionComponent<Props> = (props) => {\n    const { classes, plan, height, legend } = props;\n    const ref = React.createRef<HTMLDivElement>();\n    const [setRef, dimensions] = useDimensions();\n\n    React.useEffect(() => {\n        if (ref.current != null) {\n            const chart = new SVGGenerator(ref.current, legend,\n                (dimensions as any).width,\n                (dimensions as any).height);\n\n            const tasks: SeriesElement[] = [];\n\n            // setpoints get translated to [from - to]\n            [Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday].forEach((day) => {\n                // schedules need to be sorted\n                const { schedules, last } = calculateDay({ ...plan, schedule: sortSchedules(plan.schedule) }, day);\n\n                if (schedules.length === 0) {\n                    if (last == null) { return; }\n\n                    tasks.push(SeriesElement.fullDay(day, last.targetTemperature));\n                    return;\n                    // only one setpoint\n                } else if (schedules.length === 1 && last == null) {\n                    tasks.push(SeriesElement.fullDay(day, schedules[0].targetTemperature));\n                    return;\n                }\n\n                let previous: IndexedSetPoint | null = null;\n\n                schedules.forEach((current) => {\n                    if (previous == null) {\n                        tasks.push(SeriesElement.firstHalf(last as IndexedSetPoint, current));\n                    } else {\n                        tasks.push(new SeriesElement(previous, current));\n                    }\n\n                    previous = current;\n                });\n\n                if (previous != null) {\n                    // until eod\n                    tasks.push(new SeriesElement(previous));\n                }\n            });\n\n            chart.data(tasks);\n        }\n    }, [plan, dimensions]);\n\n    React.useEffect(() => {\n        (setRef as any)(ref.current);\n    }, [ref]);\n\n    return (<div style={{ height: height || 300 }} className={classes.chart} ref={ref} />);\n};\n\nexport default withStyles(styles)(TemperatureChart);\n","import Component from \"./Component\";\nexport default Component;\n\nexport { calculateDay } from \"../../state/calculateDay\";\n","import amber from \"@material-ui/core/colors/amber\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport deepOrange from \"@material-ui/core/colors/deepOrange\";\nimport green from \"@material-ui/core/colors/green\";\n\nexport function slotTemperature(val: number, min: number, max: number, a: number, b: number) {\n    //        (b-a)(x - min)\n    // f(x) = -------------- +  a\n    //        max - min\n    //\n    return Math.floor(\n        (((b - a) * (val - min)) /\n        (max - min))\n        + a,\n    );\n}\n\nexport const temperatureToColor = (n: number) => {\n    // project 16 ... 24 to 200 ... 900\n    const shade = Math.round(slotTemperature(\n        Math.min(Math.max(16, n), 24),\n        16, 24,\n        1, 8) * 100 + 100);\n\n    if (n <= 16) {\n        return blue[shade];\n    }\n\n    if (n <= 18.5) {\n        return green[shade];\n    }\n\n    if (n <= 20.5) {\n        return amber[shade];\n    }\n\n    return deepOrange[shade];\n};\n"],"names":["MIN_DATE","Date","MAX_DATE","SVGGenerator","constructor","rootElement","showLegend","width","height","tickFormat","margin","top","right","bottom","left","series","this","minTime","maxTime","clientHeight","clientWidth","initAxis","createChart","data","allData","select","selectAll","d","start","taskName","end","timeslot","enter","insert","attr","color","xScale","yScale","bandwidth","Math","max","text","fixedDigits","temperature","dotme","exit","remove","d3","domain","range","clamp","rangeRound","padding","xAxis","tickSize","tickPadding","yAxis","textNode","each","parseInt","length","value","digits","round","pow","toFixed","init","svg","empty","append","call","SeriesElement","static","day","hour","minute","targetTemperature","index","from","to","setHours","translateDay","temperatureToColor","withStyles","theme","chart","spacing","fill","palette","primary","fontSize","props","classes","plan","legend","ref","setRef","dimensions","setDimensions","updateDimensions","inner","func","savedRef","debounce","window","addEventListener","removeEventListener","useDimensions","current","tasks","forEach","schedules","last","calculateDay","schedule","push","fullDay","previous","firstHalf","style","className","n","shade","val","min","floor"],"sourceRoot":""}