{"version":3,"file":"3.js","mappings":"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","sources":["webpack:///../../assets/icon_black.svg","webpack:///./api/devices/index.tsx","webpack:///./api/suspendableState.tsx","webpack:///./api/hooks.tsx","webpack:///./api/settings/index.tsx","webpack:///./api/zones/index.tsx","webpack:///./components/FormTextField.tsx","webpack:///./components/InputContainer.tsx","webpack:///./components/TemperatureAvatar.tsx","webpack:///./components/temperatureToColor.tsx","webpack:///./pages/temperatures.tsx"],"sourcesContent":["module.exports = __webpack_public_path__ + \"icon_black.svg?5136879a03a13f9fb18f241b081f38cb\";","\nimport { sortBy } from \"lodash\";\nimport { IHeatingDevice } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingDevice;\n} & ArrayLike<IHeatingDevice>;\n\n// Homey.api( String method, String path, Mixed body, Function callback )\nconst fetchHeatingDevices = async (): Promise<HashType> => {\n  const devices = await callAPI<any[]>(\"GET\", \"/devices\");\n\n  const result = sortBy(devices, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n  result.length = devices.length;\n\n  return result;\n};\n\nexport const deviceAPI = {\n  fetchHeatingDevices,\n};\n","import React, { Dispatch, SetStateAction, useEffect } from \"react\";\n\nexport type MapType = {[key: string]: any};\n\nexport type HookSetType<T> = Dispatch<SetStateAction<T>>;\nexport type HookReturnType = () => void;\nexport type ProvideState<T extends MapType> = (provideState?: boolean, provideFailed?: boolean) => T;\n\ntype Async<T> = () => Promise<T>;\n\n/***\n * Call the apiMethod asynchronously.\n *\n * If the method fails, throw the exception inside set SetStateAction of the hook.\n * This allows to catch the error \"in the ErrorBoundary.\"\n */\nasync function tryMethod<T>(apiMethod: () => Promise<T>, setStateAction: Dispatch<SetStateAction<T>>): Promise<void> {\n    try {\n        setStateAction(await apiMethod());\n    } catch (e) {\n        // required for the error to popup the hierarchy\n        setStateAction(() => { throw e; });\n    }\n}\n\nconst cache = new Map<string, any>();\nconst LOADING: any = \"Loading...\";\n\n/**\n * Create a \"hook\" that is able to suspend.\n *\n * @param name Must be unique\n * @param method The async method to wait for\n */\nexport function useSuspendableState<T extends MapType>(name: string, method: Async<any>): ProvideState<T> {\n    return (provideState = false, provideFailed = false) => {\n        // this is imporant as it sets the state after the promise resolves\n        const val = cache.get(name);\n        let [state, setState] = [null, null];\n        if (provideState) {\n            // we use instance compare on LOADING to determine non existing value\n            // @ts-ignore\n            [state, setState] = React.useState<any>(val !== LOADING ? val : null);\n        }\n\n        const [failed, setFailed] = React.useState(false);\n\n        function loadValue(force: boolean = false) {\n            if (cache.get(name) == null || force) {\n                cache.set(name, LOADING);\n\n                // this unloads the component and waits for the promise to resolve\n                throw tryMethod(method, (r) => {\n                    if (typeof r === \"function\") {\n                        cache.set(name, (r as any)(cache.get(name)));\n                    } else {\n                        cache.set(name, r);\n                    }\n                }).catch((e) => {\n                    if (!provideFailed) {\n                        // console.error(e);\n                        // check me - this doesn't work\n                        setFailed(() => { throw e; });\n                    } else {\n                        setFailed(true);\n                    }\n                });\n            }\n        }\n\n        loadValue();\n\n        useEffect(() => {\n            // console.log(\"killed value\");\n            return () => { cache.delete(name); };\n        }, []);\n\n        // we tell the DEV that this is not the way to go\n        function failOnNoState() {\n            if (!__PRODUCTION__) {\n                throw new Error(`You must use hooks to save the value ${name}`);\n            }\n        }\n\n        return {\n            [name]: provideState ? state : val,\n            [`set${name.charAt(0).toUpperCase() + name.slice(1)}`]: provideState ? setState : failOnNoState,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}`]: loadValue,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}Failed`]: failed,\n        } as T;\n    };\n}\n","import { IHeatingDevice, IHeatingPlan, IHeatingZone, IScheduleInformation, OperationMode } from \"../../app/model\";\nimport { deviceAPI } from \"./devices\";\nimport { modeAPI, planAPI } from \"./heating\";\nimport { settingsAPI, SettingsHashMap } from \"./settings\";\nimport { HookReturnType, HookSetType, useSuspendableState } from \"./suspendableState\";\nimport { zoneAPI } from \"./zones\";\n\ntype PlansType = {\n    plans: IHeatingPlan[],\n    setPlans: HookSetType<IHeatingPlan[]>,\n    loadPlans(force?: boolean): HookReturnType,\n};\n\ntype DevicesType = {\n    devices: IHeatingDevice[],\n    setDevices: HookSetType<IHeatingDevice[]>,\n    loadDevices: HookReturnType,\n};\n\ntype ZonesType = {\n    zones: IHeatingZone[],\n    setZones: HookSetType<IHeatingZone[]>,\n    loadZones: HookReturnType,\n};\n\ntype ScheduleInformationType = {\n    scheduleInformation: IScheduleInformation,\n    setScheduleInformation: HookSetType<IScheduleInformation>,\n    loadScheduleInformation: HookReturnType,\n};\n\ntype SettingsType = {\n    settings: SettingsHashMap,\n    setSettings: HookSetType<SettingsHashMap>,\n    loadSettings: HookReturnType,\n};\n\ntype ModeType = {\n    mode: OperationMode,\n    setMode: HookSetType<OperationMode>,\n    loadMode: HookReturnType,\n};\n\nexport const usePlans = useSuspendableState<PlansType>(\"plans\", planAPI.fetchPlans);\nexport const useDevices = useSuspendableState<DevicesType>(\"devices\", deviceAPI.fetchHeatingDevices);\nexport const useZones = useSuspendableState<ZonesType>(\"zones\", zoneAPI.fetchHeatingZones);\nexport const useScheduleInformation = useSuspendableState<ScheduleInformationType>(\"scheduleInformation\", planAPI.fetchSchedule);\nexport const useSettings = useSuspendableState<SettingsType>(\"settings\", settingsAPI.fetchSettings);\nexport const useMode = useSuspendableState<ModeType>(\"mode\", modeAPI.fetchMode);\n","import { Settings } from \"../../../app/services/settings-manager/types\";\nimport callAPI from \"../callAPI\";\n\nexport type SettingsHashMap = {\n  [key in keyof typeof Settings]?: string | boolean;\n};\n\nconst fetchSettings = async (): Promise<SettingsHashMap> => {\n  return await callAPI<SettingsHashMap>(\"GET\", \"/settings\");\n};\n\nconst updateSettings = async (settings: {}): Promise<void> => {\n  return await callAPI<any>(\"PUT\", `/settings`, settings);\n};\n\nexport const settingsAPI = {\n  fetchSettings,\n  updateSettings,\n};\n","import { sortBy } from \"lodash\";\nimport { IHeatingZone } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingZone;\n} & ArrayLike<IHeatingZone>;\n\nconst fetchHeatingZones = async (): Promise<HashType> => {\n  const zones = await callAPI<any[]>(\"GET\", \"/zones\");\n\n  const result = sortBy(zones, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n\n  result.length = zones.length;\n  return result;\n};\n\nexport const zoneAPI = {\n  fetchHeatingZones,\n};\n","import TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport InputContainer from \"./InputContainer\";\n\nconst FormTextField = ({ classes, ...otherProps }: TextFieldProps) => {\n    return (\n        <InputContainer>\n            <TextField\n                fullWidth={true}\n                margin=\"normal\"\n                {...otherProps}\n            />\n        </InputContainer>\n    );\n};\n\nexport default FormTextField;\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    inputContainer: {\n        width: \"100%\",\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(3),\n    },\n});\n\ntype Props = {\n    children: React.ReactElement<any>,\n} & WithStyles<typeof styles>;\n\nconst InputContainer: React.FunctionComponent<Props> = (props) => {\n    return (<div className={props.classes.inputContainer}>{props.children}</div>);\n};\n\nexport default withStyles(styles)(InputContainer);\n","import { StyleRulesCallback, Typography, WithStyles, withStyles } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport deepOrange from \"@material-ui/core/colors/deepOrange\";\nimport blue from \"@material-ui/core/colors/lightBlue\";\nimport React from \"react\";\nimport { temperatureToColor } from \"./temperatureToColor\";\n\n// tslint:disable-next-line: no-var-requires\nconst Icon = require(\"../../../assets/icon_black.svg\");\n\nconst AVATAR_DIMENSION = 35;\nconst styles: StyleRulesCallback<any, any> = (_theme) => ({\n    root: {\n        fontSize: \"1em\",\n        float: \"left\",\n        textAlign: \"center\",\n\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n\n        width: AVATAR_DIMENSION + 10,\n        // height: AVATAR_DIMENSION,\n        // overflow: \"hidden\",\n    },\n\n    avatar: {\n        width: AVATAR_DIMENSION,\n        height: AVATAR_DIMENSION,\n        lineHeight: AVATAR_DIMENSION,\n\n        position: \"relative\",\n        overflow: \"hidden\",\n    },\n\n    img: {\n        width: AVATAR_DIMENSION,\n        height: AVATAR_DIMENSION,\n\n        zIndex: 2,\n        position: \"absolute\",\n        left: 0,\n        bottom: 0,\n    },\n\n    fill: {\n        display: \"block\",\n\n        width: AVATAR_DIMENSION,\n        height: AVATAR_DIMENSION - 2,\n\n        zIndex: 1,\n\n        position: \"absolute\",\n        left: 0,\n        bottom: 1,\n    },\n\n    // root: {\n    //     fontSize: \"1em\",\n\n    //     width: height,\n    //     height: height,\n    //     lineHeight: height,\n\n    //     zIndex: 2,\n\n    //     float: \"left\",\n    //     textAlign: \"center\",\n    //     border: \"1px solid\",\n    //     borderRadius: \"100%\",\n    //     position: \"relative\",\n\n    //     overflow: \"hidden\",\n    // },\n\n    // fill: {\n    //     display: \"block\",\n\n    //     width: height,\n    //     height: height,\n\n    //     zIndex: 1,\n    //     position: \"absolute\",\n    //     left: 0,\n    //     bottom: 0,\n    // }\n});\n\ntype FilledProps = {\n    digits?: number;\n    value: number;\n    fill: number;\n} & WithStyles<typeof styles>;\n\nfunction FixedDigits(value: number, digits: number) {\n    return (Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits)).toFixed(digits);\n}\n\nconst BaseFilledTemperatureAvatar: React.FunctionComponent<FilledProps> = (props) => {\n    const { value, classes, fill } = props;\n    let { digits } = props;\n\n    const color = (fill === 100 ? blue : deepOrange)[500];\n    if (digits == null) { digits = 2; }\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.avatar} >\n                <object className={classes.img} data={Icon} type=\"image/svg+xml\" />\n                <span style={{ height: `calc(${fill}% - 5px)`, background: color }} className={classes.fill} />\n            </div>\n\n            <Typography variant=\"body1\" color=\"textSecondary\" component=\"div\">{FixedDigits(value, digits)}°</Typography>\n        </div>\n    );\n};\n\ntype Props = {\n    value: number;\n};\n\nconst BaseTemperatureAvatar: React.FunctionComponent<Props> = (props) => {\n    const { value } = props;\n\n    return (\n        <Avatar style={{ padding: \"25px\", background: temperatureToColor(value), fontSize: \"1em\" }}>{FixedDigits(value, 1)}°</Avatar>\n    );\n};\n\nexport function normalize(min: number, max: number, x: number) {\n    return (x - min) / (max - min);\n}\n\nexport const FilledTemperatureAvatar = withStyles(styles)(BaseFilledTemperatureAvatar);\nexport const TemperatureAvatar = withStyles(styles)(BaseTemperatureAvatar);\n","import amber from \"@material-ui/core/colors/amber\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport deepOrange from \"@material-ui/core/colors/deepOrange\";\nimport green from \"@material-ui/core/colors/green\";\n\nexport function slotTemperature(val: number, min: number, max: number, a: number, b: number) {\n    //        (b-a)(x - min)\n    // f(x) = -------------- +  a\n    //        max - min\n    //\n    return Math.floor(\n        (((b - a) * (val - min)) /\n        (max - min))\n        + a,\n    );\n}\n\nexport const temperatureToColor = (n: number) => {\n    // project 16 ... 24 to 200 ... 900\n    const shade = Math.round(slotTemperature(\n        Math.min(Math.max(16, n), 24),\n        16, 24,\n        1, 8) * 100 + 100);\n\n    if (n <= 16) {\n        return blue[shade];\n    }\n\n    if (n <= 18.5) {\n        return green[shade];\n    }\n\n    if (n <= 20.5) {\n        return amber[shade];\n    }\n\n    return deepOrange[shade];\n};\n","import { FormControl, InputLabel, ListItemAvatar, MenuItem, Select } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { IGroupedCalculatedTemperature, NormalOperationMode } from \"../../app/model/heating\";\nimport { useScheduleInformation } from \"../api/hooks\";\nimport AppHeader from \"../components/AppHeader\";\nimport BodyText from \"../components/BodyText\";\nimport FormTextField from \"../components/FormTextField\";\nimport InputContainer from \"../components/InputContainer\";\nimport { AppMenuButton } from \"../components/Menu\";\nimport SubHeader from \"../components/SubHeader\";\nimport { FilledTemperatureAvatar, TemperatureAvatar } from \"../components/TemperatureAvatar\";\nimport translate from \"../i18n/Translation\";\nimport Page from \"../layouts/Page\";\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    list: {\n        marginTop: 0,\n        marginBottom: theme.spacing(2),\n    },\n});\n\ntype Props = WithStyles<typeof styles>;\n\nfunction percent(a: number, b: number) {\n    if (a > b) { return 100; }\n\n    return Math.round(a / b * 100);\n}\n\nconst TemperaturesPage: React.FunctionComponent<Props> = (props) => {\n    const { classes } = props;\n    const { scheduleInformation } = useScheduleInformation();\n\n    const toDatetimeLocal = (d: Date) => {\n        if (d == null) { return \"\"; }\n\n        const date = new Date(d);\n        const ten = (i: number) => {\n            return (i < 10 ? \"0\" : \"\") + i;\n        };\n\n        const YYYY = date.getFullYear();\n        const MM = ten(date.getMonth() + 1);\n        const DD = ten(date.getDate());\n        const HH = ten(date.getHours());\n        const II = ten(date.getMinutes());\n        const SS = ten(date.getSeconds());\n\n        return YYYY + \"-\" + MM + \"-\" + DD + \"T\" +\n            HH + \":\" + II + \":\" + SS;\n    };\n\n    function getDisplayName(schedule: IGroupedCalculatedTemperature) {\n        if (schedule.thermostatMode !== NormalOperationMode.Automatic) {\n            return translate(`ThermostatMode.${schedule.thermostatMode}`);\n        }\n\n        if (schedule.conflictingPlans.length > 1) {\n            const otherPlans = schedule.conflictingPlans\n                .filter((p) => schedule.plan.id !== p.id)\n                .map((p) => p.name).join(\", \");\n\n            return `${schedule.plan.name} (${otherPlans})`;\n        }\n\n        return schedule.plan.name;\n    }\n\n    return (\n        <Page>\n            {{\n                header: (\n                    <AppHeader>\n                    {{\n                        title: translate(\"temperatures.title\"),\n                        button: (\n                            <AppMenuButton />\n                        ),\n                    }}\n                </AppHeader>\n                ),\n                paddingTop: 50,\n                body: (\n                    <React.Fragment>\n                        <SubHeader text={translate(\"temperatures.schedule\")} />\n\n                        <InputContainer>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <InputLabel>{translate(\"temperatures.mode\")}</InputLabel>\n\n                                <Select\n                                    fullWidth={true}\n                                    disabled={true}\n                                    value={scheduleInformation.mode}\n                                >\n                                {\n                                    [0, 1, 2, 3, 4, 5].map((m) =>\n                                        (<MenuItem key={m} value={m}>{translate(`Modes.${m}`)}</MenuItem>),\n                                    )\n                                }\n                                </Select>\n                            </FormControl>\n                        </InputContainer>\n\n                        {scheduleInformation.nextDate &&\n                            <FormTextField\n                                label={translate(\"temperatures.next\")}\n                                type=\"datetime-local\"\n                                value={toDatetimeLocal(scheduleInformation.nextDate)}\n                                disabled={true}\n                            />\n                        }\n\n                        <SubHeader text={translate(\"temperatures.list.title\")} />\n                        <BodyText text={translate(\"temperatures.list.text\")} />\n\n                        {scheduleInformation.temperatures.length === 0\n                            ? <BodyText style={{paddingTop: 16}} text={translate(\"temperatures.list.empty\")} />\n                            : <List className={classes.list}>\n                                {scheduleInformation.temperatures.length > 0 && <Divider />}\n                                {scheduleInformation.temperatures.map((schedule) => (\n                                    <React.Fragment key={schedule.device.id + schedule.plan.id}>\n                                        <ListItem>\n                                            <ListItemAvatar>\n                                                <TemperatureAvatar value={schedule.targetTemperature} />\n                                            </ListItemAvatar>\n                                            <ListItemText primary={schedule.device.name} secondary={getDisplayName(schedule)} />\n                                            <ListItemSecondaryAction style={{ paddingRight: 16 }} >\n                                                <FilledTemperatureAvatar value={schedule.temperature || schedule.targetTemperature} fill={percent(schedule.temperature || schedule.targetTemperature , schedule.targetTemperature)} />\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                        <Divider />\n                                    </React.Fragment>\n                                ))}\n                            </List>\n                        }\n                    </React.Fragment>\n                ),\n            }}\n        </Page>\n    );\n};\n\nexport default withStyles(styles)(TemperaturesPage);\n"],"names":["module","exports","deviceAPI","fetchHeatingDevices","devices","result","sortBy","reduce","map","obj","idx","id","length","cache","Map","LOADING","useSuspendableState","name","method","provideState","provideFailed","val","get","state","setState","failed","setFailed","loadValue","force","set","apiMethod","setStateAction","e","tryMethod","r","catch","useEffect","delete","charAt","toUpperCase","slice","usePlans","useDevices","useZones","useScheduleInformation","useSettings","settings","useMode","settingsAPI","fetchSettings","updateSettings","zoneAPI","fetchHeatingZones","zones","classes","otherProps","fullWidth","margin","theme","inputContainer","width","paddingLeft","spacing","paddingRight","props","className","children","Icon","AVATAR_DIMENSION","styles","_theme","root","fontSize","float","textAlign","display","flexDirection","alignItems","avatar","height","lineHeight","position","overflow","img","zIndex","left","bottom","fill","FixedDigits","value","digits","Math","round","pow","toFixed","FilledTemperatureAvatar","color","data","type","style","background","variant","component","TemperatureAvatar","padding","temperatureToColor","n","shade","min","max","floor","list","marginTop","marginBottom","scheduleInformation","getDisplayName","schedule","thermostatMode","conflictingPlans","otherPlans","filter","p","plan","join","header","title","button","paddingTop","body","text","formControl","disabled","mode","m","key","nextDate","label","d","date","Date","ten","i","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","toDatetimeLocal","temperatures","device","targetTemperature","primary","secondary","temperature","a","b"],"sourceRoot":""}