{"version":3,"file":"23.js","mappings":"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","sources":["webpack:///./api/devices/index.tsx","webpack:///./api/suspendableState.tsx","webpack:///./api/hooks.tsx","webpack:///./api/settings/index.tsx","webpack:///./api/zones/index.tsx","webpack:///./pages/schedules.tsx"],"sourcesContent":["\nimport { sortBy } from \"lodash\";\nimport { IHeatingDevice } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingDevice;\n} & ArrayLike<IHeatingDevice>;\n\n// Homey.api( String method, String path, Mixed body, Function callback )\nconst fetchHeatingDevices = async (): Promise<HashType> => {\n  const devices = await callAPI<any[]>(\"GET\", \"/devices\");\n\n  const result = sortBy(devices, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n  result.length = devices.length;\n\n  return result;\n};\n\nexport const deviceAPI = {\n  fetchHeatingDevices,\n};\n","import React, { Dispatch, SetStateAction, useEffect } from \"react\";\n\nexport type MapType = {[key: string]: any};\n\nexport type HookSetType<T> = Dispatch<SetStateAction<T>>;\nexport type HookReturnType = () => void;\nexport type ProvideState<T extends MapType> = (provideState?: boolean, provideFailed?: boolean) => T;\n\ntype Async<T> = () => Promise<T>;\n\n/***\n * Call the apiMethod asynchronously.\n *\n * If the method fails, throw the exception inside set SetStateAction of the hook.\n * This allows to catch the error \"in the ErrorBoundary.\"\n */\nasync function tryMethod<T>(apiMethod: () => Promise<T>, setStateAction: Dispatch<SetStateAction<T>>): Promise<void> {\n    try {\n        setStateAction(await apiMethod());\n    } catch (e) {\n        // required for the error to popup the hierarchy\n        setStateAction(() => { throw e; });\n    }\n}\n\nconst cache = new Map<string, any>();\nconst LOADING: any = \"Loading...\";\n\n/**\n * Create a \"hook\" that is able to suspend.\n *\n * @param name Must be unique\n * @param method The async method to wait for\n */\nexport function useSuspendableState<T extends MapType>(name: string, method: Async<any>): ProvideState<T> {\n    return (provideState = false, provideFailed = false) => {\n        // this is imporant as it sets the state after the promise resolves\n        const val = cache.get(name);\n        let [state, setState] = [null, null];\n        if (provideState) {\n            // we use instance compare on LOADING to determine non existing value\n            // @ts-ignore\n            [state, setState] = React.useState<any>(val !== LOADING ? val : null);\n        }\n\n        const [failed, setFailed] = React.useState(false);\n\n        function loadValue(force: boolean = false) {\n            if (cache.get(name) == null || force) {\n                cache.set(name, LOADING);\n\n                // this unloads the component and waits for the promise to resolve\n                throw tryMethod(method, (r) => {\n                    if (typeof r === \"function\") {\n                        cache.set(name, (r as any)(cache.get(name)));\n                    } else {\n                        cache.set(name, r);\n                    }\n                }).catch((e) => {\n                    if (!provideFailed) {\n                        // console.error(e);\n                        // check me - this doesn't work\n                        setFailed(() => { throw e; });\n                    } else {\n                        setFailed(true);\n                    }\n                });\n            }\n        }\n\n        loadValue();\n\n        useEffect(() => {\n            // console.log(\"killed value\");\n            return () => { cache.delete(name); };\n        }, []);\n\n        // we tell the DEV that this is not the way to go\n        function failOnNoState() {\n            if (!__PRODUCTION__) {\n                throw new Error(`You must use hooks to save the value ${name}`);\n            }\n        }\n\n        return {\n            [name]: provideState ? state : val,\n            [`set${name.charAt(0).toUpperCase() + name.slice(1)}`]: provideState ? setState : failOnNoState,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}`]: loadValue,\n            [`load${name.charAt(0).toUpperCase() + name.slice(1)}Failed`]: failed,\n        } as T;\n    };\n}\n","import { IHeatingDevice, IHeatingPlan, IHeatingZone, IScheduleInformation, OperationMode } from \"../../app/model\";\nimport { deviceAPI } from \"./devices\";\nimport { modeAPI, planAPI } from \"./heating\";\nimport { settingsAPI, SettingsHashMap } from \"./settings\";\nimport { HookReturnType, HookSetType, useSuspendableState } from \"./suspendableState\";\nimport { zoneAPI } from \"./zones\";\n\ntype PlansType = {\n    plans: IHeatingPlan[],\n    setPlans: HookSetType<IHeatingPlan[]>,\n    loadPlans(force?: boolean): HookReturnType,\n};\n\ntype DevicesType = {\n    devices: IHeatingDevice[],\n    setDevices: HookSetType<IHeatingDevice[]>,\n    loadDevices: HookReturnType,\n};\n\ntype ZonesType = {\n    zones: IHeatingZone[],\n    setZones: HookSetType<IHeatingZone[]>,\n    loadZones: HookReturnType,\n};\n\ntype ScheduleInformationType = {\n    scheduleInformation: IScheduleInformation,\n    setScheduleInformation: HookSetType<IScheduleInformation>,\n    loadScheduleInformation: HookReturnType,\n};\n\ntype SettingsType = {\n    settings: SettingsHashMap,\n    setSettings: HookSetType<SettingsHashMap>,\n    loadSettings: HookReturnType,\n};\n\ntype ModeType = {\n    mode: OperationMode,\n    setMode: HookSetType<OperationMode>,\n    loadMode: HookReturnType,\n};\n\nexport const usePlans = useSuspendableState<PlansType>(\"plans\", planAPI.fetchPlans);\nexport const useDevices = useSuspendableState<DevicesType>(\"devices\", deviceAPI.fetchHeatingDevices);\nexport const useZones = useSuspendableState<ZonesType>(\"zones\", zoneAPI.fetchHeatingZones);\nexport const useScheduleInformation = useSuspendableState<ScheduleInformationType>(\"scheduleInformation\", planAPI.fetchSchedule);\nexport const useSettings = useSuspendableState<SettingsType>(\"settings\", settingsAPI.fetchSettings);\nexport const useMode = useSuspendableState<ModeType>(\"mode\", modeAPI.fetchMode);\n","import { Settings } from \"../../../app/services/settings-manager/types\";\nimport callAPI from \"../callAPI\";\n\nexport type SettingsHashMap = {\n  [key in keyof typeof Settings]?: string | boolean;\n};\n\nconst fetchSettings = async (): Promise<SettingsHashMap> => {\n  return await callAPI<SettingsHashMap>(\"GET\", \"/settings\");\n};\n\nconst updateSettings = async (settings: {}): Promise<void> => {\n  return await callAPI<any>(\"PUT\", `/settings`, settings);\n};\n\nexport const settingsAPI = {\n  fetchSettings,\n  updateSettings,\n};\n","import { sortBy } from \"lodash\";\nimport { IHeatingZone } from \"../../../app/model\";\nimport callAPI from \"../callAPI\";\n\nexport type HashType = {\n  [key: string]: IHeatingZone;\n} & ArrayLike<IHeatingZone>;\n\nconst fetchHeatingZones = async (): Promise<HashType> => {\n  const zones = await callAPI<any[]>(\"GET\", \"/zones\");\n\n  const result = sortBy(zones, \"name\").reduce((map, obj, idx) => {\n    map[idx] = obj;\n    map[obj.id] = obj;\n    return map;\n  }, {});\n\n  result.length = zones.length;\n  return result;\n};\n\nexport const zoneAPI = {\n  fetchHeatingZones,\n};\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport { withSnackbar, WithSnackbarProps } from \"notistack\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\nimport { usePlans } from \"../api/hooks\";\nimport AppHeader from \"../components/AppHeader\";\nimport BodyText from \"../components/BodyText\";\nimport { AppMenuButton } from \"../components/Menu\";\nimport SubHeader from \"../components/SubHeader\";\nimport translate from \"../i18n/Translation\";\nimport Page from \"../layouts/Page\";\nconst Chart = React.lazy(() => import(\"../components/TemperatureChart\"));\n\nconst styles: StyleRulesCallback<any, any> = (theme) => ({\n    list: {\n        marginTop: 0,\n        marginBottom: theme.spacing(2),\n    },\n});\n\ntype Props = WithStyles<typeof styles> & RouteComponentProps & WithSnackbarProps;\n\nconst SchedulesPage: React.FunctionComponent<Props> = (_props) => {\n    const { plans } = usePlans();\n\n    return (\n        <Page>\n            {{\n                header: (<AppHeader title={translate(\"menu.schedules\")} button={<AppMenuButton />} />),\n                paddingTop: 50,\n                paddingBottom: 50,\n\n                body: (\n                    <React.Fragment>\n                        {plans.length === 0\n                            ? <BodyText style={{ paddingTop: 16 }} text={translate(\"plans.plans.empty\")} />\n                            : plans.map((plan) => (\n                                <React.Fragment key={plan.id}>\n                                    <SubHeader text={plan.name} />\n                                    <Chart plan={plan} />\n                                </React.Fragment>\n                            ))\n                        }\n                    </React.Fragment>\n                ),\n            }}\n        </Page>\n    );\n};\n\n// @ts-ignore\nexport default withSnackbar(withRouter(withStyles(styles)(SchedulesPage)));\n"],"names":["deviceAPI","fetchHeatingDevices","devices","result","sortBy","reduce","map","obj","idx","id","length","cache","Map","LOADING","useSuspendableState","name","method","provideState","provideFailed","val","get","state","setState","failed","setFailed","loadValue","force","set","apiMethod","setStateAction","e","tryMethod","r","catch","useEffect","delete","charAt","toUpperCase","slice","usePlans","useDevices","useZones","useScheduleInformation","useSettings","settings","useMode","settingsAPI","fetchSettings","updateSettings","zoneAPI","fetchHeatingZones","zones","Chart","theme","list","marginTop","marginBottom","spacing","_props","plans","header","title","button","paddingTop","paddingBottom","body","style","text","plan","key"],"sourceRoot":""}