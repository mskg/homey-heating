/*! For license information please see pages_temperatures_tsx.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([["pages_temperatures_tsx"],{"../../assets/icon_black.svg":(e,t,a)=>{e.exports=a.p+"icon_black.svg?5136879a03a13f9fb18f241b081f38cb"},"./api/devices/index.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{deviceAPI:()=>o});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/lodash/lodash.js"),n=a("./api/callAPI.tsx");const o={fetchHeatingDevices:()=>(0,s.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,n.default)("GET","/devices"),t=(0,l.sortBy)(e,"name").reduce(((e,t,a)=>(e[a]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./api/hooks.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{useDevices:()=>u,useMode:()=>p,usePlans:()=>i,useScheduleInformation:()=>c,useSettings:()=>m,useZones:()=>d});var s=a("./api/devices/index.tsx"),l=a("./api/heating/index.tsx"),n=a("./api/settings/index.tsx"),o=a("./api/suspendableState.tsx"),r=a("./api/zones/index.tsx");const i=(0,o.useSuspendableState)("plans",l.planAPI.fetchPlans),u=(0,o.useSuspendableState)("devices",s.deviceAPI.fetchHeatingDevices),d=(0,o.useSuspendableState)("zones",r.zoneAPI.fetchHeatingZones),c=(0,o.useSuspendableState)("scheduleInformation",l.planAPI.fetchSchedule),m=(0,o.useSuspendableState)("settings",n.settingsAPI.fetchSettings),p=(0,o.useSuspendableState)("mode",l.modeAPI.fetchMode)},"./api/settings/index.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{settingsAPI:()=>n});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("./api/callAPI.tsx");const n={fetchSettings:()=>(0,s.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,l.default)("GET","/settings")})),updateSettings:e=>(0,s.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,l.default)("PUT","/settings",e)}))}},"./api/suspendableState.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{useSuspendableState:()=>r});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/react/index.js");const n=new Map,o="Loading...";function r(e,t){return(a=!1,r=!1)=>{const i=n.get(e);let[u,d]=[null,null];a&&([u,d]=l.useState(i!==o?i:null));const[c,m]=l.useState(!1);function p(a=!1){if(null==n.get(e)||a)throw n.set(e,o),function(e,t){return(0,s.__awaiter)(this,void 0,void 0,(function*(){try{t(yield e())}catch(e){t((()=>{throw e}))}}))}(t,(t=>{"function"==typeof t?n.set(e,t(n.get(e))):n.set(e,t)})).catch((e=>{m(!!r||(()=>{throw e}))}))}return p(),(0,l.useEffect)((()=>()=>{n.delete(e)}),[]),{[e]:a?u:i,[`set${e.charAt(0).toUpperCase()+e.slice(1)}`]:a?d:function(){throw new Error(`You must use hooks to save the value ${e}`)},[`load${e.charAt(0).toUpperCase()+e.slice(1)}`]:p,[`load${e.charAt(0).toUpperCase()+e.slice(1)}Failed`]:c}}}},"./api/zones/index.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{zoneAPI:()=>o});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/lodash/lodash.js"),n=a("./api/callAPI.tsx");const o={fetchHeatingZones:()=>(0,s.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,n.default)("GET","/zones"),t=(0,l.sortBy)(e,"name").reduce(((e,t,a)=>(e[a]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./components/FormTextField.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});var s=a("../../node_modules/tslib/tslib.es6.js"),l=a("../../node_modules/@material-ui/core/esm/TextField/TextField.js"),n=a("../../node_modules/react/index.js"),o=a("./components/InputContainer.tsx");const r=e=>{var{classes:t}=e,a=(0,s.__rest)(e,["classes"]);return n.createElement(o.default,null,n.createElement(l.default,Object.assign({fullWidth:!0,margin:"normal"},a)))}},"./components/InputContainer.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});var s=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),l=a("../../node_modules/react/index.js");const n=(0,s.default)((e=>({inputContainer:{width:"100%",paddingLeft:e.spacing(2),paddingRight:e.spacing(3)}})))((e=>l.createElement("div",{className:e.classes.inputContainer},e.children)))},"./components/TemperatureAvatar.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FilledTemperatureAvatar:()=>h,TemperatureAvatar:()=>g,normalize:()=>f});var s=a("../../node_modules/@material-ui/core/esm/Typography/Typography.js"),l=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),n=a("../../node_modules/@material-ui/core/esm/Avatar/Avatar.js"),o=a("../../node_modules/@material-ui/core/colors/deepOrange.js"),r=a("../../node_modules/@material-ui/core/colors/lightBlue.js"),i=a("../../node_modules/react/index.js"),u=a("./components/temperatureToColor.tsx");const d=a("../../assets/icon_black.svg"),c=35,m=e=>({root:{fontSize:"1em",float:"left",textAlign:"center",display:"flex",flexDirection:"column",alignItems:"center",width:45},avatar:{width:c,height:c,lineHeight:c,position:"relative",overflow:"hidden"},img:{width:c,height:c,zIndex:2,position:"absolute",left:0,bottom:0},fill:{display:"block",width:c,height:33,zIndex:1,position:"absolute",left:0,bottom:1}});function p(e,t){return(Math.round(e*Math.pow(10,t))/Math.pow(10,t)).toFixed(t)}function f(e,t,a){return(a-e)/(t-e)}const h=(0,l.default)(m)((e=>{const{value:t,classes:a,fill:l}=e;let{digits:n}=e;const u=(100===l?r.default:o.default)[500];return null==n&&(n=2),i.createElement("div",{className:a.root},i.createElement("div",{className:a.avatar},i.createElement("object",{className:a.img,data:d,type:"image/svg+xml"}),i.createElement("span",{style:{height:`calc(${l}% - 5px)`,background:u},className:a.fill})),i.createElement(s.default,{variant:"body1",color:"textSecondary",component:"div"},p(t,n),"Â°"))})),g=(0,l.default)(m)((e=>{const{value:t}=e;return i.createElement(n.default,{style:{padding:"25px",background:(0,u.temperatureToColor)(t),fontSize:"1em"}},p(t,1),"Â°")}))},"./components/temperatureToColor.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{slotTemperature:()=>r,temperatureToColor:()=>i});var s=a("../../node_modules/@material-ui/core/colors/amber.js"),l=a("../../node_modules/@material-ui/core/colors/blue.js"),n=a("../../node_modules/@material-ui/core/colors/deepOrange.js"),o=a("../../node_modules/@material-ui/core/colors/green.js");function r(e,t,a,s,l){return Math.floor((l-s)*(e-t)/(a-t)+s)}const i=e=>{const t=Math.round(100*r(Math.min(Math.max(16,e),24),16,24,1,8)+100);return e<=16?l.default[t]:e<=18.5?o.default[t]:e<=20.5?s.default[t]:n.default[t]}},"./pages/temperatures.tsx":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>T});var s=a("../../node_modules/@material-ui/core/esm/FormControl/FormControl.js"),l=a("../../node_modules/@material-ui/core/esm/InputLabel/InputLabel.js"),n=a("../../node_modules/@material-ui/core/esm/Select/Select.js"),o=a("../../node_modules/@material-ui/core/esm/MenuItem/MenuItem.js"),r=a("../../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js"),i=a("../../node_modules/@material-ui/core/esm/Divider/Divider.js"),u=a("../../node_modules/@material-ui/core/esm/List/List.js"),d=a("../../node_modules/@material-ui/core/esm/ListItem/ListItem.js"),c=a("../../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js"),m=a("../../node_modules/@material-ui/core/esm/ListItemText/ListItemText.js"),p=a("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),f=a("../../node_modules/react/index.js"),h=a("../app/model/heating.ts"),g=a("./api/hooks.tsx"),v=a("./components/AppHeader.tsx"),x=a("./components/BodyText.tsx"),_=a("./components/FormTextField.tsx"),b=a("./components/InputContainer.tsx"),y=a("./components/Menu.tsx"),E=a("./components/SubHeader.tsx"),j=a("./components/TemperatureAvatar.tsx"),S=a("./i18n/Translation.tsx"),I=a("./layouts/Page.tsx");const T=(0,p.default)((e=>({list:{marginTop:0,marginBottom:e.spacing(2)}})))((e=>{const{classes:t}=e,{scheduleInformation:a}=(0,g.useScheduleInformation)();function p(e){if(e.thermostatMode!==h.NormalOperationMode.Automatic)return(0,S.default)(`ThermostatMode.${e.thermostatMode}`);if(e.conflictingPlans.length>1){const t=e.conflictingPlans.filter((t=>e.plan.id!==t.id)).map((e=>e.name)).join(", ");return`${e.plan.name} (${t})`}return e.plan.name}return f.createElement(I.default,null,{header:f.createElement(v.default,null,{title:(0,S.default)("temperatures.title"),button:f.createElement(y.AppMenuButton,null)}),paddingTop:50,body:f.createElement(f.Fragment,null,f.createElement(E.default,{text:(0,S.default)("temperatures.schedule")}),f.createElement(b.default,null,f.createElement(s.default,{className:t.formControl,fullWidth:!0},f.createElement(l.default,null,(0,S.default)("temperatures.mode")),f.createElement(n.default,{fullWidth:!0,disabled:!0,value:a.mode},[0,1,2,3,4,5].map((e=>f.createElement(o.default,{key:e,value:e},(0,S.default)(`Modes.${e}`))))))),a.nextDate&&f.createElement(_.default,{label:(0,S.default)("temperatures.next"),type:"datetime-local",value:(e=>{if(null==e)return"";const t=new Date(e),a=e=>(e<10?"0":"")+e;return t.getFullYear()+"-"+a(t.getMonth()+1)+"-"+a(t.getDate())+"T"+a(t.getHours())+":"+a(t.getMinutes())+":"+a(t.getSeconds())})(a.nextDate),disabled:!0}),f.createElement(E.default,{text:(0,S.default)("temperatures.list.title")}),f.createElement(x.default,{text:(0,S.default)("temperatures.list.text")}),0===a.temperatures.length?f.createElement(x.default,{style:{paddingTop:16},text:(0,S.default)("temperatures.list.empty")}):f.createElement(u.default,{className:t.list},a.temperatures.length>0&&f.createElement(i.default,null),a.temperatures.map((e=>{return f.createElement(f.Fragment,{key:e.device.id+e.plan.id},f.createElement(d.default,null,f.createElement(r.default,null,f.createElement(j.TemperatureAvatar,{value:e.targetTemperature})),f.createElement(m.default,{primary:e.device.name,secondary:p(e)}),f.createElement(c.default,{style:{paddingRight:16}},f.createElement(j.FilledTemperatureAvatar,{value:e.temperature||e.targetTemperature,fill:(t=e.temperature||e.targetTemperature,a=e.targetTemperature,t>a?100:Math.round(t/a*100))}))),f.createElement(i.default,null));var t,a}))))})}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,