/*! For license information please see pages_settings_tsx.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["pages_settings_tsx"],{"../../node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js":(e,t,l)=>{l.r(t),l.d(t,{default:()=>b,styles:()=>g});var n=l("../../node_modules/@babel/runtime/helpers/esm/extends.js"),a=l("../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=l("../../node_modules/react/index.js"),o=l("../../node_modules/prop-types/index.js"),d=l.n(o),i=l("../../node_modules/clsx/dist/clsx.m.js"),r=l("../../node_modules/@material-ui/utils/esm/refType.js"),c=l("../../node_modules/@material-ui/core/esm/FormControl/useFormControl.js"),u=l("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),m=l("../../node_modules/@material-ui/core/esm/Typography/Typography.js"),f=l("../../node_modules/@material-ui/core/esm/utils/capitalize.js"),g=function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}},p=s.forwardRef((function(e,t){e.checked;var l=e.classes,o=e.className,d=e.control,r=e.disabled,u=(e.inputRef,e.label),g=e.labelPlacement,p=void 0===g?"end":g,b=(e.name,e.onChange,e.value,(0,a.default)(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),h=(0,c.default)(),x=r;void 0===x&&void 0!==d.props.disabled&&(x=d.props.disabled),void 0===x&&h&&(x=h.disabled);var v={disabled:x};return["checked","name","onChange","value","inputRef"].forEach((function(t){void 0===d.props[t]&&void 0!==e[t]&&(v[t]=e[t])})),s.createElement("label",(0,n.default)({className:(0,i.default)(l.root,o,"end"!==p&&l["labelPlacement".concat((0,f.default)(p))],x&&l.disabled),ref:t},b),s.cloneElement(d,v),s.createElement(m.default,{component:"span",className:(0,i.default)(l.label,x&&l.disabled)},u))}));p.propTypes={checked:d().bool,classes:d().object,className:d().string,control:d().element.isRequired,disabled:d().bool,inputRef:r.default,label:d().node,labelPlacement:d().oneOf(["bottom","end","start","top"]),name:d().string,onChange:d().func,value:d().any};const b=(0,u.default)(g,{name:"MuiFormControlLabel"})(p)},"./api/devices/index.tsx":(e,t,l)=>{l.r(t),l.d(t,{deviceAPI:()=>o});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("../../node_modules/lodash/lodash.js"),s=l("./api/callAPI.tsx");const o={fetchHeatingDevices:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,s.default)("GET","/devices"),t=(0,a.sortBy)(e,"name").reduce(((e,t,l)=>(e[l]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./api/hooks.tsx":(e,t,l)=>{l.r(t),l.d(t,{useDevices:()=>r,useMode:()=>f,usePlans:()=>i,useScheduleInformation:()=>u,useSettings:()=>m,useZones:()=>c});var n=l("./api/devices/index.tsx"),a=l("./api/heating/index.tsx"),s=l("./api/settings/index.tsx"),o=l("./api/suspendableState.tsx"),d=l("./api/zones/index.tsx");const i=(0,o.useSuspendableState)("plans",a.planAPI.fetchPlans),r=(0,o.useSuspendableState)("devices",n.deviceAPI.fetchHeatingDevices),c=(0,o.useSuspendableState)("zones",d.zoneAPI.fetchHeatingZones),u=(0,o.useSuspendableState)("scheduleInformation",a.planAPI.fetchSchedule),m=(0,o.useSuspendableState)("settings",s.settingsAPI.fetchSettings),f=(0,o.useSuspendableState)("mode",a.modeAPI.fetchMode)},"./api/settings/index.tsx":(e,t,l)=>{l.r(t),l.d(t,{settingsAPI:()=>s});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("./api/callAPI.tsx");const s={fetchSettings:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,a.default)("GET","/settings")})),updateSettings:e=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,a.default)("PUT","/settings",e)}))}},"./api/suspendableState.tsx":(e,t,l)=>{l.r(t),l.d(t,{useSuspendableState:()=>d});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("../../node_modules/react/index.js");const s=new Map,o="Loading...";function d(e,t){return(l=!1,d=!1)=>{const i=s.get(e);let[r,c]=[null,null];l&&([r,c]=a.useState(i!==o?i:null));const[u,m]=a.useState(!1);function f(l=!1){if(null==s.get(e)||l)throw s.set(e,o),function(e,t){return(0,n.__awaiter)(this,void 0,void 0,(function*(){try{t(yield e())}catch(e){t((()=>{throw e}))}}))}(t,(t=>{"function"==typeof t?s.set(e,t(s.get(e))):s.set(e,t)})).catch((e=>{m(!!d||(()=>{throw e}))}))}return f(),(0,a.useEffect)((()=>()=>{s.delete(e)}),[]),{[e]:l?r:i,[`set${e.charAt(0).toUpperCase()+e.slice(1)}`]:l?c:function(){throw new Error(`You must use hooks to save the value ${e}`)},[`load${e.charAt(0).toUpperCase()+e.slice(1)}`]:f,[`load${e.charAt(0).toUpperCase()+e.slice(1)}Failed`]:u}}}},"./api/zones/index.tsx":(e,t,l)=>{l.r(t),l.d(t,{zoneAPI:()=>o});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("../../node_modules/lodash/lodash.js"),s=l("./api/callAPI.tsx");const o={fetchHeatingZones:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,s.default)("GET","/zones"),t=(0,a.sortBy)(e,"name").reduce(((e,t,l)=>(e[l]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./components/FormTextField.tsx":(e,t,l)=>{l.r(t),l.d(t,{default:()=>d});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("../../node_modules/@material-ui/core/esm/TextField/TextField.js"),s=l("../../node_modules/react/index.js"),o=l("./components/InputContainer.tsx");const d=e=>{var{classes:t}=e,l=(0,n.__rest)(e,["classes"]);return s.createElement(o.default,null,s.createElement(a.default,Object.assign({fullWidth:!0,margin:"normal"},l)))}},"./components/InputContainer.tsx":(e,t,l)=>{l.r(t),l.d(t,{default:()=>s});var n=l("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),a=l("../../node_modules/react/index.js");const s=(0,n.default)((e=>({inputContainer:{width:"100%",paddingLeft:e.spacing(2),paddingRight:e.spacing(3)}})))((e=>a.createElement("div",{className:e.classes.inputContainer},e.children)))},"./pages/settings.tsx":(e,t,l)=>{l.r(t),l.d(t,{default:()=>S});var n=l("../../node_modules/tslib/tslib.es6.js"),a=l("../../node_modules/@material-ui/core/esm/Button/Button.js"),s=l("../../node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js"),o=l("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),d=l("../../node_modules/@material-ui/core/esm/Switch/Switch.js"),i=l("../../node_modules/@material-ui/icons/Cancel.js"),r=l("../../node_modules/notistack/dist/notistack.esm.js"),c=l("../../node_modules/react/index.js"),u=l("../../node_modules/react-router/esm/react-router.js"),m=l("./api/hooks.tsx"),f=l("./api/settings/index.tsx"),g=l("./components/AppHeader.tsx"),p=l("./components/BodyText.tsx"),b=l("./components/FormTextField.tsx"),h=l("./components/InputContainer.tsx"),x=l("./components/Menu.tsx"),v=l("./components/SubHeader.tsx"),E=l("./i18n/Translation.tsx"),y=l("./layouts/Page.tsx");const S=(0,r.withSnackbar)((0,u.withRouter)((0,o.default)((e=>({})))((e=>{const{settings:t,setSettings:l,loadSettings:o}=(0,m.useSettings)(!0),[r,u]=c.useState(!1);function S(e,l=null){const n=t[e];return null==n?l:n}const _=(e,t="value")=>n=>{const a=n.target[t];l((t=>Object.assign(Object.assign({},t),{[e]:a}))),u(!0)};return c.createElement(y.default,null,{header:c.createElement(g.default,null,{title:(0,E.default)("settings.title"),button:c.createElement(c.Fragment,null,!r&&c.createElement(x.AppMenuButton,null),r&&c.createElement(x.MenuButton,{first:!0,onClick:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){yield o(),u(!1)})),icon:c.createElement(i.default,null)})),actions:c.createElement(c.Fragment,null,r&&c.createElement(a.default,{color:"inherit",onClick:()=>{f.settingsAPI.updateSettings(t).then((t=>{e.enqueueSnackbar((0,E.default)("settings.saved")),u(!1)}))}},"save"))}),paddingTop:50,paddingBottom:50,body:c.createElement(c.Fragment,null,c.createElement(v.default,{text:(0,E.default)("settings.notifications.category")}),c.createElement(p.default,{text:(0,E.default)("settings.notifications.text")}),c.createElement(h.default,null,c.createElement(s.default,{control:c.createElement(d.default,{checked:!0===S("NotifyModeChange",!0),onChange:_("NotifyModeChange","checked")}),label:(0,E.default)("settings.notifications.NotifyModeChange"),labelPlacement:"end"})),c.createElement(h.default,null,c.createElement(s.default,{control:c.createElement(d.default,{checked:!0===S("NotifySetError",!0),onChange:_("NotifySetError","checked")}),label:(0,E.default)("settings.notifications.NotifySetError"),labelPlacement:"end"})),c.createElement(h.default,null,c.createElement(s.default,{control:c.createElement(d.default,{checked:!0===S("NotifySetSuccess",!0),onChange:_("NotifySetSuccess","checked")}),label:(0,E.default)("settings.notifications.NotifySetSuccess"),labelPlacement:"end"})),c.createElement(v.default,{text:(0,E.default)("settings.sentry.category")}),c.createElement(p.default,{text:(0,E.default)("settings.sentry.text")}),c.createElement(h.default,null,c.createElement(s.default,{control:c.createElement(d.default,{checked:!0===S("SentryEnabled",!0),onChange:_("SentryEnabled","checked")}),label:(0,E.default)("settings.enabled.label"),labelPlacement:"end"})),c.createElement(v.default,{text:(0,E.default)("settings.log.category")}),c.createElement(p.default,{text:(0,E.default)("settings.log.text")}),c.createElement(h.default,null,c.createElement(s.default,{control:c.createElement(d.default,{checked:!0===S("ConsoleReLogEnabled"),onChange:_("ConsoleReLogEnabled","checked")}),label:(0,E.default)("settings.enabled.label"),labelPlacement:"end"})),c.createElement(b.default,{label:(0,E.default)("settings.category.label"),placeholder:(0,E.default)("settings.category.placeholder"),required:!0===S("ConsoleReLogEnabled"),value:S("ConsoleReLogCategory",""),onChange:_("ConsoleReLogCategory")}),c.createElement(v.default,{text:(0,E.default)("settings.backup.title")}),c.createElement(p.default,{text:(0,E.default)("settings.backup.text")}),c.createElement(b.default,{label:(0,E.default)("settings.backup.label"),placeholder:(0,E.default)("settings.backup.placeholder"),multiline:!0,rowsMax:"10",value:S("Plans",""),onChange:_("Plans")}))})}))))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,