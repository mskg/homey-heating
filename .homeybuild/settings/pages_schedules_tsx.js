/*! For license information please see pages_schedules_tsx.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["pages_schedules_tsx"],{"./api/devices/index.tsx":(e,t,s)=>{s.r(t),s.d(t,{deviceAPI:()=>i});var n=s("../../node_modules/tslib/tslib.es6.js"),a=s("../../node_modules/lodash/lodash.js"),o=s("./api/callAPI.tsx");const i={fetchHeatingDevices:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,o.default)("GET","/devices"),t=(0,a.sortBy)(e,"name").reduce(((e,t,s)=>(e[s]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./api/hooks.tsx":(e,t,s)=>{s.r(t),s.d(t,{useDevices:()=>u,useMode:()=>m,usePlans:()=>l,useScheduleInformation:()=>c,useSettings:()=>p,useZones:()=>r});var n=s("./api/devices/index.tsx"),a=s("./api/heating/index.tsx"),o=s("./api/settings/index.tsx"),i=s("./api/suspendableState.tsx"),d=s("./api/zones/index.tsx");const l=(0,i.useSuspendableState)("plans",a.planAPI.fetchPlans),u=(0,i.useSuspendableState)("devices",n.deviceAPI.fetchHeatingDevices),r=(0,i.useSuspendableState)("zones",d.zoneAPI.fetchHeatingZones),c=(0,i.useSuspendableState)("scheduleInformation",a.planAPI.fetchSchedule),p=(0,i.useSuspendableState)("settings",o.settingsAPI.fetchSettings),m=(0,i.useSuspendableState)("mode",a.modeAPI.fetchMode)},"./api/settings/index.tsx":(e,t,s)=>{s.r(t),s.d(t,{settingsAPI:()=>o});var n=s("../../node_modules/tslib/tslib.es6.js"),a=s("./api/callAPI.tsx");const o={fetchSettings:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,a.default)("GET","/settings")})),updateSettings:e=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){return yield(0,a.default)("PUT","/settings",e)}))}},"./api/suspendableState.tsx":(e,t,s)=>{s.r(t),s.d(t,{useSuspendableState:()=>d});var n=s("../../node_modules/tslib/tslib.es6.js"),a=s("../../node_modules/react/index.js");const o=new Map,i="Loading...";function d(e,t){return(s=!1,d=!1)=>{const l=o.get(e);let[u,r]=[null,null];s&&([u,r]=a.useState(l!==i?l:null));const[c,p]=a.useState(!1);function m(s=!1){if(null==o.get(e)||s)throw o.set(e,i),function(e,t){return(0,n.__awaiter)(this,void 0,void 0,(function*(){try{t(yield e())}catch(e){t((()=>{throw e}))}}))}(t,(t=>{"function"==typeof t?o.set(e,t(o.get(e))):o.set(e,t)})).catch((e=>{p(!!d||(()=>{throw e}))}))}return m(),(0,a.useEffect)((()=>()=>{o.delete(e)}),[]),{[e]:s?u:l,[`set${e.charAt(0).toUpperCase()+e.slice(1)}`]:s?r:function(){throw new Error(`You must use hooks to save the value ${e}`)},[`load${e.charAt(0).toUpperCase()+e.slice(1)}`]:m,[`load${e.charAt(0).toUpperCase()+e.slice(1)}Failed`]:c}}}},"./api/zones/index.tsx":(e,t,s)=>{s.r(t),s.d(t,{zoneAPI:()=>i});var n=s("../../node_modules/tslib/tslib.es6.js"),a=s("../../node_modules/lodash/lodash.js"),o=s("./api/callAPI.tsx");const i={fetchHeatingZones:()=>(0,n.__awaiter)(void 0,void 0,void 0,(function*(){const e=yield(0,o.default)("GET","/zones"),t=(0,a.sortBy)(e,"name").reduce(((e,t,s)=>(e[s]=t,e[t.id]=t,e)),{});return t.length=e.length,t}))}},"./pages/schedules.tsx":(e,t,s)=>{s.r(t),s.d(t,{default:()=>f});var n=s("../../node_modules/@material-ui/core/esm/styles/withStyles.js"),a=s("../../node_modules/notistack/dist/notistack.esm.js"),o=s("../../node_modules/react/index.js"),i=s("../../node_modules/react-router/esm/react-router.js"),d=s("./api/hooks.tsx"),l=s("./components/AppHeader.tsx"),u=s("./components/BodyText.tsx"),r=s("./components/Menu.tsx"),c=s("./components/SubHeader.tsx"),p=s("./i18n/Translation.tsx"),m=s("./layouts/Page.tsx");const h=o.lazy((()=>Promise.all([s.e("vendors-node_modules_material-ui_core_colors_amber_js-node_modules_material-ui_core_colors_gr-05f7ff"),s.e("components_TemperatureChart_index_tsx")]).then(s.bind(s,"./components/TemperatureChart/index.tsx")))),f=(0,a.withSnackbar)((0,i.withRouter)((0,n.default)((e=>({list:{marginTop:0,marginBottom:e.spacing(2)}})))((e=>{const{plans:t}=(0,d.usePlans)();return o.createElement(m.default,null,{header:o.createElement(l.default,{title:(0,p.default)("menu.schedules"),button:o.createElement(r.AppMenuButton,null)}),paddingTop:50,paddingBottom:50,body:o.createElement(o.Fragment,null,0===t.length?o.createElement(u.default,{style:{paddingTop:16},text:(0,p.default)("plans.plans.empty")}):t.map((e=>o.createElement(o.Fragment,{key:e.id},o.createElement(c.default,{text:e.name}),o.createElement(h,{plan:e})))))})}))))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UEEsTUFBTW9ELEVBQVEsUUFBVyxJQUFNLG9PQXdDL0IsR0FBZSxJQUFBQyxlQUFhLElBQUFDLGFBQVcsY0F0Q09DLElBQVUsQ0FDcERDLEtBQU0sQ0FDRkMsVUFBVyxFQUNYQyxhQUFjSCxFQUFNSSxRQUFRLE9BbUNHLEVBN0JnQkMsSUFDbkQsTUFBTSxNQUFFQyxJQUFVLElBQUFyRCxZQUVsQixPQUNJLGdCQUFDLFVBQUksS0FDQSxDQUNHc0QsT0FBUyxnQkFBQyxVQUFTLENBQUNDLE9BQU8sYUFBVSxrQkFBbUJDLE9BQVEsZ0JBQUMsRUFBQUMsY0FBYSxRQUM5RUMsV0FBWSxHQUNaQyxjQUFlLEdBRWZDLEtBQ0ksZ0JBQUMsV0FBYyxLQUNPLElBQWpCUCxFQUFNdEQsT0FDRCxnQkFBQyxVQUFRLENBQUM4RCxNQUFPLENBQUVILFdBQVksSUFBTUksTUFBTSxhQUFVLHVCQUNyRFQsRUFBTTFELEtBQUtvRSxHQUNULGdCQUFDLFdBQWMsQ0FBQ0MsSUFBS0QsRUFBS2pFLElBQ3RCLGdCQUFDLFVBQVMsQ0FBQ2dFLEtBQU1DLEVBQUs5QyxPQUN0QixnQkFBQzJCLEVBQUssQ0FBQ21CLEtBQU1BLFNBUTVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBpL2RldmljZXMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL2FwaS9ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vYXBpL3NldHRpbmdzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9hcGkvc3VzcGVuZGFibGVTdGF0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vYXBpL3pvbmVzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWdlcy9zY2hlZHVsZXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgc29ydEJ5IH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgSUhlYXRpbmdEZXZpY2UgfSBmcm9tIFwiLi4vLi4vLi4vYXBwL21vZGVsXCI7XG5pbXBvcnQgY2FsbEFQSSBmcm9tIFwiLi4vY2FsbEFQSVwiO1xuXG5leHBvcnQgdHlwZSBIYXNoVHlwZSA9IHtcbiAgW2tleTogc3RyaW5nXTogSUhlYXRpbmdEZXZpY2U7XG59ICYgQXJyYXlMaWtlPElIZWF0aW5nRGV2aWNlPjtcblxuLy8gSG9tZXkuYXBpKCBTdHJpbmcgbWV0aG9kLCBTdHJpbmcgcGF0aCwgTWl4ZWQgYm9keSwgRnVuY3Rpb24gY2FsbGJhY2sgKVxuY29uc3QgZmV0Y2hIZWF0aW5nRGV2aWNlcyA9IGFzeW5jICgpOiBQcm9taXNlPEhhc2hUeXBlPiA9PiB7XG4gIGNvbnN0IGRldmljZXMgPSBhd2FpdCBjYWxsQVBJPGFueVtdPihcIkdFVFwiLCBcIi9kZXZpY2VzXCIpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IHNvcnRCeShkZXZpY2VzLCBcIm5hbWVcIikucmVkdWNlKChtYXAsIG9iaiwgaWR4KSA9PiB7XG4gICAgbWFwW2lkeF0gPSBvYmo7XG4gICAgbWFwW29iai5pZF0gPSBvYmo7XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwge30pO1xuICByZXN1bHQubGVuZ3RoID0gZGV2aWNlcy5sZW5ndGg7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZXZpY2VBUEkgPSB7XG4gIGZldGNoSGVhdGluZ0RldmljZXMsXG59O1xuIiwiaW1wb3J0IHsgSUhlYXRpbmdEZXZpY2UsIElIZWF0aW5nUGxhbiwgSUhlYXRpbmdab25lLCBJU2NoZWR1bGVJbmZvcm1hdGlvbiwgT3BlcmF0aW9uTW9kZSB9IGZyb20gXCIuLi8uLi9hcHAvbW9kZWxcIjtcbmltcG9ydCB7IGRldmljZUFQSSB9IGZyb20gXCIuL2RldmljZXNcIjtcbmltcG9ydCB7IG1vZGVBUEksIHBsYW5BUEkgfSBmcm9tIFwiLi9oZWF0aW5nXCI7XG5pbXBvcnQgeyBzZXR0aW5nc0FQSSwgU2V0dGluZ3NIYXNoTWFwIH0gZnJvbSBcIi4vc2V0dGluZ3NcIjtcbmltcG9ydCB7IEhvb2tSZXR1cm5UeXBlLCBIb29rU2V0VHlwZSwgdXNlU3VzcGVuZGFibGVTdGF0ZSB9IGZyb20gXCIuL3N1c3BlbmRhYmxlU3RhdGVcIjtcbmltcG9ydCB7IHpvbmVBUEkgfSBmcm9tIFwiLi96b25lc1wiO1xuXG50eXBlIFBsYW5zVHlwZSA9IHtcbiAgICBwbGFuczogSUhlYXRpbmdQbGFuW10sXG4gICAgc2V0UGxhbnM6IEhvb2tTZXRUeXBlPElIZWF0aW5nUGxhbltdPixcbiAgICBsb2FkUGxhbnMoZm9yY2U/OiBib29sZWFuKTogSG9va1JldHVyblR5cGUsXG59O1xuXG50eXBlIERldmljZXNUeXBlID0ge1xuICAgIGRldmljZXM6IElIZWF0aW5nRGV2aWNlW10sXG4gICAgc2V0RGV2aWNlczogSG9va1NldFR5cGU8SUhlYXRpbmdEZXZpY2VbXT4sXG4gICAgbG9hZERldmljZXM6IEhvb2tSZXR1cm5UeXBlLFxufTtcblxudHlwZSBab25lc1R5cGUgPSB7XG4gICAgem9uZXM6IElIZWF0aW5nWm9uZVtdLFxuICAgIHNldFpvbmVzOiBIb29rU2V0VHlwZTxJSGVhdGluZ1pvbmVbXT4sXG4gICAgbG9hZFpvbmVzOiBIb29rUmV0dXJuVHlwZSxcbn07XG5cbnR5cGUgU2NoZWR1bGVJbmZvcm1hdGlvblR5cGUgPSB7XG4gICAgc2NoZWR1bGVJbmZvcm1hdGlvbjogSVNjaGVkdWxlSW5mb3JtYXRpb24sXG4gICAgc2V0U2NoZWR1bGVJbmZvcm1hdGlvbjogSG9va1NldFR5cGU8SVNjaGVkdWxlSW5mb3JtYXRpb24+LFxuICAgIGxvYWRTY2hlZHVsZUluZm9ybWF0aW9uOiBIb29rUmV0dXJuVHlwZSxcbn07XG5cbnR5cGUgU2V0dGluZ3NUeXBlID0ge1xuICAgIHNldHRpbmdzOiBTZXR0aW5nc0hhc2hNYXAsXG4gICAgc2V0U2V0dGluZ3M6IEhvb2tTZXRUeXBlPFNldHRpbmdzSGFzaE1hcD4sXG4gICAgbG9hZFNldHRpbmdzOiBIb29rUmV0dXJuVHlwZSxcbn07XG5cbnR5cGUgTW9kZVR5cGUgPSB7XG4gICAgbW9kZTogT3BlcmF0aW9uTW9kZSxcbiAgICBzZXRNb2RlOiBIb29rU2V0VHlwZTxPcGVyYXRpb25Nb2RlPixcbiAgICBsb2FkTW9kZTogSG9va1JldHVyblR5cGUsXG59O1xuXG5leHBvcnQgY29uc3QgdXNlUGxhbnMgPSB1c2VTdXNwZW5kYWJsZVN0YXRlPFBsYW5zVHlwZT4oXCJwbGFuc1wiLCBwbGFuQVBJLmZldGNoUGxhbnMpO1xuZXhwb3J0IGNvbnN0IHVzZURldmljZXMgPSB1c2VTdXNwZW5kYWJsZVN0YXRlPERldmljZXNUeXBlPihcImRldmljZXNcIiwgZGV2aWNlQVBJLmZldGNoSGVhdGluZ0RldmljZXMpO1xuZXhwb3J0IGNvbnN0IHVzZVpvbmVzID0gdXNlU3VzcGVuZGFibGVTdGF0ZTxab25lc1R5cGU+KFwiem9uZXNcIiwgem9uZUFQSS5mZXRjaEhlYXRpbmdab25lcyk7XG5leHBvcnQgY29uc3QgdXNlU2NoZWR1bGVJbmZvcm1hdGlvbiA9IHVzZVN1c3BlbmRhYmxlU3RhdGU8U2NoZWR1bGVJbmZvcm1hdGlvblR5cGU+KFwic2NoZWR1bGVJbmZvcm1hdGlvblwiLCBwbGFuQVBJLmZldGNoU2NoZWR1bGUpO1xuZXhwb3J0IGNvbnN0IHVzZVNldHRpbmdzID0gdXNlU3VzcGVuZGFibGVTdGF0ZTxTZXR0aW5nc1R5cGU+KFwic2V0dGluZ3NcIiwgc2V0dGluZ3NBUEkuZmV0Y2hTZXR0aW5ncyk7XG5leHBvcnQgY29uc3QgdXNlTW9kZSA9IHVzZVN1c3BlbmRhYmxlU3RhdGU8TW9kZVR5cGU+KFwibW9kZVwiLCBtb2RlQVBJLmZldGNoTW9kZSk7XG4iLCJpbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi8uLi9hcHAvc2VydmljZXMvc2V0dGluZ3MtbWFuYWdlci90eXBlc1wiO1xuaW1wb3J0IGNhbGxBUEkgZnJvbSBcIi4uL2NhbGxBUElcIjtcblxuZXhwb3J0IHR5cGUgU2V0dGluZ3NIYXNoTWFwID0ge1xuICBba2V5IGluIGtleW9mIHR5cGVvZiBTZXR0aW5nc10/OiBzdHJpbmcgfCBib29sZWFuO1xufTtcblxuY29uc3QgZmV0Y2hTZXR0aW5ncyA9IGFzeW5jICgpOiBQcm9taXNlPFNldHRpbmdzSGFzaE1hcD4gPT4ge1xuICByZXR1cm4gYXdhaXQgY2FsbEFQSTxTZXR0aW5nc0hhc2hNYXA+KFwiR0VUXCIsIFwiL3NldHRpbmdzXCIpO1xufTtcblxuY29uc3QgdXBkYXRlU2V0dGluZ3MgPSBhc3luYyAoc2V0dGluZ3M6IHt9KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIHJldHVybiBhd2FpdCBjYWxsQVBJPGFueT4oXCJQVVRcIiwgYC9zZXR0aW5nc2AsIHNldHRpbmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXR0aW5nc0FQSSA9IHtcbiAgZmV0Y2hTZXR0aW5ncyxcbiAgdXBkYXRlU2V0dGluZ3MsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IERpc3BhdGNoLCBTZXRTdGF0ZUFjdGlvbiwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCB0eXBlIE1hcFR5cGUgPSB7W2tleTogc3RyaW5nXTogYW55fTtcblxuZXhwb3J0IHR5cGUgSG9va1NldFR5cGU8VD4gPSBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxUPj47XG5leHBvcnQgdHlwZSBIb29rUmV0dXJuVHlwZSA9ICgpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBQcm92aWRlU3RhdGU8VCBleHRlbmRzIE1hcFR5cGU+ID0gKHByb3ZpZGVTdGF0ZT86IGJvb2xlYW4sIHByb3ZpZGVGYWlsZWQ/OiBib29sZWFuKSA9PiBUO1xuXG50eXBlIEFzeW5jPFQ+ID0gKCkgPT4gUHJvbWlzZTxUPjtcblxuLyoqKlxuICogQ2FsbCB0aGUgYXBpTWV0aG9kIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIElmIHRoZSBtZXRob2QgZmFpbHMsIHRocm93IHRoZSBleGNlcHRpb24gaW5zaWRlIHNldCBTZXRTdGF0ZUFjdGlvbiBvZiB0aGUgaG9vay5cbiAqIFRoaXMgYWxsb3dzIHRvIGNhdGNoIHRoZSBlcnJvciBcImluIHRoZSBFcnJvckJvdW5kYXJ5LlwiXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHRyeU1ldGhvZDxUPihhcGlNZXRob2Q6ICgpID0+IFByb21pc2U8VD4sIHNldFN0YXRlQWN0aW9uOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxUPj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICBzZXRTdGF0ZUFjdGlvbihhd2FpdCBhcGlNZXRob2QoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyByZXF1aXJlZCBmb3IgdGhlIGVycm9yIHRvIHBvcHVwIHRoZSBoaWVyYXJjaHlcbiAgICAgICAgc2V0U3RhdGVBY3Rpb24oKCkgPT4geyB0aHJvdyBlOyB9KTtcbiAgICB9XG59XG5cbmNvbnN0IGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbmNvbnN0IExPQURJTkc6IGFueSA9IFwiTG9hZGluZy4uLlwiO1xuXG4vKipcbiAqIENyZWF0ZSBhIFwiaG9va1wiIHRoYXQgaXMgYWJsZSB0byBzdXNwZW5kLlxuICpcbiAqIEBwYXJhbSBuYW1lIE11c3QgYmUgdW5pcXVlXG4gKiBAcGFyYW0gbWV0aG9kIFRoZSBhc3luYyBtZXRob2QgdG8gd2FpdCBmb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1c3BlbmRhYmxlU3RhdGU8VCBleHRlbmRzIE1hcFR5cGU+KG5hbWU6IHN0cmluZywgbWV0aG9kOiBBc3luYzxhbnk+KTogUHJvdmlkZVN0YXRlPFQ+IHtcbiAgICByZXR1cm4gKHByb3ZpZGVTdGF0ZSA9IGZhbHNlLCBwcm92aWRlRmFpbGVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcmFudCBhcyBpdCBzZXRzIHRoZSBzdGF0ZSBhZnRlciB0aGUgcHJvbWlzZSByZXNvbHZlc1xuICAgICAgICBjb25zdCB2YWwgPSBjYWNoZS5nZXQobmFtZSk7XG4gICAgICAgIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFtudWxsLCBudWxsXTtcbiAgICAgICAgaWYgKHByb3ZpZGVTdGF0ZSkge1xuICAgICAgICAgICAgLy8gd2UgdXNlIGluc3RhbmNlIGNvbXBhcmUgb24gTE9BRElORyB0byBkZXRlcm1pbmUgbm9uIGV4aXN0aW5nIHZhbHVlXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlPGFueT4odmFsICE9PSBMT0FESU5HID8gdmFsIDogbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbZmFpbGVkLCBzZXRGYWlsZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRWYWx1ZShmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoY2FjaGUuZ2V0KG5hbWUpID09IG51bGwgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQobmFtZSwgTE9BRElORyk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGlzIHVubG9hZHMgdGhlIGNvbXBvbmVudCBhbmQgd2FpdHMgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmVcbiAgICAgICAgICAgICAgICB0aHJvdyB0cnlNZXRob2QobWV0aG9kLCAocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuc2V0KG5hbWUsIChyIGFzIGFueSkoY2FjaGUuZ2V0KG5hbWUpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQobmFtZSwgcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3ZpZGVGYWlsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBtZSAtIHRoaXMgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRGYWlsZWQoKCkgPT4geyB0aHJvdyBlOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEZhaWxlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFZhbHVlKCk7XG5cbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwia2lsbGVkIHZhbHVlXCIpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgY2FjaGUuZGVsZXRlKG5hbWUpOyB9O1xuICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgLy8gd2UgdGVsbCB0aGUgREVWIHRoYXQgdGhpcyBpcyBub3QgdGhlIHdheSB0byBnb1xuICAgICAgICBmdW5jdGlvbiBmYWlsT25Ob1N0YXRlKCkge1xuICAgICAgICAgICAgaWYgKCFfX1BST0RVQ1RJT05fXykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgdXNlIGhvb2tzIHRvIHNhdmUgdGhlIHZhbHVlICR7bmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbbmFtZV06IHByb3ZpZGVTdGF0ZSA/IHN0YXRlIDogdmFsLFxuICAgICAgICAgICAgW2BzZXQke25hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpfWBdOiBwcm92aWRlU3RhdGUgPyBzZXRTdGF0ZSA6IGZhaWxPbk5vU3RhdGUsXG4gICAgICAgICAgICBbYGxvYWQke25hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpfWBdOiBsb2FkVmFsdWUsXG4gICAgICAgICAgICBbYGxvYWQke25hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpfUZhaWxlZGBdOiBmYWlsZWQsXG4gICAgICAgIH0gYXMgVDtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgc29ydEJ5IH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgSUhlYXRpbmdab25lIH0gZnJvbSBcIi4uLy4uLy4uL2FwcC9tb2RlbFwiO1xuaW1wb3J0IGNhbGxBUEkgZnJvbSBcIi4uL2NhbGxBUElcIjtcblxuZXhwb3J0IHR5cGUgSGFzaFR5cGUgPSB7XG4gIFtrZXk6IHN0cmluZ106IElIZWF0aW5nWm9uZTtcbn0gJiBBcnJheUxpa2U8SUhlYXRpbmdab25lPjtcblxuY29uc3QgZmV0Y2hIZWF0aW5nWm9uZXMgPSBhc3luYyAoKTogUHJvbWlzZTxIYXNoVHlwZT4gPT4ge1xuICBjb25zdCB6b25lcyA9IGF3YWl0IGNhbGxBUEk8YW55W10+KFwiR0VUXCIsIFwiL3pvbmVzXCIpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IHNvcnRCeSh6b25lcywgXCJuYW1lXCIpLnJlZHVjZSgobWFwLCBvYmosIGlkeCkgPT4ge1xuICAgIG1hcFtpZHhdID0gb2JqO1xuICAgIG1hcFtvYmouaWRdID0gb2JqO1xuICAgIHJldHVybiBtYXA7XG4gIH0sIHt9KTtcblxuICByZXN1bHQubGVuZ3RoID0gem9uZXMubGVuZ3RoO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IHpvbmVBUEkgPSB7XG4gIGZldGNoSGVhdGluZ1pvbmVzLFxufTtcbiIsImltcG9ydCB7IFN0eWxlUnVsZXNDYWxsYmFjaywgd2l0aFN0eWxlcywgV2l0aFN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcbmltcG9ydCB7IHdpdGhTbmFja2JhciwgV2l0aFNuYWNrYmFyUHJvcHMgfSBmcm9tIFwibm90aXN0YWNrXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyB1c2VQbGFucyB9IGZyb20gXCIuLi9hcGkvaG9va3NcIjtcbmltcG9ydCBBcHBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBwSGVhZGVyXCI7XG5pbXBvcnQgQm9keVRleHQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQm9keVRleHRcIjtcbmltcG9ydCB7IEFwcE1lbnVCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9NZW51XCI7XG5pbXBvcnQgU3ViSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL1N1YkhlYWRlclwiO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tIFwiLi4vaTE4bi9UcmFuc2xhdGlvblwiO1xuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL2xheW91dHMvUGFnZVwiO1xuY29uc3QgQ2hhcnQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4uL2NvbXBvbmVudHMvVGVtcGVyYXR1cmVDaGFydFwiKSk7XG5cbmNvbnN0IHN0eWxlczogU3R5bGVSdWxlc0NhbGxiYWNrPGFueSwgYW55PiA9ICh0aGVtZSkgPT4gKHtcbiAgICBsaXN0OiB7XG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIH0sXG59KTtcblxudHlwZSBQcm9wcyA9IFdpdGhTdHlsZXM8dHlwZW9mIHN0eWxlcz4gJiBSb3V0ZUNvbXBvbmVudFByb3BzICYgV2l0aFNuYWNrYmFyUHJvcHM7XG5cbmNvbnN0IFNjaGVkdWxlc1BhZ2U6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChfcHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHBsYW5zIH0gPSB1c2VQbGFucygpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFBhZ2U+XG4gICAgICAgICAgICB7e1xuICAgICAgICAgICAgICAgIGhlYWRlcjogKDxBcHBIZWFkZXIgdGl0bGU9e3RyYW5zbGF0ZShcIm1lbnUuc2NoZWR1bGVzXCIpfSBidXR0b249ezxBcHBNZW51QnV0dG9uIC8+fSAvPiksXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogNTAsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogNTAsXG5cbiAgICAgICAgICAgICAgICBib2R5OiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwbGFucy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDxCb2R5VGV4dCBzdHlsZT17eyBwYWRkaW5nVG9wOiAxNiB9fSB0ZXh0PXt0cmFuc2xhdGUoXCJwbGFucy5wbGFucy5lbXB0eVwiKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHBsYW5zLm1hcCgocGxhbikgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtwbGFuLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdWJIZWFkZXIgdGV4dD17cGxhbi5uYW1lfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoYXJ0IHBsYW49e3BsYW59IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgPC9QYWdlPlxuICAgICk7XG59O1xuXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgZGVmYXVsdCB3aXRoU25hY2tiYXIod2l0aFJvdXRlcih3aXRoU3R5bGVzKHN0eWxlcykoU2NoZWR1bGVzUGFnZSkpKTtcbiJdLCJuYW1lcyI6WyJkZXZpY2VBUEkiLCJmZXRjaEhlYXRpbmdEZXZpY2VzIiwiZGV2aWNlcyIsInJlc3VsdCIsInNvcnRCeSIsInJlZHVjZSIsIm1hcCIsIm9iaiIsImlkeCIsImlkIiwibGVuZ3RoIiwidXNlUGxhbnMiLCJ1c2VTdXNwZW5kYWJsZVN0YXRlIiwicGxhbkFQSSIsInVzZURldmljZXMiLCJ1c2Vab25lcyIsInpvbmVBUEkiLCJ1c2VTY2hlZHVsZUluZm9ybWF0aW9uIiwidXNlU2V0dGluZ3MiLCJzZXR0aW5nc0FQSSIsInVzZU1vZGUiLCJtb2RlQVBJIiwiZmV0Y2hTZXR0aW5ncyIsInVwZGF0ZVNldHRpbmdzIiwic2V0dGluZ3MiLCJjYWNoZSIsIk1hcCIsIkxPQURJTkciLCJuYW1lIiwibWV0aG9kIiwicHJvdmlkZVN0YXRlIiwicHJvdmlkZUZhaWxlZCIsInZhbCIsImdldCIsInN0YXRlIiwic2V0U3RhdGUiLCJmYWlsZWQiLCJzZXRGYWlsZWQiLCJsb2FkVmFsdWUiLCJmb3JjZSIsInNldCIsImFwaU1ldGhvZCIsInNldFN0YXRlQWN0aW9uIiwiZSIsInRyeU1ldGhvZCIsInIiLCJjYXRjaCIsInVzZUVmZmVjdCIsImRlbGV0ZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJFcnJvciIsImZldGNoSGVhdGluZ1pvbmVzIiwiem9uZXMiLCJDaGFydCIsIndpdGhTbmFja2JhciIsIndpdGhSb3V0ZXIiLCJ0aGVtZSIsImxpc3QiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJzcGFjaW5nIiwiX3Byb3BzIiwicGxhbnMiLCJoZWFkZXIiLCJ0aXRsZSIsImJ1dHRvbiIsIkFwcE1lbnVCdXR0b24iLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImJvZHkiLCJzdHlsZSIsInRleHQiLCJwbGFuIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==