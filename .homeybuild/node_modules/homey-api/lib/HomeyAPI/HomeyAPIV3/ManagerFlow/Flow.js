/* eslint-disable no-unused-vars */

'use strict';

const Item = require('../Item');

class Flow extends Item {

  /**
   * Check whether this Flow misses one or more {@link FlowCard} or {@link FlowToken}.
   * @returns Promise<Boolean>
   */
  async isBroken() {
    const managerFlow = this.homey.flow;
    if (!managerFlow.isConnected()) {
      throw new Error('Flow.isBroken requires ManagerFlow to be connected.');
    }

    const managerFlowToken = this.homey.flowtoken;
    if (!managerFlowToken.isConnected()) {
      throw new Error('Flow.isBroken requires ManagerFlowToken to be connected.');
    }

    // Array of local & global Token IDs.
    // For example [ 'foo', 'homey:x:y|abc' ]
    const tokenIds = [];

    const checkToken = async tokenId => {
      // If this is a global Token, fetch all FlowTokens
      if (tokenId.includes('|')) {
        const flowTokens = await managerFlowToken.getFlowTokens(); // Fill the cache
        for (const flowTokenId of Object.keys(flowTokens)) {
          tokenIds.push(flowTokenId);
        }

        tokenId = tokenId.replace('|', ':');
      }

      if (!tokenIds.includes(tokenId)) {
        throw new Error(`Missing Token: ${tokenId}`);
      }
    };

    const checkTokens = async card => {
      // Check droptoken
      if (card.droptoken) {
        await checkToken(card.droptoken);
      }

      if (typeof card.args === 'object') {
        for (const arg of Object.values(card.args)) {
          if (typeof arg !== 'string') continue;
          for (const [tokenMatch, tokenId] of arg.matchAll(/\[\[(.*?)\]\]/g)) {
            await checkToken(tokenId);
          }
        }
      }
    };

    // Check Trigger
    if (this.trigger) {
      try {
        await managerFlow.getFlowCardTriggers(); // Fill the cache
        const triggerCard = await this.manager.getFlowCardTrigger({ id: this.trigger.id });
        await checkTokens(this.trigger);

        // Add FlowCardTrigger.tokens to internal tokens cache
        if (Array.isArray(triggerCard.tokens)) {
          for (const tokenId of Object.keys(triggerCard.tokens)) {
            tokenIds.push(tokenId);
          }
        }
      } catch (err) {
        this.__debug(err.message);
        return true;
      }
    }

    // Check Conditions
    if (Array.isArray(this.conditions)) {
      for (const condition of Object.values(this.conditions)) {
        try {
          await managerFlow.getFlowCardConditions(); // Fill the cache
          const conditionCard = await this.manager.getFlowCardCondition({ id: condition.id });
          await checkTokens(condition);
        } catch (err) {
          this.__debug(err.message);
          return true;
        }
      }
    }

    // Check Actions
    if (Array.isArray(this.actions)) {
      for (const action of Object.values(this.actions)) {
        try {
          await managerFlow.getFlowCardActions(); // Fill the cache
          const actionCard = await this.manager.getFlowCardAction({ id: action.id });
          await checkTokens(action);
        } catch (err) {
          this.__debug(err.message);
          return true;
        }
      }
    }

    return false;
  }

}

module.exports = Flow;
