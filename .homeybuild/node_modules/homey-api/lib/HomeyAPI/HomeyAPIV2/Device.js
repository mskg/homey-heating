'use strict';

const Util = require('../../Util');
const Item = require('./Item');
const DeviceCapability = require('./DeviceCapability');

class Device extends Item {

  constructor(...props) {
    super(...props);

    // Set Capability Instances
    Object.defineProperty(this, '__capabilityInstances', {
      value: {},
      enumerable: false,
      writable: true,
    });
  }

  /**
   * Creates an {@link HomeyAPIV2.DeviceCapability} for realtime capability updates.
   * @param {string} capabilityId
   * @param {Function} listener
   * @param {number|boolean|string} listener.value
   * @returns {HomeyAPIV2.ManagerDevices.Device.DeviceCapability}
   * @function HomeyAPIV2.ManagerDevices.Device#makeCapabilityInstance
   * @example
   *
   *  const onOffInstance = device.makeCapabilityInstance('onoff', value => {
   *    console.log('Device onoff changed to:', value);
   *  });
   *
   * // Turn on
   * onOffInstance.setValue(true).catch(console.error);
   */
  makeCapabilityInstance(capabilityId, listener) {
    this.connect().catch(err => {
      this.__debug(err);
    });

    const instance = new DeviceCapability({
      listener,
      id: capabilityId,
      device: this,
    });

    instance.once('destroy', () => {
      this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId] || [];
      this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId].filter(i => i !== instance);

      if (this.__capabilityInstances[capabilityId].length === 0) {
        delete this.__capabilityInstances[capabilityId];
      }

      if (Object.keys(this.__capabilityInstances).length === 0) {
        this.__debug('No more Capability instances, disconnecting...');
        this.disconnect().catch(err => this.__debug(err));
      }
    });

    this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId] || [];
    this.__capabilityInstances[capabilityId].push(instance);

    return instance;
  }

  /**
   * Sets a capability's value.
   * @param {object} opts
   * @param {string} opts.capabilityId
   * @param {number|boolean|string} opts.value
   * @param {object} [opts.opts]
   * @param {number} [opts.opts.duration]
   * @returns {Promise<void>}
   * @function HomeyAPIV2.ManagerDevices.Device#setCapabilityValue
   */
  async setCapabilityValue(options, ...args) {
    // Legacy compatibility from node-athom-api
    if (typeof options === 'string') {
      return this.setCapabilityValueLegacy(options, ...args);
    }

    return this.__setCapabilityValue(options);
  }

  async __setCapabilityValue({
    capabilityId,
    value,
    opts,
    transactionId = `homey-api-${Util.uuid()}`,
    transactionTime = Date.now(),
  }) {
    return this.manager.setCapabilityValue({
      deviceId: this.id,
      capabilityId,
      value,
      opts,
      transactionId,
      transactionTime,
    });
  }

  async setCapabilityValueLegacy(capabilityId, value, opts) {
    return this.__setCapabilityValue({
      capabilityId,
      value,
      opts,
    });
  }

  onReconnect() {
    if (Object.keys(this.__capabilityInstances).length > 0) {
      // Get the device's latest values
      // TODO: Optimize this with `getDevices()` when >1 device has >0 capability instances.
      this.manager.getDevice({
        id: this.id,
      }).then(async device => {
        Object.entries(this.__capabilityInstances).forEach(([capabilityId, capabilityInstance]) => {
          const value = device.capabilitiesObj
            ? typeof device.capabilitiesObj[capabilityId] !== 'undefined'
              ? device.capabilitiesObj[capabilityId].value
              : null
            : null;

          capabilityInstance.__onCapabilityValue({
            capabilityId,
            value,
            transactionId: Util.uuid(),
          });
        });
      })
        // eslint-disable-next-line no-console
        .catch(err => console.error(`Device[${this.id}].onReconnectError:`, err));
    }
  }

}

module.exports = Device;
