'use strict';

const EventEmitter = require('../../EventEmitter');

class Item extends EventEmitter {

  constructor({
    uri,
    key,
    homey,
    manager,
    properties,
  }) {
    super();

    // Set Homey
    Object.defineProperty(this, 'homey', {
      value: homey,
      enumerable: false,
      writable: false,
    });

    // Set Manager
    Object.defineProperty(this, 'manager', {
      value: manager,
      enumerable: false,
      writable: false,
    });

    // Set Key
    Object.defineProperty(this, '__key', {
      value: key,
      enumerable: false,
      writable: false,
    });

    // Set URI
    Object.defineProperty(this, '__uri', {
      value: uri,
      enumerable: false,
      writable: true,
    });

    // Set Connected
    Object.defineProperty(this, '__connected', {
      value: false,
      enumerable: false,
      writable: true,
    });

    // Set Properties
    for (const [key, value] of Object.entries(properties)) {
      Object.defineProperty(this, key, {
        value,
        enumerable: true,
        writable: true,
      });
    }
  }

  __debug(...props) {
    this.manager.__debug(`[${this.constructor.name}:${this.__key}]`, ...props);
  }

  __update(properties) {
    for (const [key, value] of Object.entries(properties)) {
      this[key] = value;
    }
    return this;
  }

  async connect() {
    this.__debug('connect');

    // If disconnecting, await that first
    try {
      // Ensure all microtasks are done first. E.g. if disconnect is called in the same tick as
      // connect. This way the disconnect is always started first so we can await the disconnect
      // promise before we try to connect again.
      await Promise.resolve();
      await this.__disconnectPromise;
    } catch (err) { }

    this.__connectPromise = Promise.resolve().then(async () => {
      if (!this.io) {
        this.io = this.homey.subscribe(this.__uri, {
          onConnect: () => {
            this.__debug('onConnect');
            this.__connected = true;

            this.onConnect();
          },
          onDisconnect: () => {
            this.__debug('onDisconnect');
            this.__connected = false;

            this.onDisconnect();
          },
          onReconnect: () => {
            this.__debug('onDisconnect');

            this.onReconnect();
          },
          onEvent: (event, data) => {
            this.__debug('onEvent', event, data);

            this.emit(event, data);
          },
        });
      }

      await this.io;
    });

    // Delete the connecting Promise
    this.__connectPromise
      .catch(() => { })
      .finally(() => {
        delete this.__connectPromise;
      });

    await this.__connectPromise;
  }

  async disconnect() {
    this.__debug('disconnect');

    // If connecting, await that first
    try {
      await this.__connectPromise;
    } catch (err) { }

    this.__disconnectPromise = Promise.resolve().then(async () => {
      this.__connected = false;

      if (this.io) {
        this.io
          .then(io => io.unsubscribe())
          .catch(err => this.__debug('Error Disconnecting:', err));
      }
    });

    // Delete the disconnecting Promise
    this.__disconnectPromise
      .catch(() => { })
      .finally(() => {
        delete this.__disconnectPromise;
        // Delete this.io so connect can start new connections.
        delete this.io;
      });

    await this.__disconnectPromise;
  }

  onConnect() {
    // Overload Me
  }

  onReconnect() {
    // Overload Me
  }

  onDisconnect() {
    // Overload Me
  }

  destroy() {
    // Remove all event listeners
    this.removeAllListeners();

    // Disconnect from Socket.io
    this.disconnect().catch(() => { });
  }

}

module.exports = Item;
