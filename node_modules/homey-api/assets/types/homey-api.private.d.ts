






  export class APIDefinition  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      api: API,
    
  
    
      properties: object,
    
  
},
    
  

        
      )
    

    

    
  }

  export class APIError extends Error {
    
      constructor(
        
          
  
    
      message: string,
    
  
    
      statusCode: number,
    
  

        
      )
    

    
      message: string;
    
      statusCode: number;
    

    
  }

  export class APIErrorHomeyOffline extends APIError {
    

    
      message: string;
    
      statusCode: number;
    

    
  }

  export class APIErrorNotFound extends APIError {
    

    
      message: string;
    
      statusCode: number;
    

    
  }

  export class APIErrorTimeout extends APIError {
    

    
      message: string;
    
      statusCode: number;
    

    
  }

  export class AthomAppsAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      updateArchive(
        
          
  
    
      opts: {
  
    
      archiveId: string,
    
  
    
      state: string,
    
  
    
      error: string,
    
  
    
      manifest: object,
    
  
    
      assetsId: string,
    
  
    
      hash: string,
    
  
    
      size: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getApps(
        
          
  
    
      opts: {
  
    
      page: number,
    
  
    
      count: number,
    
  
    
      category: string,
    
  
    
      author: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      searchApps(
        
          
  
    
      opts: {
  
    
      query: string,
    
  
    
      language: string,
    
  
    
      homeyVersion: string,
    
  
    
      homeyPlatform: string,
    
  
    
      homeyPlatformVersion: string,
    
  
    
      homeyModel: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      searchAppsBy433MhzSignal(
        
          
  
    
      opts: {
  
    
      language: string,
    
  
    
      homeyVersion: string,
    
  
    
      homeyPlatform: string,
    
  
    
      payload: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      browseApps(
        
          
  
    
      opts: {
  
    
      query: string,
    
  
    
      language: string,
    
  
    
      platform: Array<any>,
    
  
    
      connectivity: Array<any>,
    
  
    
      category: Array<any>,
    
  
    
      limit: number,
    
  
    
      offset: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      syncApps(
        
      ):
        Promise<any>;
    
      getAppsSummary(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHighlightedApps(
        
          
  
    
      opts: {
  
    
      platforms: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHighlightedAppsV2(
        
          
  
    
      opts: {
  
    
      platform: Array<any>,
    
  
    
      language: string,
    
  
    
      tags: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getMyApps(
        
      ):
        Promise<any>;
    
      getAllLiveAppIDs(
        
      ):
        Promise<any>;
    
      getReviewApps(
        
      ):
        Promise<any>;
    
      getApp(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteApp(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppChangelog(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateAppAuthor(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppInstall(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      channel: string,
    
  
    
      version: string,
    
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppInstallStats(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppDriversStats(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBuilds(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createBuild(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      version: string,
    
  
    
      env: object,
    
  
    
      changelog: object,
    
  
    
      readme: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBuild(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getCrashes(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getCrashesStats(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateBuildChannel(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
    
      channel: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createSubmission(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
    
      autoRelease: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSubmissionComments(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createSubmissionComment(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
    
      text: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      retractSubmission(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      approveSubmission(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      rejectSubmission(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      buildId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getReviews(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateReview(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      version: string,
    
  
    
      rating: number,
    
  
    
      comment: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteReview(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getReviewsStats(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteAllReviews(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateReviewResponse(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      userId: string,
    
  
    
      response: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteReviewResponse(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createCrash(
        
          
  
    
      opts: {
  
    
      appId: string,
    
  
    
      homeyId: string,
    
  
    
      homeyVersion: string,
    
  
    
      appVersion: string,
    
  
    
      stack: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      replyToCrash(
        
          
  
    
      opts: {
  
    
      crashId: string,
    
  
    
      subject: string,
    
  
    
      body: string,
    
  
    
      from: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      discoverApps(
        
          
  
    
      opts: {
  
    
      ssdp: Array<any>,
    
  
    
      ble: Array<any>,
    
  
    
      mac: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomBackupAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getMyBackups(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteMyBackup(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      backupId: string,
    
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBackups(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteBackups(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBackup(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      backupId: string,
    
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createBackup(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      homeyId: string,
    
  
    
      secret: string,
    
  
    
      homeyName: string,
    
  
    
      homeyPlatform: string,
    
  
    
      homeyPlatformVersion: number,
    
  
    
      version: string,
    
  
    
      channel: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setBackupComplete(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      homeyId: string,
    
  
    
      backupId: string,
    
  
    
      secret: string,
    
  
    
      size: number,
    
  
    
      hash: string,
    
  
    
      meta: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomCallbackAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      registerCallbackUrl(
        
          
  
    
      opts: {
  
    
      callback_url: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomCloudAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
    
      clientId: string,
    
  
    
      clientSecret: string,
    
  
    
      redirectUrl: string,
    
  
    
      autoRefreshTokens: boolean,
    
  
    
      token: AthomCloudAPI.Token,
    
  
    
      store: AthomCloudAPI.StorageAdapter,
    
  
},
    
  

        
      )
    

    

    
      createDelegationToken(
        
          
  
    
      opts: {
  
    
      audience: string,
    
  
    
      meta: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      verifyDelegationToken(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDelegationTokenKey(
        
      ):
        Promise<any>;
    
      getAccessToken(
        
          
  
    
      opts: {
  
    
      client_id: string,
    
  
    
      client_secret: string,
    
  
    
      grant_type: string,
    
  
    
      refresh_token: string,
    
  
    
      code: string,
    
  
    
      username: string,
    
  
    
      password: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      forgotPassword(
        
          
  
    
      opts: {
  
    
      email: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createUser(
        
          
  
    
      opts: {
  
    
      user: {
  
    
      firstname: string,
    
  
    
      lastname: string,
    
  
    
      email: string,
    
  
    
      password: string,
    
  
    
      language: string,
    
  
},
    
  
    
      newsletter: boolean,
    
  
    
      gettingStarted: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      user: {
  
    
      firstname: string,
    
  
    
      lastname: string,
    
  
    
      email: string,
    
  
    
      language: string,
    
  
    
      roles: Array<any>,
    
  
    
      roleIds: Array<any>,
    
  
    
      avatar: undefined,
    
  
    
      homeys: Array<any>,
    
  
    
      devices: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      password: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createUserDevice(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      platform: string,
    
  
    
      token: string,
    
  
    
      publicKey: string,
    
  
    
      appVersion: string,
    
  
    
      osVersion: string,
    
  
    
      created: string,
    
  
    
      updated: string,
    
  
    
      devmode: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserDevice(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      deviceId: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      platform: string,
    
  
    
      token: string,
    
  
    
      publicKey: string,
    
  
    
      appVersion: string,
    
  
    
      osVersion: string,
    
  
    
      created: string,
    
  
    
      updated: string,
    
  
    
      devmode: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserDevice(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      deviceId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUserAddresses(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      addUserAddress(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      address: {
  
    
      street: string,
    
  
    
      number: string,
    
  
    
      zipcode: string,
    
  
    
      city: string,
    
  
    
      state: string,
    
  
    
      country: string,
    
  
    
      extra: string,
    
  
    
      firstname: string,
    
  
    
      lastname: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserAddress(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      addressId: string,
    
  
    
      address: {
  
    
      street: string,
    
  
    
      number: string,
    
  
    
      zipcode: string,
    
  
    
      city: string,
    
  
    
      state: string,
    
  
    
      country: string,
    
  
    
      extra: string,
    
  
    
      firstname: string,
    
  
    
      lastname: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserAddress(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      addressId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserSubscription(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      subscriptionId: string,
    
  
    
      subscription: undefined,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserSubscription(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      subscriptionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      addRoleAppDeveloperTrusted(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      removeRoleAppDeveloperTrusted(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAuthenticatedUser(
        
          
  
    
      opts: {
  
    
      additionalScopes: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateAuthenticatedUserPassword(
        
          
  
    
      opts: {
  
    
      password: string,
    
  
    
      old_password: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUserProfile(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUserSessions(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserSession(
        
          
  
    
      opts: {
  
    
      userId: string,
    
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBridges(
        
          
  
    
      opts: {
  
    
      serial: string,
    
  
    
      serialHash: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createBridge(
        
          
  
    
      opts: {
  
    
      bridge: {
  
    
      serial: string,
    
  
    
      build: number,
    
  
    
      zwaveCalibration: Array<any>,
    
  
    
      manufacturedAt: string,
    
  
    
      activationHistory: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getBridge(
        
          
  
    
      opts: {
  
    
      serial: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateBridge(
        
          
  
    
      opts: {
  
    
      serial: string,
    
  
    
      bridge: {
  
    
      serial: string,
    
  
    
      build: number,
    
  
    
      zwaveCalibration: Array<any>,
    
  
    
      manufacturedAt: string,
    
  
    
      activationHistory: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      activateBridge(
        
          
  
    
      opts: {
  
    
      serial: string,
    
  
    
      homeyId: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHomeys(
        
          
  
    
      opts: {
  
    
      serial: string,
    
  
    
      softwareVersion: string,
    
  
    
      search: string,
    
  
    
      page: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createHomey(
        
          
  
    
      opts: {
  
    
      data: {
  
    
      name: string,
    
  
    
      ipInternal: string,
    
  
    
      ipExternal: string,
    
  
    
      ipExternalCountry: string,
    
  
    
      ipExternalPort: number,
    
  
    
      localUrl: string,
    
  
    
      localUrlSecure: string,
    
  
    
      remoteUrl: string,
    
  
    
      apiVersion: number,
    
  
    
      softwareVersion: string,
    
  
    
      language: string,
    
  
    
      state: string,
    
  
    
      geolocation: object,
    
  
    
      users: Array<any>,
    
  
    
      role: string,
    
  
    
      token: string,
    
  
    
      apps: Array<any>,
    
  
    
      devices: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHomey(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateHomey(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      homey: {
  
    
      name: string,
    
  
    
      ipInternal: string,
    
  
    
      ipExternal: string,
    
  
    
      ipExternalCountry: string,
    
  
    
      ipExternalPort: number,
    
  
    
      localUrl: string,
    
  
    
      localUrlSecure: string,
    
  
    
      remoteUrl: string,
    
  
    
      apiVersion: number,
    
  
    
      softwareVersion: string,
    
  
    
      language: string,
    
  
    
      state: string,
    
  
    
      geolocation: object,
    
  
    
      users: Array<any>,
    
  
    
      role: string,
    
  
    
      token: string,
    
  
    
      apps: Array<any>,
    
  
    
      devices: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteHomey(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      activateHomey(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      addHomeyLicense(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      license: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createHomeyUser(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      user: string,
    
  
    
      role: string,
    
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteHomeyUser(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      resetHomeyUsers(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAllHomeyMetadata(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHomeyMetadata(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      key: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createHomeyMetadata(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      key: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateHomeyMetadata(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      key: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteHomeyMetadata(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      key: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      sendFormattedEmail(
        
          
  
    
      opts: {
  
    
      to: string,
    
  
    
      toHomeyOwner: string,
    
  
    
      from: string,
    
  
    
      subject: string,
    
  
    
      body: string,
    
  
    
      replyTo: string,
    
  
    
      header: object,
    
  
    
      button: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      subscribeUserToMailChimp(
        
          
  
    
      opts: {
  
    
      listId: string,
    
  
    
      userId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppInstallsStatistics(
        
      ):
        Promise<any>;
    
      getAppDriversStatistics(
        
      ):
        Promise<any>;
    
      getLocationStatistics(
        
      ):
        Promise<any>;
    
      getVersionStatistics(
        
      ):
        Promise<any>;
    
      getProductionStatistics(
        
          
  
    
      opts: {
  
    
      min: string,
    
  
    
      max: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getHomeyOwnerContactDetails(
        
          
  
    
      opts: {
  
    
      softwareVersion: string,
    
  
    
      homeyId: string,
    
  
    
      homeySn: string,
    
  
    
      barcodeMin: string,
    
  
    
      barcodeMax: string,
    
  
    
      appId: string,
    
  
    
      appChannel: string,
    
  
    
      appVersion: string,
    
  
    
      page: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isLoggedIn(
        
          
  

        
      ):
        Promise<boolean>;
    
      getAuthenticatedUser(
        
          
  
    
      opts: {
  
    
      $cache: object,
    
  
},
    
  

        
      ):
        Promise<AthomCloudAPI.User>;
    
      hasAuthorizationCode(
        
          
  

        
      ):
        boolean;
    
      getLoginUrl(
        
          
  
    
      opts: {
  
    
      state: string,
    
  
    
      scopes: Array<string>,
    
  
},
    
  

        
      ):
        string;
    
      logout(
        
          
  

        
      ):
        Promise<void>;
    
      authenticateWithAuthorizationCode(
        
          
  
    
      opts: {
  
    
      code: String,
    
  
    
      removeCodeFromHistory: Boolean,
    
  
},
    
  

        
      ):
        Promise<AthomCloudAPI.Token>;
    
      updateUserMe(
        
          
  
    
      opts: {
  
    
      firstname: String,
    
  
    
      lastname: String,
    
  
    
      email: String,
    
  
},
    
  

        
      ):
        Promise<AthomCloudAPI.User>;
    
      updateUserMeAvatar(
        
          
  
    
      imageBuffer: Buffer,
    
  
    
      imageType: "jpg" | "jpeg" | "png" | "gif",
    
  

        
      ):
        Promise<Object>;
    
  }

  export class AthomConnectAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      ping(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      acceptSharingRequest(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      athomId: string,
    
  
    
      inviteToken: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      confirmPushNotification(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      pushId: string,
    
  
    
      choice: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      sendMobileEvent(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      deviceId: string,
    
  
    
      userId: string,
    
  
    
      message: string,
    
  
    
      signature: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      sendOAuth2Callback(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      code: string,
    
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      sendWebhook(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      webhookId: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomDNSAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getHomeyCertificate(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomFirmwareAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getUpdatesChangelog(
        
      ):
        Promise<any>;
    
  }

  export class AthomFlowAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      shareFlow(
        
          
  
    
      opts: {
  
    
      data: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlow(
        
          
  
    
      opts: {
  
    
      flowId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomGeolocateAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getLocation(
        
          
  
    
      opts: {
  
    
      homeyId: string,
    
  
    
      homeyIP: string,
    
  
    
      towers: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomIconsAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getIconAsBuffer(
        
          
  
    
      opts: {
  
    
      iconId: String,
    
  
    
      size: Number,
    
  
},
    
  

        
      ):
        Promise<Buffer>;
    
      getIconAsStream(
        
          
  
    
      opts: {
  
    
      iconId: String,
    
  
    
      size: Number,
    
  
},
    
  

        
      ):
        Promise<Stream>;
    
      createIconFromSVG(
        
          
  
    
      opts: {
  
    
      svg: String,
    
  
},
    
  

        
      ):
        Promise<void>;
    
      createIconFromURL(
        
          
  
    
      opts: {
  
    
      url: String,
    
  
},
    
  

        
      ):
        Promise<void>;
    
  }

  export class AthomInfraredAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getBrands(
        
          
  
    
      opts: {
  
    
      type: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getTypes(
        
          
  
    
      opts: {
  
    
      brand: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      searchDevices(
        
          
  
    
      opts: {
  
    
      query: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDevices(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      type: string,
    
  
    
      brand: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDevice(
        
          
  
    
      opts: {
  
    
      deviceId: string,
    
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomNotificationsAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      push(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
    
      batch: Array<any>,
    
  
    
      data: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomSetupAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      createSession(
        
      ):
        Promise<any>;
    
      getSession(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateSession(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      data: {
  
    
      sn: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteSession(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSessionState(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setSessionState(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      data: {
  
    
      state: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSessionCommands(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createSessionCommand(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      manager: string,
    
  
    
      command: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateSessionCommandResponse(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      commandId: string,
    
  
    
      result: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      loginByDelegationToken(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      data: {
  
    
      token: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateSessionHomey(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      data: {
  
    
      factoryreset: boolean,
    
  
    
      name: string,
    
  
    
      token: string,
    
  
    
      extraProperties: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSessionVoice(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      language: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSessionBackups(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getTimezone(
        
      ):
        Promise<any>;
    
  }

  export class AthomStoreAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getProducts(
        
      ):
        Promise<any>;
    
      getProduct(
        
          
  
    
      opts: {
  
    
      productId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getCart(
        
      ):
        Promise<any>;
    
      addProductToCart(
        
          
  
    
      opts: {
  
    
      sku: string,
    
  
    
      quantity: number,
    
  
    
      options: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setCartProductQuantity(
        
          
  
    
      opts: {
  
    
      sku: string,
    
  
    
      quantity: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      removeProductFromCart(
        
          
  
    
      opts: {
  
    
      sku: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getLocales(
        
      ):
        Promise<any>;
    
      setLocale(
        
          
  
    
      opts: {
  
    
      locale: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setUserdata(
        
          
  
    
      opts: {
  
    
      shipping_address: boolean,
    
  
    
      create_account: boolean,
    
  
    
      newsletter: boolean,
    
  
    
      is_business: boolean,
    
  
    
      email: string,
    
  
    
      password: string,
    
  
    
      gender: string,
    
  
    
      phone: string,
    
  
    
      billing_firstname: string,
    
  
    
      billing_lastname: string,
    
  
    
      billing_street: string,
    
  
    
      billing_number: string,
    
  
    
      billing_zipcode: string,
    
  
    
      billing_city: string,
    
  
    
      billing_state: string,
    
  
    
      billing_country: string,
    
  
    
      billing_address_extra: string,
    
  
    
      shipping_firstname: string,
    
  
    
      shipping_lastname: string,
    
  
    
      shipping_street: string,
    
  
    
      shipping_number: string,
    
  
    
      shipping_zipcode: string,
    
  
    
      shipping_city: string,
    
  
    
      shipping_state: string,
    
  
    
      shipping_country: string,
    
  
    
      shipping_address_extra: string,
    
  
    
      business_name: string,
    
  
    
      business_vat: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setBusiness(
        
          
  
    
      opts: {
  
    
      business: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setCoupon(
        
          
  
    
      opts: {
  
    
      coupon: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setPayment(
        
          
  
    
      opts: {
  
    
      payment: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createOrder(
        
      ):
        Promise<any>;
    
      payOrder(
        
          
  
    
      opts: {
  
    
      orderId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      validateVat(
        
          
  
    
      opts: {
  
    
      vat: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAddressSuggestion(
        
          
  
    
      opts: {
  
    
      zipcode: string,
    
  
    
      number: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createSession(
        
      ):
        Promise<any>;
    
      deleteSession(
        
      ):
        Promise<any>;
    
      getOrders(
        
      ):
        Promise<any>;
    
      getOrder(
        
          
  
    
      opts: {
  
    
      orderId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      loginByDelegationToken(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      logout(
        
      ):
        Promise<any>;
    
      verifySubscription(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
    
      sku: string,
    
  
    
      packageName: string,
    
  
    
      receipt: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deferSubscription(
        
          
  
    
      opts: {
  
    
      sku: string,
    
  
    
      packageName: string,
    
  
    
      athomId: string,
    
  
    
      quantity: number,
    
  
    
      duration: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getExpiredSubscriptions(
        
          
  
    
      opts: {
  
    
      users: Array<any>,
    
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getOffer(
        
          
  
    
      opts: {
  
    
      offerId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      redeemOffer(
        
          
  
    
      opts: {
  
    
      offerId: string,
    
  
    
      paymentProvider: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createOfferCouponApple(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
    
      coupon: string,
    
  
    
      expiresAt: string,
    
  
    
      subscriptionType: string,
    
  
    
      subscriptionQuantity: number,
    
  
    
      subscriptionDuration: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getOffers(
        
      ):
        Promise<any>;
    
      createOffer(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
    
      userId: string,
    
  
    
      expiresAt: string,
    
  
    
      campaignId: string,
    
  
    
      subscriptionType: string,
    
  
    
      subscriptionQuantity: number,
    
  
    
      subscriptionDuration: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomWeatherAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getWeather(
        
          
  
    
      opts: {
  
    
      latitude: string,
    
  
    
      longitude: string,
    
  
    
      homey: string,
    
  
    
      language: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class AthomWebhooksAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
},
    
  

        
      )
    

    

    
      getWebhooks(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createWebhook(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
    
      name: string,
    
  
    
      fn: string,
    
  
    
      keyPath: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getWebhook(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
    
      webhookId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateWebhook(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
    
      webhookId: string,
    
  
    
      name: string,
    
  
    
      fn: string,
    
  
    
      keyPath: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteWebhook(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
    
      webhookId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      registerWebhookClient(
        
          
  
    
      opts: {
  
    
      webhookId: string,
    
  
    
      homeyId: string,
    
  
    
      secret: string,
    
  
    
      data: object,
    
  
    
      callback_url: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unregisterWebhookClient(
        
          
  
    
      opts: {
  
    
      webhookId: string,
    
  
    
      homeyId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class EventEmitter  {
    

    

    
      emit(
        
          
  
    
      event: string,
    
  
    
      data: any,
    
  

        
      ):
        any;
    
      addListener(
        
          
  
    
      event: string,
    
  
    
      callback: function,
    
  

        
      ):
        any;
    
      on(
        
          
  
    
      event: string,
    
  
    
      callback: function,
    
  

        
      ):
        any;
    
      once(
        
          
  
    
      event: string,
    
  
    
      callback: function,
    
  

        
      ):
        any;
    
      off(
        
          
  
    
      event: string,
    
  
    
      callback: function,
    
  

        
      ):
        any;
    
      removeListener(
        
          
  
    
      event: string,
    
  
    
      callback: function,
    
  

        
      ):
        any;
    
      removeAllListeners(
        
          
  
    
      event: string,
    
  

        
      ):
        any;
    
  }

  export class HomeyAPI  {
    

    

    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
      createAppAPI(
        
          
  
    
      opts: {
  
    
      homey: Homey,
    
  
    
      debug: function | null,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createLocalAPI(
        
          
  
    
      opts: {
  
    
      address: String,
    
  
    
      token: String,
    
  
    
      debug: function | null,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class HomeyAPIV1 extends HomeyAPI {
    

    

    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
  }

  export class HomeyAPIV2 extends HomeyAPI {
    

    

    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
  }

  export class HomeyAPIV3 extends HomeyAPIV2 {
    

    

    
      isConnected(
        
          
  

        
      ):
        Boolean;
    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
  }

  export class HomeyAPIV3Cloud extends HomeyAPIV3 {
    

    

    
      isConnected(
        
      ):
        Boolean;
    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
  }

  export class HomeyAPIV3Local extends HomeyAPIV3 {
    

    

    
      isConnected(
        
      ):
        Boolean;
    
      __(
        
          
  
    
      input: {
  
    
      en: string,
    
  
    
      nl: string,
    
  
},
    
  

        
      ):
        string | null;
    
  }

  export class HomeyCloudAPI  {
    
      constructor(
        
          
  
    
      opts: {
  
    
      baseUrl: string,
    
  
    
      debug: boolean,
    
  
    
      secret: string,
    
  
    
      region: string,
    
  
},
    
  

        
      )
    

    

    
      getSystemStatus(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
},
    
  

        
      ):
        Promise<object>;
    
      getClosestRegion(
        
          
  

        
      ):
        object;
    
  }

  export class Util  {
    

    

    
      fetch(
        
          
  
    
      args: any,
    
  

        
      ):
        Promise;
    
      wait(
        
          
  
    
      ms: number,
    
  

        
      ):
        Promise<void>;
    
      timeout(
        
          
  
    
      promise: Promise,
    
  
    
      timeoutMillis: number,
    
  
    
      message: string,
    
  

        
      ):
        Promise;
    
      benchmark(
        
          
  

        
      ):
        function;
    
      isHTTPUnsecureSupported(
        
          
  

        
      ):
        boolean;
    
      isReactNative(
        
          
  

        
      ):
        boolean;
    
      isBrowser(
        
          
  

        
      ):
        boolean;
    
      isNodeJS(
        
          
  

        
      ):
        boolean;
    
      getSearchParameter(
        
          
  
    
      name: string,
    
  

        
      ):
        string | null;
    
      stringifyQuery(
        
          
  
    
      object: object,
    
  

        
      ):
        string;
    
      base64(
        
          
  
    
      input: string,
    
  

        
      ):
        string;
    
      uuid(
        
          
  

        
      ):
        string;
    
      env(
        
          
  

        
      ):
        string;
    
      promiseAny(
        
          
  
    
      promises: Array<Promise>,
    
  

        
      ):
        Promise<any>;
    
  }



  

  

  

  

  

  
    export namespace AthomCloudAPI {
      
  export class Device  {
    

    
      id: string;
    

    
  }

  export class Homey  {
    

    
      id: string;
    

    
      authenticate(
        
          
  
    
      opts: {
  
    
      strategy: string | Array<any>,
    
  
},
    
  

        
      ):
        Promise<HomeyAPI>;
    
  }

  export class StorageAdapter  {
    

    

    
      get(
        
          
  

        
      ):
        Promise<object>;
    
      set(
        
          
  
    
      value: object,
    
  

        
      ):
        Promise<void>;
    
  }

  export class StorageAdapterBrowser extends StorageAdapter {
    

    

    
      get(
        
          
  

        
      ):
        Promise<object>;
    
      set(
        
          
  
    
      value: object,
    
  

        
      ):
        Promise<void>;
    
  }

  export class StorageAdapterMemory extends StorageAdapter {
    

    

    
      get(
        
          
  

        
      ):
        Promise<object>;
    
      set(
        
          
  
    
      value: object,
    
  

        
      ):
        Promise<void>;
    
  }

  export class Token  {
    

    
      token_type: string;
    
      access_token: string;
    
      refresh_token: string;
    
      expires_in: number;
    
      grant_type: string;
    

    
  }

  export class User  {
    

    
      id: string;
    

    
      getHomeys(
        
          
  

        
      ):
        Array<AthomCloudAPI.Homey>;
    
      getHomeyById(
        
          
  
    
      id: string,
    
  

        
      ):
        AthomCloudAPI.Homey;
    
      getFirstHomey(
        
          
  

        
      ):
        AthomCloudAPI.Homey;
    
  }

    }
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
    export namespace HomeyAPIV2.ManagerDevices.Device {
      
  export class DeviceCapability  {
    

    
      value: boolean | number | string | null;
    
      lastChanged: Date | null;
    

    
      destroy(
        
          
  

        
      ):
        any;
    
      setValue(
        
          
  
    
      value: boolean | number | string,
    
  
    
      opts: object,
    
  

        
      ):
        Promise<any>;
    
  }

    }
  

  

  

  

  

  

  

  

  

  

  
    export namespace HomeyAPIV2.ManagerAlarms {
      
  export class Alarm  {
    

    
      id: string;
    
      name: string;
    
      time: string;
    
      enabled: boolean;
    
      nextOccurance: string;
    
      repetition: object;
    

    
  }

    }
  

  
    export namespace HomeyAPIV2.ManagerApps {
      
  export class App  {
    

    
      enabled: boolean;
    
      autoupdate: boolean;
    
      id: string;
    
      sdk: number;
    
      name: string;
    
      origin: string;
    
      channel: string;
    
      version: string;
    
      compatibility: string;
    
      icon: string;
    
      iconObj: object;
    
      author: object;
    
      permissions: Array<any>;
    
      images: object;
    
      session: string;
    
      ready: boolean;
    
      state: string;
    
      crashed: boolean;
    
      crashedMessage: string;
    
      exitCode: number;
    
      exitSignal: string;
    
      exitCount: number;
    
      settings: boolean;
    
      brandColor: string;
    
      hasDrivers: boolean;
    
      usage: object;
    
      updateAvailable: object;
    

    
      get(
        
          
  
    
      opts: {
  
    
      path: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      post(
        
          
  
    
      opts: {
  
    
      path: string,
    
  
    
      body: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      put(
        
          
  
    
      opts: {
  
    
      path: string,
    
  
    
      body: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      delete(
        
          
  
    
      opts: {
  
    
      path: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

    }
  

  

  

  

  

  

  
    export namespace HomeyAPIV2.ManagerDashboards {
      
  export class Dashboard  {
    

    
      id: string;
    
      name: string;
    
      widgets: object;
    
      lines: object;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV2.ManagerDevices {
      
  export class Capability  {
    

    
      id: string;
    
      uri: string;
    
      title: string;
    
      desc: string;
    
      type: string;
    
      getable: boolean;
    
      setable: boolean;
    
      chartType: string;
    
      decimals: number;
    
      min: number;
    
      max: number;
    
      step: number;
    
      units: string;
    
      values: Array<any>;
    

    
  }

  export class Device  {
    

    
      id: string;
    
      name: string;
    
      driverUri: string;
    
      driverId: string;
    
      zone: string;
    
      data: object;
    
      icon: string;
    
      iconObj: object;
    
      iconOverride: string | null;
    
      settings: object;
    
      settingsObj: boolean;
    
      class: string;
    
      energy: object;
    
      energyObj: object;
    
      virtualClass: string | null;
    
      ui: object;
    
      uiIndicator: string | null;
    
      capabilities: Array<any>;
    
      capabilitiesObj: object;
    
      capabilitiesOptions: object;
    
      flags: Array<any>;
    
      ready: boolean;
    
      available: boolean;
    
      repair: boolean;
    
      unpair: boolean;
    
      unavailableMessage: string;
    
      images: Array<any>;
    
      insights: Array<any>;
    
      color: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV2.ManagerDrivers {
      
  export class Driver  {
    

    
      id: string;
    
      uri: string;
    
      uriObj: object;
    
      icon: string;
    
      iconObj: object;
    
      ready: boolean;
    
      pair: boolean;
    
      unpair: boolean;
    
      repair: boolean;
    
      color: string;
    
      deprecated: boolean;
    
      class: string;
    
      connectivity: Array<any>;
    

    
  }

  export class PairSession  {
    

    
      id: string;
    
      type: string;
    
      driverId: string;
    
      driverUri: string;
    
      deviceId: string;
    
      zoneId: string;
    
      views: Array<any>;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV2.ManagerFlow {
      
  export class AdvancedFlow  {
    

    
      id: string;
    
      name: string;
    
      enabled: boolean;
    
      broken: boolean;
    
      triggerable: boolean;
    
      folder: string | null;
    
      cards: object;
    

    
  }

  export class Flow  {
    

    
      id: string;
    
      name: string;
    
      enabled: boolean;
    
      folder: string | null;
    
      order: number;
    
      broken: boolean;
    
      triggerable: boolean;
    
      trigger: object;
    
      conditions: Array<any>;
    
      actions: Array<any>;
    

    
  }

  export class FlowCardAction  {
    

    
      uri: string;
    
      id: string;
    
      args: object;
    
      deprecated: boolean;
    
      droptoken: boolean;
    
      duration: boolean;
    
      uriObj: object;
    
      broken: boolean;
    
      title: string;
    
      hint: string;
    
      highlight: boolean;
    
      tokens: Array<any>;
    

    
  }

  export class FlowCardCondition  {
    

    
      uri: string;
    
      id: string;
    
      args: object;
    
      deprecated: boolean;
    
      droptoken: boolean;
    
      duration: boolean;
    
      uriObj: object;
    
      broken: boolean;
    
      title: string;
    
      hint: string;
    
      highlight: boolean;
    

    
  }

  export class FlowCardTrigger  {
    

    
      uri: string;
    
      id: string;
    
      args: object;
    
      deprecated: boolean;
    
      droptoken: boolean;
    
      duration: boolean;
    
      uriObj: object;
    
      broken: boolean;
    
      title: string;
    
      hint: string;
    
      highlight: boolean;
    
      tokens: Array<any>;
    

    
  }

  export class FlowFolder  {
    

    
      id: string;
    
      name: string;
    
      order: number;
    
      parent: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV2.ManagerFlowToken {
      
  export class FlowToken  {
    

    
      uri: string;
    
      id: string;
    
      title: string;
    
      type: string;
    
      value: object;
    
      uriObj: object;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV2.ManagerImages {
      
  export class Image  {
    

    
      id: string;
    
      ownerUri: string;
    
      url: string;
    
      lastUpdated: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV2.ManagerInsights {
      
  export class Log  {
    

    
      uri: string;
    
      id: string;
    
      title: string;
    
      type: string;
    
      units: string;
    
      decimals: number;
    
      lastValue: number;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV2.ManagerLogic {
      
  export class Variable  {
    

    
      id: string;
    
      name: string;
    
      type: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV2.ManagerMoods {
      
  export class Mood  {
    

    
      id: string;
    
      name: string;
    
      zone: string;
    
      icon: string;
    
      devices: Array<any>;
    

    
  }

    }
  

  
    export namespace HomeyAPIV2.ManagerNotifications {
      
  export class Notification  {
    

    
      id: string;
    
      ownerUri: string;
    
      dateCreated: object;
    
      dateExpires: string;
    
      excerpt: string;
    
      icon: string;
    
      iconObj: object;
    
      priority: string;
    
      readBy: Array<any>;
    
      roles: Array<any>;
    
      meta: object;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV2.ManagerSessions {
      
  export class Session  {
    

    
      id: string;
    
      type: string;
    
      agent: string;
    
      clientName: string;
    
      scopes: Array<any>;
    
      intersectedScopes: Array<any>;
    
      createdAt: string;
    
      expiresAt: string;
    
      lastUsed: boolean;
    

    
  }

    }
  

  
    export namespace HomeyAPIV2.ManagerSpeechOutput {
      
  export class Voice  {
    

    
      id: string;
    
      name: string;
    
      language: string;
    
      locale: string;
    
      gender: string;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV2.ManagerUsers {
      
  export class User  {
    

    
      id: string;
    
      name: string;
    
      athomId: string;
    
      properties: object;
    
      enabled: boolean;
    
      verified: boolean;
    
      role: string;
    
      present: boolean;
    
      asleep: boolean;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV2.ManagerZones {
      
  export class Zone  {
    

    
      id: string;
    
      name: string;
    
      order: number;
    
      parent: string;
    
      active: boolean;
    
      icon: string;
    

    
  }

    }
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerApps {
      
  export class App  {
    

    
      id: string;
    

    
  }

  export class AppSettings  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerCloud {
      
  export class Webhook  {
    

    
      id: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerCron {
      
  export class Cronjob  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerDashboards {
      
  export class Dashboard  {
    

    
      id: string;
    
      name: string;
    
      widgets: object;
    
      lines: object;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerDevices {
      
  export class Capability  {
    

    
      id: string;
    

    
  }

  export class Device  {
    

    
      id: string;
    
      name: string;
    
      note: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerDrivers {
      
  export class Driver  {
    

    
      id: string;
    
      pair: Array<any>;
    

    
  }

  export class PairSession  {
    

    
      id: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerFlow {
      
  export class AdvancedFlow  {
    

    
      id: string;
    

    
  }

  export class Flow  {
    

    

    
  }

  export class FlowCardAction  {
    

    
      id: string;
    

    
  }

  export class FlowCardCondition  {
    

    
      id: string;
    

    
  }

  export class FlowCardTrigger  {
    

    
      id: string;
    

    
  }

  export class FlowFolder  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerFlowToken {
      
  export class FlowToken  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerIcons {
      
  export class Icon  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerImages {
      
  export class Image  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerInsights {
      
  export class Log  {
    

    
      id: string;
    

    
  }

  export class LogEntryBoolean  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerLogic {
      
  export class Variable  {
    

    
      id: string;
    
      name: string;
    
      type: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerNotifications {
      
  export class Notification  {
    

    
      id: string;
    
      ownerUri: string;
    
      dateCreated: string;
    
      excerpt: string;
    
      meta: object;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerRF {
      
  export class Signal  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerSessions {
      
  export class Session  {
    

    
      id: string;
    
      type: string;
    
      scopes: Array<any>;
    
      intersectedScopes: Array<any>;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Cloud.ManagerUsers {
      
  export class User  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Cloud.ManagerVirtualDevice {
      
  export class VirtualDeviceDummySocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceHomeyBridge  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceInfrared  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceZigbee  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceZwave  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverDummySocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverHomeyBridge  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverInfrared  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverZigbee  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverZwave  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV3Cloud.ManagerZones {
      
  export class Zone  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerAlarms {
      
  export class Alarm  {
    

    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerApps {
      
  export class App  {
    

    
      id: string;
    

    
  }

  export class AppSettings  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerCloud {
      
  export class Webhook  {
    

    
      id: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerCron {
      
  export class Cronjob  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerDashboards {
      
  export class Dashboard  {
    

    
      id: string;
    
      name: string;
    
      widgets: object;
    
      lines: object;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerDevices {
      
  export class Capability  {
    

    
      id: string;
    

    
  }

  export class Device  {
    

    
      id: string;
    
      name: string;
    
      note: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerDiscovery {
      
  export class DiscoveryStrategyMAC  {
    

    
      id: string;
    

    
  }

  export class DiscoveryStrategyMDNSSD  {
    

    
      id: string;
    

    
  }

  export class DiscoveryStrategySSDP  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerDrivers {
      
  export class Driver  {
    

    
      id: string;
    
      pair: Array<any>;
    

    
  }

  export class PairSession  {
    

    
      id: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerExperiments {
      
  export class ExperimentPowerUser  {
    

    
      id: string;
    

    
  }

  export class ExperimentSSH  {
    

    
      id: string;
    

    
  }

  export class ExperimentVirtualDevices  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerFlow {
      
  export class AdvancedFlow  {
    

    
      id: string;
    

    
  }

  export class Flow  {
    

    

    
  }

  export class FlowCardAction  {
    

    
      id: string;
    

    
  }

  export class FlowCardCondition  {
    

    
      id: string;
    

    
  }

  export class FlowCardTrigger  {
    

    
      id: string;
    

    
  }

  export class FlowFolder  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerFlowToken {
      
  export class FlowToken  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerIcons {
      
  export class Icon  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerImages {
      
  export class Image  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerInsights {
      
  export class Log  {
    

    
      id: string;
    

    
  }

  export class LogEntryBoolean  {
    

    
      id: string;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerLogic {
      
  export class Variable  {
    

    
      id: string;
    
      name: string;
    
      type: string;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Local.ManagerNotifications {
      
  export class Notification  {
    

    
      id: string;
    
      ownerUri: string;
    
      dateCreated: string;
    
      excerpt: string;
    
      meta: object;
    

    
  }

    }
  

  

  
    export namespace HomeyAPIV3Local.ManagerRF {
      
  export class Signal  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerSessions {
      
  export class Session  {
    

    
      id: string;
    
      type: string;
    
      scopes: Array<any>;
    
      intersectedScopes: Array<any>;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerUsers {
      
  export class User  {
    

    
      id: string;
    

    
  }

    }
  

  
    export namespace HomeyAPIV3Local.ManagerVirtualDevice {
      
  export class VirtualDeviceDummySocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceHomeyBridge  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceInfrared  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceVirtualButton  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceVirtualIPCamera  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceVirtualSocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceZigbee  {
    

    
      id: string;
    

    
  }

  export class VirtualDeviceZwave  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverDummySocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverHomeyBridge  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverInfrared  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverVirtualButton  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverVirtualIPCamera  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverVirtualSocket  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverZigbee  {
    

    
      id: string;
    

    
  }

  export class VirtualDriverZwave  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  
    export namespace HomeyAPIV3Local.ManagerZones {
      
  export class Zone  {
    

    
      id: string;
    

    
  }

    }
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
    export namespace HomeyAPI {
      
  export class HomeyAPIError extends APIError {
    

    
      description: string;
    
      stack: string;
    
      message: string;
    
      statusCode: number;
    

    
  }

  export class HomeyAPIErrorNotFound extends APIError {
    

    
      message: string;
    
      statusCode: number;
    

    
  }

    }
  

  

  

  
    export namespace HomeyAPIV3Cloud {
      
  export class Manager extends HomeyAPIV3.Manager {
    

    

    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerApi extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerApps extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getApps(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerApps.App>;
    
      getApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerApps.App>;
    
      installFromAppStore(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      channel: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      uninstallApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerApps.AppSettings>;
    
      getAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppStd(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      message: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerBLE extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerClock extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCloud extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      emitOAuth2Callback(
        
          
  
    
      opts: {
  
    
      app: string,
    
  
    
      token: string,
    
  
    
      code: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitWebhookCallback(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCoprocessor extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getBridges(
        
      ):
        Promise<any>;
    
      getLog(
        
      ):
        Promise<any>;
    
      pairBridge(
        
          
  
    
      opts: {
  
    
      serialHash: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCron extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDashboards extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDashboards(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDashboards.Dashboard>;
    
      getDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDashboards.Dashboard>;
    
      createDashboard(
        
          
  
    
      opts: {
  
    
      dashboard: {
  
    
      name: string,
    
  
    
      widgets: object,
    
  
    
      lines: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDashboards.Dashboard>;
    
      updateDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      dashboard: {
  
    
      name: string,
    
  
    
      widgets: object,
    
  
    
      lines: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDashboards.Dashboard>;
    
      deleteDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDatabase extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDevices extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDevices.Device>;
    
      getDeviceSettingsObj(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setDeviceSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      settings: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDevices(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDevices.Device>;
    
      updateDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      zone: string,
    
  
    
      note: string,
    
  
    
      iconOverride: string,
    
  
    
      virtualClass: string,
    
  
    
      uiIndicator: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDevices.Device>;
    
      deleteDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getCapabilityValue(
        
          
  
    
      opts: {
  
    
      capabilityId: string,
    
  
    
      deviceId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setCapabilityValue(
        
          
  
    
      opts: {
  
    
      capabilityId: string,
    
  
    
      deviceId: string,
    
  
    
      value: string | number | boolean,
    
  
    
      opts: object,
    
  
    
      transactionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDevkit extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      installApp(
        
          
  
    
      opts: {
  
    
      manifest: object,
    
  
    
      clean: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      uninstallApp(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDrivers extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDrivers(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDrivers.Driver>;
    
      getPairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDrivers.PairSession>;
    
      createPairSession(
        
          
  
    
      opts: {
  
    
      pairsession: {
  
    
      type: string,
    
  
    
      driverId: string,
    
  
    
      deviceId: string,
    
  
    
      zoneId: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerDrivers.PairSession>;
    
      deletePairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingHeartbeat(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingEvent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      event: string,
    
  
    
      data: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingCallback(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      callbackId: string,
    
  
    
      data: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createPairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      data: *,
    
  
    
      zone: string,
    
  
    
      store: object,
    
  
    
      capabilities: Array<any>,
    
  
    
      capabilitiesOptions: object,
    
  
    
      class: string,
    
  
    
      icon: string,
    
  
    
      iconOverride: string,
    
  
    
      settings: object,
    
  
    
      energy: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deletePairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerEnergy extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getLiveReport(
        
          
  
    
      opts: {
  
    
      zone: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerFlow extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;
    
      getFlows(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;
    
      createFlow(
        
          
  
    
      opts: {
  
    
      flow: {
  
    
      name: string,
    
  
    
      folder: string,
    
  
    
      enabled: boolean,
    
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;
    
      updateFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flow: {
  
    
      name: string,
    
  
    
      folder: string,
    
  
    
      enabled: boolean,
    
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.Flow>;
    
      deleteFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      testFlow(
        
          
  
    
      opts: {
  
    
      flow: {
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
    
      tokens: object,
    
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      triggerFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      shareFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowFolders(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;
    
      getFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;
    
      createFlowFolder(
        
          
  
    
      opts: {
  
    
      flowfolder: {
  
    
      name: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;
    
      updateFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flowfolder: {
  
    
      name: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowFolder>;
    
      deleteFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardTriggers(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardTrigger>;
    
      getFlowCardConditions(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardCondition>;
    
      runFlowCardCondition(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      args: object,
    
  
    
      tokens: object,
    
  
    
      state: object,
    
  
    
      droptoken: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardActions(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.FlowCardAction>;
    
      runFlowCardAction(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      args: object,
    
  
    
      tokens: object,
    
  
    
      state: object,
    
  
    
      droptoken: string,
    
  
    
      duration: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardAutocomplete(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      type: string,
    
  
    
      name: string,
    
  
    
      query: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;
    
      getAdvancedFlows(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;
    
      createAdvancedFlow(
        
          
  
    
      opts: {
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;
    
      updateAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlow.AdvancedFlow>;
    
      deleteAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      triggerAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerFlowToken extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getFlowTokens(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerFlowToken.FlowToken>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerGeolocation extends HomeyAPIV3Cloud.Manager {
    

    

    
      getOptionAddress(
        
      ):
        Promise<any>;
    
      setOptionAddress(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAddress(
        
      ):
        Promise<any>;
    
      getOptionLocation(
        
      ):
        Promise<any>;
    
      setOptionLocation(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLocation(
        
      ):
        Promise<any>;
    
      getOptionMode(
        
      ):
        Promise<any>;
    
      setOptionMode(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionMode(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerI18n extends HomeyAPIV3Cloud.Manager {
    

    

    
      getOptionLanguage(
        
      ):
        Promise<any>;
    
      setOptionLanguage(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLanguage(
        
      ):
        Promise<any>;
    
      getOptionUnits(
        
      ):
        Promise<any>;
    
      setOptionUnits(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionUnits(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerIcons extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerImages extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getImages(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerImages.Image>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerInsights extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerInsights.Log>;
    
      getLogs(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerInsights.Log>;
    
      getLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      resolution: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerLogic extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getVariables(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;
    
      createVariable(
        
          
  
    
      opts: {
  
    
      variable: {
  
    
      name: string,
    
  
    
      type: string,
    
  
    
      value: string | number | boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;
    
      updateVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      variable: {
  
    
      name: string,
    
  
    
      value: string | number | boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerLogic.Variable>;
    
      deleteVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerMobile extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      onMobileEvent(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
    
      userId: string,
    
  
    
      deviceId: string,
    
  
    
      event: string,
    
  
    
      data: *,
    
  
    
      timestamp: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerNotifications extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getNotifications(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerNotifications.Notification>;
    
      deleteNotification(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteNotifications(
        
          
  
    
      opts: {
  
    
      ownerUri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getOwners(
        
      ):
        Promise<any>;
    
      setOwnerEnabled(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      enabled: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setOwnerPush(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      push: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerPremium extends HomeyAPIV3Cloud.Manager {
    

    

    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerPresence extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      setPresentMe(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
    
      opts: {
  
    
      forceFlowTrigger: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setPresent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAsleepMe(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
    
      opts: {
  
    
      forceFlowTrigger: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAsleep(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerRF extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      record(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      timeout: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      replay(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      data: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emulate(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      data: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      set433MHzConfig(
        
          
  
    
      opts: {
  
    
      modulation: string,
    
  
    
      carrier: number,
    
  
    
      deviation: number,
    
  
    
      channelSpacing: number,
    
  
    
      filterBandwidth: number,
    
  
    
      baudrate: number,
    
  
    
      power: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      txInfraredProntohex(
        
          
  
    
      opts: {
  
    
      payload: string,
    
  
    
      repetitions: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSafety extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSecurity extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSessions extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getSessionMe(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSystem extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      ping(
        
      ):
        Promise<any>;
    
      getInfo(
        
      ):
        Promise<any>;
    
      getSystemName(
        
      ):
        Promise<any>;
    
      setSystemName(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      reboot(
        
      ):
        Promise<any>;
    
      sendLog(
        
          
  
    
      opts: {
  
    
      append: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      delete(
        
      ):
        Promise<any>;
    
      getMemoryInfo(
        
      ):
        Promise<any>;
    
      getStorageInfo(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerUsers extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      login(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUserMe(
        
      ):
        Promise<any>;
    
      updateUserMe(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMe(
        
      ):
        Promise<any>;
    
      getUsers(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerUsers.User>;
    
      getUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerUsers.User>;
    
      createUser(
        
          
  
    
      opts: {
  
    
      user: {
  
    
      role: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerUsers.User>;
    
      updateUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      user: {
  
    
      role: string,
    
  
    
      enabled: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerUsers.User>;
    
      deleteUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      acceptSharingInvite(
        
          
  
    
      opts: {
  
    
      secret: string,
    
  
    
      athomId: string,
    
  
    
      inviteToken: string,
    
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerVirtualDevice extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerWeather extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getWeather(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerWebserver extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZigbee extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZones extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getZones(
        
      ):
        Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;
    
      createZone(
        
          
  
    
      opts: {
  
    
      zone: {
  
    
      name: string,
    
  
    
      icon: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;
    
      updateZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      zone: {
  
    
      name: string,
    
  
    
      icon: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Cloud.ManagerZones.Zone>;
    
      deleteZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZwave extends HomeyAPIV3Cloud.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

    }
  

  

  

  

  

  
    export namespace HomeyAPIV2 {
      
  export class Manager  {
    

    

    
  }

  export class ManagerAlarms extends HomeyAPIV2.Manager {
    

    

    
      deleteAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      alarm: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerAlarms.Alarm>;
    
      createAlarm(
        
          
  
    
      opts: {
  
    
      alarm: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerAlarms.Alarm>;
    
      getAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerAlarms.Alarm>;
    
      getAlarms(
        
      ):
        Promise<HomeyAPIV2.ManagerAlarms.Alarm>;
    
  }

  export class ManagerApps extends HomeyAPIV2.Manager {
    

    

    
      uninstallApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      purgeSettings: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      installFromAppStore(
        
          
  
    
      opts: {
  
    
      channel: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppLocales(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      disableApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      enableApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      garbageCollectApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      restartApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppStd(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      message: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      app: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerApps.App>;
    
      getApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerApps.App>;
    
      getApps(
        
      ):
        Promise<HomeyAPIV2.ManagerApps.App>;
    
  }

  export class ManagerAudio extends HomeyAPIV2.Manager {
    

    

    
      getOptionVolume(
        
      ):
        Promise<any>;
    
      setOptionVolume(
        
          
  
    
      opts: {
  
    
      value: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionVolume(
        
      ):
        Promise<any>;
    
      playVolumeHint(
        
      ):
        Promise<any>;
    
  }

  export class ManagerBackup extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getOptionAutomaticBackupsEnabled(
        
      ):
        Promise<any>;
    
      setOptionAutomaticBackupsEnabled(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAutomaticBackupsEnabled(
        
      ):
        Promise<any>;
    
      getOptionLastSuccessfulBackup(
        
      ):
        Promise<any>;
    
      setOptionLastSuccessfulBackup(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLastSuccessfulBackup(
        
      ):
        Promise<any>;
    
      scheduleBackup(
        
      ):
        Promise<any>;
    
  }

  export class ManagerBLE extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      opts: object,
    
  
    
      command: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerCloud extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
  }

  export class ManagerCoprocessor extends HomeyAPIV2.Manager {
    

    

    
      setConfig(
        
          
  
    
      opts: {
  
    
      deviceId: string,
    
  
    
      config: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setModulation(
        
          
  
    
      opts: {
  
    
      deviceId: string,
    
  
    
      baudRate: number,
    
  
    
      channelSpacing: number,
    
  
    
      channelDeviation: number,
    
  
    
      carrier: number,
    
  
    
      type: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerDashboards extends HomeyAPIV2.Manager {
    

    

    
      deleteDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      dashboard: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDashboards.Dashboard>;
    
      createDashboard(
        
          
  
    
      opts: {
  
    
      dashboard: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDashboards.Dashboard>;
    
      getDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDashboards.Dashboard>;
    
      getDashboards(
        
      ):
        Promise<HomeyAPIV2.ManagerDashboards.Dashboard>;
    
  }

  export class ManagerDatabase extends HomeyAPIV2.Manager {
    

    

    
      optimize(
        
      ):
        Promise<any>;
    
  }

  export class ManagerDevices extends HomeyAPIV2.Manager {
    

    

    
      getCapability(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDevices.Capability>;
    
      getCapabilities(
        
      ):
        Promise<HomeyAPIV2.ManagerDevices.Capability>;
    
      setDeviceSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      settings: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDeviceSettingsObj(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setCapabilityValue(
        
          
  
    
      opts: {
  
    
      capabilityId: string,
    
  
    
      deviceId: string,
    
  
    
      transactionId: *,
    
  
    
      opts: *,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDevices.Device>;
    
      getDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDevices.Device>;
    
      getDevices(
        
      ):
        Promise<HomeyAPIV2.ManagerDevices.Device>;
    
  }

  export class ManagerDevkit extends HomeyAPIV2.Manager {
    

    

    
      getAppStdOut(
        
          
  
    
      opts: {
  
    
      session: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppUsage(
        
      ):
        Promise<any>;
    
      setUsbMode(
        
          
  
    
      opts: {
  
    
      os: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUsbMode(
        
      ):
        Promise<any>;
    
      stopApp(
        
          
  
    
      opts: {
  
    
      session: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      runApp(
        
          
  
    
      opts: {
  
    
      purgeSettings: string,
    
  
    
      env: string,
    
  
    
      debug: string,
    
  
    
      app: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      stopLedringAnimation(
        
          
  
    
      opts: {
  
    
      animation_id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      startLedringAnimation(
        
          
  
    
      opts: {
  
    
      animation: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerDrivers extends HomeyAPIV2.Manager {
    

    

    
      deletePairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createPairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deletePairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingHeartbeat(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingCallback(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      data: object,
    
  
    
      callbackId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingEvent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      data: *,
    
  
    
      event: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createPairSession(
        
          
  
    
      opts: {
  
    
      pairsession: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDrivers.PairSession>;
    
      getPairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDrivers.PairSession>;
    
      getPairSessions(
        
      ):
        Promise<HomeyAPIV2.ManagerDrivers.PairSession>;
    
      getDriver(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerDrivers.Driver>;
    
      getDrivers(
        
      ):
        Promise<HomeyAPIV2.ManagerDrivers.Driver>;
    
  }

  export class ManagerEnergy extends HomeyAPIV2.Manager {
    

    

    
      getOptionKWhCost(
        
      ):
        Promise<any>;
    
      setOptionKWhCost(
        
          
  
    
      opts: {
  
    
      value: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionKWhCost(
        
      ):
        Promise<any>;
    
      getOptionCurrency(
        
      ):
        Promise<any>;
    
      setOptionCurrency(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionCurrency(
        
      ):
        Promise<any>;
    
      getLiveReport(
        
          
  
    
      opts: {
  
    
      zone: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerExperiments extends HomeyAPIV2.Manager {
    

    

    
      disableExperiment(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      enableExperiment(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getExperiments(
        
      ):
        Promise<any>;
    
  }

  export class ManagerFlow extends HomeyAPIV2.Manager {
    

    

    
      triggerAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      state: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.AdvancedFlow>;
    
      createAdvancedFlow(
        
          
  
    
      opts: {
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.AdvancedFlow>;
    
      getAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.AdvancedFlow>;
    
      getAdvancedFlows(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.AdvancedFlow>;
    
      deleteFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flowfolder: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowFolder>;
    
      createFlowFolder(
        
          
  
    
      opts: {
  
    
      flowfolder: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowFolder>;
    
      getFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowFolder>;
    
      getFlowFolders(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowFolder>;
    
      triggerFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      state: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      testFlow(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
    
      tokens: object,
    
  
    
      flow: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.Flow>;
    
      createFlow(
        
          
  
    
      opts: {
  
    
      flow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.Flow>;
    
      shareFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.Flow>;
    
      getFlows(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.Flow>;
    
      getFlowCardAutocomplete(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      type: string,
    
  
    
      args: string,
    
  
    
      query: string,
    
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      runFlowCardAction(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      duration: number,
    
  
    
      tokens: object,
    
  
    
      droptoken: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardAction(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardAction>;
    
      getFlowCardActions(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardAction>;
    
      runFlowCardCondition(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      tokens: object,
    
  
    
      droptoken: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardCondition(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardCondition>;
    
      getFlowCardConditions(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardCondition>;
    
      getFlowCardTrigger(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardTrigger>;
    
      getFlowCardTriggers(
        
      ):
        Promise<HomeyAPIV2.ManagerFlow.FlowCardTrigger>;
    
  }

  export class ManagerFlowToken extends HomeyAPIV2.Manager {
    

    

    
      getFlowToken(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerFlowToken.FlowToken>;
    
      getFlowTokens(
        
      ):
        Promise<HomeyAPIV2.ManagerFlowToken.FlowToken>;
    
  }

  export class ManagerGeolocation extends HomeyAPIV2.Manager {
    

    

    
      getOptionMode(
        
      ):
        Promise<any>;
    
      setOptionMode(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionMode(
        
      ):
        Promise<any>;
    
      getOptionLocation(
        
      ):
        Promise<any>;
    
      setOptionLocation(
        
          
  
    
      opts: {
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLocation(
        
      ):
        Promise<any>;
    
  }

  export class ManagerGoogleAssistant extends HomeyAPIV2.Manager {
    

    

    
      getOptionEnabled(
        
      ):
        Promise<any>;
    
      setOptionEnabled(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionEnabled(
        
      ):
        Promise<any>;
    
      sync(
        
      ):
        Promise<any>;
    
  }

  export class ManagerI18n extends HomeyAPIV2.Manager {
    

    

    
      getOptionLanguage(
        
      ):
        Promise<any>;
    
      setOptionLanguage(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLanguage(
        
      ):
        Promise<any>;
    
      getOptionUnits(
        
      ):
        Promise<any>;
    
      setOptionUnits(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionUnits(
        
      ):
        Promise<any>;
    
  }

  export class ManagerImages extends HomeyAPIV2.Manager {
    

    

    
      getImage(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerImages.Image>;
    
      getImages(
        
      ):
        Promise<HomeyAPIV2.ManagerImages.Image>;
    
  }

  export class ManagerInsights extends HomeyAPIV2.Manager {
    

    

    
      getStorageInfo(
        
      ):
        Promise<any>;
    
      deleteLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      resolution: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteLogs(
        
      ):
        Promise<any>;
    
      deleteLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      log: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerInsights.Log>;
    
      getLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerInsights.Log>;
    
      getLogs(
        
      ):
        Promise<HomeyAPIV2.ManagerInsights.Log>;
    
  }

  export class ManagerLedring extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getOptionBrightness(
        
      ):
        Promise<any>;
    
      setOptionBrightness(
        
          
  
    
      opts: {
  
    
      value: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionBrightness(
        
      ):
        Promise<any>;
    
      getOptionScreensaver(
        
      ):
        Promise<any>;
    
      setOptionScreensaver(
        
          
  
    
      opts: {
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionScreensaver(
        
      ):
        Promise<any>;
    
      getScreensavers(
        
      ):
        Promise<any>;
    
  }

  export class ManagerLogic extends HomeyAPIV2.Manager {
    

    

    
      triggerWebhook(
        
          
  
    
      opts: {
  
    
      event: string,
    
  
    
      tag: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      variable: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerLogic.Variable>;
    
      createVariable(
        
          
  
    
      opts: {
  
    
      variable: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerLogic.Variable>;
    
      getVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerLogic.Variable>;
    
      getVariables(
        
      ):
        Promise<HomeyAPIV2.ManagerLogic.Variable>;
    
  }

  export class ManagerMobile extends HomeyAPIV2.Manager {
    

    

    
      getSummary(
        
      ):
        Promise<any>;
    
  }

  export class ManagerMoods extends HomeyAPIV2.Manager {
    

    

    
      triggerMood(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      state: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteMood(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateMood(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      mood: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerMoods.Mood>;
    
      createMood(
        
          
  
    
      opts: {
  
    
      mood: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerMoods.Mood>;
    
      getMood(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerMoods.Mood>;
    
      getMoods(
        
      ):
        Promise<HomeyAPIV2.ManagerMoods.Mood>;
    
  }

  export class ManagerNotifications extends HomeyAPIV2.Manager {
    

    

    
      setOwnerPush(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      push: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setOwnerEnabled(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      enabled: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getOwners(
        
      ):
        Promise<any>;
    
      deleteNotifications(
        
          
  
    
      opts: {
  
    
      ownerUri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteNotification(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setNotificationRead(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getNotification(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerNotifications.Notification>;
    
      getNotifications(
        
      ):
        Promise<HomeyAPIV2.ManagerNotifications.Notification>;
    
  }

  export class ManagerPresence extends HomeyAPIV2.Manager {
    

    

    
      setAsleep(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAsleepMe(
        
          
  
    
      opts: {
  
    
      opts: *,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAsleep(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setPresent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setPresentMe(
        
          
  
    
      opts: {
  
    
      opts: *,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getPresent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerReports extends HomeyAPIV2.Manager {
    

    

    
      getMonthlyReportSummary(
        
      ):
        Promise<any>;
    
      getMonthlyReport(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerRF extends HomeyAPIV2.Manager {
    

    

    
      txInfraredProntohex(
        
          
  
    
      opts: {
  
    
      repetitions: number,
    
  
    
      payload: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emulate(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      data: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      record(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      timeout: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerSessions extends HomeyAPIV2.Manager {
    

    

    
      deleteSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSessionMe(
        
      ):
        Promise<any>;
    
      getSessions(
        
      ):
        Promise<HomeyAPIV2.ManagerSessions.Session>;
    
  }

  export class ManagerSpeechOutput extends HomeyAPIV2.Manager {
    

    

    
      getOptionSpeed(
        
      ):
        Promise<any>;
    
      setOptionSpeed(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionSpeed(
        
      ):
        Promise<any>;
    
      getOptionVoice(
        
      ):
        Promise<any>;
    
      setOptionVoice(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionVoice(
        
      ):
        Promise<any>;
    
      playVoiceSample(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      uninstallVoice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      installVoice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getVoice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerSpeechOutput.Voice>;
    
      getVoices(
        
      ):
        Promise<HomeyAPIV2.ManagerSpeechOutput.Voice>;
    
      say(
        
          
  
    
      opts: {
  
    
      synthesize: boolean,
    
  
    
      timeout: number,
    
  
    
      session: string,
    
  
    
      text: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerSystem extends HomeyAPIV2.Manager {
    

    

    
      setDebug(
        
          
  
    
      opts: {
  
    
      mask: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      ping(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      rebootRecovery(
        
      ):
        Promise<any>;
    
      reboot(
        
      ):
        Promise<any>;
    
      runGC(
        
      ):
        Promise<any>;
    
      stopCPUProfile(
        
      ):
        Promise<any>;
    
      startCPUProfile(
        
      ):
        Promise<any>;
    
      createHeapdump(
        
      ):
        Promise<any>;
    
      sendLog(
        
          
  
    
      opts: {
  
    
      append: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getMemoryInfo(
        
      ):
        Promise<any>;
    
      getStorageInfo(
        
      ):
        Promise<any>;
    
      setSystemName(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getSystemName(
        
      ):
        Promise<any>;
    
      getInfo(
        
      ):
        Promise<any>;
    
  }

  export class ManagerUpdates extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getOptionChannel(
        
      ):
        Promise<any>;
    
      setOptionChannel(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionChannel(
        
      ):
        Promise<any>;
    
      getOptionAutoupdate(
        
      ):
        Promise<any>;
    
      setOptionAutoupdate(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAutoupdate(
        
      ):
        Promise<any>;
    
      getOptionForceChannel(
        
      ):
        Promise<any>;
    
      setOptionForceChannel(
        
          
  
    
      opts: {
  
    
      value: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionForceChannel(
        
      ):
        Promise<any>;
    
      getOptionUpdateNotifications(
        
      ):
        Promise<any>;
    
      setOptionUpdateNotifications(
        
          
  
    
      opts: {
  
    
      value: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionUpdateNotifications(
        
      ):
        Promise<any>;
    
      runHotfixSQL(
        
      ):
        Promise<any>;
    
      runHotfixJavaScript(
        
      ):
        Promise<any>;
    
      runHotfixShell(
        
      ):
        Promise<any>;
    
      installUpdate(
        
      ):
        Promise<any>;
    
      getUpdates(
        
          
  
    
      opts: {
  
    
      flags: string,
    
  
    
      cache: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setWhatsNewRead(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getWhatsNew(
        
      ):
        Promise<any>;
    
  }

  export class ManagerUsers extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      swapOwner(
        
          
  
    
      opts: {
  
    
      newOwnerUserId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMe(
        
      ):
        Promise<any>;
    
      updateUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      user: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerUsers.User>;
    
      updateUserMe(
        
          
  
    
      opts: {
  
    
      email: *,
    
  
    
      name: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createUser(
        
          
  
    
      opts: {
  
    
      user: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerUsers.User>;
    
      getUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerUsers.User>;
    
      getUserMe(
        
      ):
        Promise<any>;
    
      getUsers(
        
      ):
        Promise<HomeyAPIV2.ManagerUsers.User>;
    
      login(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerWeather extends HomeyAPIV2.Manager {
    

    

    
      getWeather(
        
      ):
        Promise<any>;
    
  }

  export class ManagerZigBee extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      opts: object,
    
  
    
      command: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

  export class ManagerZones extends HomeyAPIV2.Manager {
    

    

    
      deleteZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      zone: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerZones.Zone>;
    
      createZone(
        
          
  
    
      opts: {
  
    
      zone: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerZones.Zone>;
    
      getZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV2.ManagerZones.Zone>;
    
      getZones(
        
      ):
        Promise<HomeyAPIV2.ManagerZones.Zone>;
    
  }

  export class ManagerZwave extends HomeyAPIV2.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      updateRegion(
        
          
  
    
      opts: {
  
    
      region: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getLog(
        
      ):
        Promise<any>;
    
      setLogEnabled(
        
          
  
    
      opts: {
  
    
      enabled: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      opts: object,
    
  
    
      command: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
  }

    }
  

  
    export namespace HomeyAPIV3 {
      
  export class Manager  {
    

    

    
      isConnected(
        
          
  

        
      ):
        Boolean;
    
      connect(
        
          
  

        
      ):
        Promise<void>;
    
      disconnect(
        
          
  

        
      ):
        Promise<void>;
    
  }

    }
  

  
    export namespace HomeyAPIV3Local {
      
  export class Manager extends HomeyAPIV3.Manager {
    

    

    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerAlarms extends HomeyAPIV3Local.Manager {
    

    

    
      getAlarms(
        
      ):
        Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;
    
      getAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;
    
      createAlarm(
        
          
  
    
      opts: {
  
    
      alarm: {
  
    
      name: string,
    
  
    
      time: string,
    
  
    
      enabled: boolean,
    
  
    
      repetition: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;
    
      updateAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      alarm: {
  
    
      name: string,
    
  
    
      time: string,
    
  
    
      enabled: boolean,
    
  
    
      repetition: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerAlarms.Alarm>;
    
      deleteAlarm(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerApi extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerApps extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getApps(
        
      ):
        Promise<HomeyAPIV3Local.ManagerApps.App>;
    
      getApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerApps.App>;
    
      installFromAppStore(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      channel: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      uninstallApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerApps.AppSettings>;
    
      getAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetAppSetting(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppStd(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      message: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      app: {
  
    
      autoupdate: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerApps.App>;
    
      enableApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      disableApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      restartApp(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppLocales(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerArp extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerBackup extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionAutomaticBackupsEnabled(
        
      ):
        Promise<any>;
    
      setOptionAutomaticBackupsEnabled(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAutomaticBackupsEnabled(
        
      ):
        Promise<any>;
    
      getOptionLastSuccessfulBackup(
        
      ):
        Promise<any>;
    
      setOptionLastSuccessfulBackup(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLastSuccessfulBackup(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      scheduleBackup(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerBLE extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerClock extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCloud extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCoprocessor extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getBridges(
        
      ):
        Promise<any>;
    
      pairBridge(
        
          
  
    
      opts: {
  
    
      serialHash: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerCron extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDashboards extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDashboards(
        
      ):
        Promise<HomeyAPIV3Local.ManagerDashboards.Dashboard>;
    
      getDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDashboards.Dashboard>;
    
      createDashboard(
        
          
  
    
      opts: {
  
    
      dashboard: {
  
    
      name: string,
    
  
    
      widgets: object,
    
  
    
      lines: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDashboards.Dashboard>;
    
      updateDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      dashboard: {
  
    
      name: string,
    
  
    
      widgets: object,
    
  
    
      lines: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDashboards.Dashboard>;
    
      deleteDashboard(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDatabase extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDevices extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDevices.Device>;
    
      getDeviceSettingsObj(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setDeviceSettings(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      settings: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getDevices(
        
      ):
        Promise<HomeyAPIV3Local.ManagerDevices.Device>;
    
      updateDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      zone: string,
    
  
    
      note: string,
    
  
    
      iconOverride: string,
    
  
    
      virtualClass: string,
    
  
    
      uiIndicator: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDevices.Device>;
    
      deleteDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getCapabilityValue(
        
          
  
    
      opts: {
  
    
      capabilityId: string,
    
  
    
      deviceId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setCapabilityValue(
        
          
  
    
      opts: {
  
    
      capabilityId: string,
    
  
    
      deviceId: string,
    
  
    
      value: string | number | boolean,
    
  
    
      opts: object,
    
  
    
      transactionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDevkit extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      installApp(
        
          
  
    
      opts: {
  
    
      manifest: object,
    
  
    
      clean: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      uninstallApp(
        
          
  
    
      opts: {
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      runApp(
        
          
  
    
      opts: {
  
    
      debug: string,
    
  
    
      env: string,
    
  
    
      purgeSettings: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      stopApp(
        
          
  
    
      opts: {
  
    
      session: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAppStdOut(
        
          
  
    
      opts: {
  
    
      session: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDiscovery extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerDrivers extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getDrivers(
        
      ):
        Promise<HomeyAPIV3Local.ManagerDrivers.Driver>;
    
      getPairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDrivers.PairSession>;
    
      createPairSession(
        
          
  
    
      opts: {
  
    
      pairsession: {
  
    
      type: string,
    
  
    
      driverId: string,
    
  
    
      deviceId: string,
    
  
    
      zoneId: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerDrivers.PairSession>;
    
      deletePairSession(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingHeartbeat(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingEvent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      event: string,
    
  
    
      data: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emitPairingCallback(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      callbackId: string,
    
  
    
      data: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      createPairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      device: {
  
    
      name: string,
    
  
    
      data: *,
    
  
    
      zone: string,
    
  
    
      store: object,
    
  
    
      capabilities: Array<any>,
    
  
    
      capabilitiesOptions: object,
    
  
    
      class: string,
    
  
    
      icon: string,
    
  
    
      iconOverride: string,
    
  
    
      settings: object,
    
  
    
      energy: object,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deletePairSessionDevice(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerEnergy extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getLiveReport(
        
          
  
    
      opts: {
  
    
      zone: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerExperiments extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getExperiments(
        
      ):
        Promise<any>;
    
      enableExperiment(
        
          
  
    
      opts: {
  
    
      experimentId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      disableExperiment(
        
          
  
    
      opts: {
  
    
      experimentId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerFlow extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.Flow>;
    
      getFlows(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.Flow>;
    
      createFlow(
        
          
  
    
      opts: {
  
    
      flow: {
  
    
      name: string,
    
  
    
      folder: string,
    
  
    
      enabled: boolean,
    
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.Flow>;
    
      updateFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flow: {
  
    
      name: string,
    
  
    
      folder: string,
    
  
    
      enabled: boolean,
    
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.Flow>;
    
      deleteFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      testFlow(
        
          
  
    
      opts: {
  
    
      flow: {
  
    
      trigger: object,
    
  
    
      conditions: Array<any>,
    
  
    
      actions: Array<any>,
    
  
},
    
  
    
      tokens: object,
    
  
    
      sessionId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      triggerFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      shareFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowFolders(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;
    
      getFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;
    
      createFlowFolder(
        
          
  
    
      opts: {
  
    
      flowfolder: {
  
    
      name: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;
    
      updateFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      flowfolder: {
  
    
      name: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowFolder>;
    
      deleteFlowFolder(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardTrigger(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardTrigger>;
    
      getFlowCardTriggers(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardTrigger>;
    
      getFlowCardCondition(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardCondition>;
    
      getFlowCardConditions(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardCondition>;
    
      runFlowCardCondition(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      args: object,
    
  
    
      tokens: object,
    
  
    
      state: object,
    
  
    
      droptoken: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardAction(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardAction>;
    
      getFlowCardActions(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.FlowCardAction>;
    
      runFlowCardAction(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      args: object,
    
  
    
      tokens: object,
    
  
    
      state: object,
    
  
    
      droptoken: string,
    
  
    
      duration: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getFlowCardAutocomplete(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      type: string,
    
  
    
      name: string,
    
  
    
      query: string,
    
  
    
      args: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;
    
      getAdvancedFlows(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;
    
      createAdvancedFlow(
        
          
  
    
      opts: {
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;
    
      updateAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      advancedflow: *,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlow.AdvancedFlow>;
    
      deleteAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      triggerAdvancedFlow(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerFlowToken extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getFlowTokens(
        
      ):
        Promise<HomeyAPIV3Local.ManagerFlowToken.FlowToken>;
    
      getFlowToken(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerFlowToken.FlowToken>;
    
      getFlowTokenValue(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerGeolocation extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionAddress(
        
      ):
        Promise<any>;
    
      setOptionAddress(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAddress(
        
      ):
        Promise<any>;
    
      getOptionLocation(
        
      ):
        Promise<any>;
    
      setOptionLocation(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLocation(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerGoogleAssistant extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionEnabled(
        
      ):
        Promise<any>;
    
      setOptionEnabled(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionEnabled(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      sync(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerI18n extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionLanguage(
        
      ):
        Promise<any>;
    
      setOptionLanguage(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionLanguage(
        
      ):
        Promise<any>;
    
      getOptionUnits(
        
      ):
        Promise<any>;
    
      setOptionUnits(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionUnits(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerIcons extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerImages extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getImages(
        
      ):
        Promise<HomeyAPIV3Local.ManagerImages.Image>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerInsights extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerInsights.Log>;
    
      getLogs(
        
      ):
        Promise<HomeyAPIV3Local.ManagerInsights.Log>;
    
      getLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
    
      resolution: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteLog(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteLogEntries(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      uri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerLedring extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionScreensaver(
        
      ):
        Promise<any>;
    
      setOptionScreensaver(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionScreensaver(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      getScreensavers(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerLogic extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getVariables(
        
      ):
        Promise<HomeyAPIV3Local.ManagerLogic.Variable>;
    
      createVariable(
        
          
  
    
      opts: {
  
    
      variable: {
  
    
      name: string,
    
  
    
      type: string,
    
  
    
      value: string | number | boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerLogic.Variable>;
    
      updateVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      variable: {
  
    
      name: string,
    
  
    
      value: string | number | boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerLogic.Variable>;
    
      deleteVariable(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerMatter extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerMobile extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerNotifications extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getNotifications(
        
      ):
        Promise<HomeyAPIV3Local.ManagerNotifications.Notification>;
    
      deleteNotification(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteNotifications(
        
          
  
    
      opts: {
  
    
      ownerUri: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getOwners(
        
      ):
        Promise<any>;
    
      setOwnerEnabled(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      enabled: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setOwnerPush(
        
          
  
    
      opts: {
  
    
      uri: string,
    
  
    
      push: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerPresence extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      setPresentMe(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
    
      opts: {
  
    
      forceFlowTrigger: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setPresent(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAsleepMe(
        
          
  
    
      opts: {
  
    
      value: boolean,
    
  
    
      opts: {
  
    
      forceFlowTrigger: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<any>;
    
      setAsleep(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerRF extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      record(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      timeout: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      replay(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      data: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      emulate(
        
          
  
    
      opts: {
  
    
      frequency: string,
    
  
    
      data: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      set433MHzConfig(
        
          
  
    
      opts: {
  
    
      modulation: string,
    
  
    
      carrier: number,
    
  
    
      deviation: number,
    
  
    
      channelSpacing: number,
    
  
    
      filterBandwidth: number,
    
  
    
      baudrate: number,
    
  
    
      power: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      txInfraredProntohex(
        
          
  
    
      opts: {
  
    
      payload: string,
    
  
    
      repetitions: number,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSafety extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSatellites extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSecurity extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSessions extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getSessionMe(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerSystem extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionForwardedPort(
        
      ):
        Promise<any>;
    
      setOptionForwardedPort(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionForwardedPort(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      ping(
        
      ):
        Promise<any>;
    
      getInfo(
        
      ):
        Promise<any>;
    
      getSystemName(
        
      ):
        Promise<any>;
    
      setSystemName(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      reboot(
        
      ):
        Promise<any>;
    
      sendLog(
        
          
  
    
      opts: {
  
    
      append: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getMemoryInfo(
        
      ):
        Promise<any>;
    
      getStorageInfo(
        
      ):
        Promise<any>;
    
      rebootOTA(
        
      ):
        Promise<any>;
    
      setDebug(
        
          
  
    
      opts: {
  
    
      namespace: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerThread extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerUpdates extends HomeyAPIV3Local.Manager {
    

    

    
      getOptionChannel(
        
      ):
        Promise<any>;
    
      setOptionChannel(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionChannel(
        
      ):
        Promise<any>;
    
      getOptionAutoupdate(
        
      ):
        Promise<any>;
    
      setOptionAutoupdate(
        
          
  
    
      opts: {
  
    
      value: *,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      unsetOptionAutoupdate(
        
      ):
        Promise<any>;
    
      getState(
        
      ):
        Promise<any>;
    
      getUpdates(
        
      ):
        Promise<any>;
    
      installUpdate(
        
          
  
    
      opts: {
  
    
      reboot: boolean,
    
  
    
      silent: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      abortInstallUpdate(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerUsers extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      login(
        
          
  
    
      opts: {
  
    
      token: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getUserMe(
        
      ):
        Promise<any>;
    
      updateUserMe(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMe(
        
      ):
        Promise<any>;
    
      getUsers(
        
      ):
        Promise<HomeyAPIV3Local.ManagerUsers.User>;
    
      getUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerUsers.User>;
    
      createUser(
        
          
  
    
      opts: {
  
    
      user: {
  
    
      role: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerUsers.User>;
    
      updateUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      user: {
  
    
      role: string,
    
  
    
      enabled: boolean,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerUsers.User>;
    
      deleteUser(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      updateUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      value: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deleteUserMeProperties(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      swapOwner(
        
          
  
    
      opts: {
  
    
      newOwnerUserId: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      getPersonalAccessTokens(
        
      ):
        Promise<any>;
    
      createPersonalAccessToken(
        
          
  
    
      opts: {
  
    
      name: string,
    
  
    
      scopes: Array<any>,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      deletePersonalAccessToken(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerVirtualDevice extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerWeather extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getWeather(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerWebserver extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZigbee extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      flashFirmware(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZones extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      getZones(
        
      ):
        Promise<HomeyAPIV3Local.ManagerZones.Zone>;
    
      getZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerZones.Zone>;
    
      createZone(
        
          
  
    
      opts: {
  
    
      zone: {
  
    
      name: string,
    
  
    
      icon: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerZones.Zone>;
    
      updateZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
    
      zone: {
  
    
      name: string,
    
  
    
      icon: string,
    
  
    
      parent: string,
    
  
},
    
  
},
    
  

        
      ):
        Promise<HomeyAPIV3Local.ManagerZones.Zone>;
    
      deleteZone(
        
          
  
    
      opts: {
  
    
      id: string,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

  export class ManagerZwave extends HomeyAPIV3Local.Manager {
    

    

    
      getState(
        
      ):
        Promise<any>;
    
      runCommand(
        
          
  
    
      opts: {
  
    
      command: string,
    
  
    
      opts: object,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      flashFirmware(
        
      ):
        Promise<any>;
    
      getLog(
        
      ):
        Promise<any>;
    
      setLogEnabled(
        
          
  
    
      opts: {
  
    
      enabled: boolean,
    
  
},
    
  

        
      ):
        Promise<any>;
    
      isConnected(
        
      ):
        Boolean;
    
      connect(
        
      ):
        Promise<void>;
    
      disconnect(
        
      ):
        Promise<void>;
    
  }

    }
  

  

  

  

  

  

  

  

  

  

  

  

