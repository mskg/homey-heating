'use strict';

const Util = require('../../../Util');
const EventEmitter = require('../../../EventEmitter');

/**
 * @class
 * @hideconstructor
 * @memberof HomeyAPIV2.ManagerDevices.Device
 */
class DeviceCapability extends EventEmitter {

  constructor({
    id,
    device,
    listener,
  }) {
    super();

    this.__onCapabilityValue = this.__onCapabilityValue.bind(this);
    this.__onDeviceDelete = this.__onDeviceDelete.bind(this);

    // Set ID
    Object.defineProperty(this, 'id', {
      value: id,
      enumerable: true,
      writable: false,
    });

    // Set Device
    Object.defineProperty(this, 'device', {
      value: device,
      enumerable: false,
      writable: false,
    });

    // Set Listener
    Object.defineProperty(this, '__listener', {
      value: listener,
      enumerable: false,
      writable: false,
    });

    // Set Listener
    Object.defineProperty(this, '__transactionIds', {
      value: {},
      enumerable: false,
      writable: false,
    });

    // Set Value
    Object.defineProperty(this, '__value', {
      value: device.capabilitiesObj
        ? device.capabilitiesObj[this.id]
          ? device.capabilitiesObj[this.id].value
          : null
        : null,
      enumerable: false,
      writable: true,
    });

    // Set Last Changed
    Object.defineProperty(this, '__lastChanged', {
      value: device.capabilitiesObj
        ? device.capabilitiesObj[this.id]
          ? device.capabilitiesObj[this.id].lastUpdated
          : null
        : null,
      enumerable: false,
      writable: true,
    });

    this.device.on('capability', this.__onCapabilityValue);
    this.device.on('delete', this.__onDeviceDelete);
  }

  __debug(...props) {
    this.device.__debug(`[DeviceCapability:${this.id}]`, ...props);
  }

  /**
   * Destroy the listener, and if it's the last one, unsubscribe from the device's realtime events.
   */
  destroy() {
    this.emit('destroy');
    this.device.off('capability', this.__onCapabilityValue);
    this.device.off('delete', this.__onDeviceDelete);
    this.removeAllListeners();
  }

  __onCapabilityValue({
    capabilityId,
    value,
    transactionId,
    transactionTime,
  }) {
    if (capabilityId !== this.id) return;
    if (this.__transactionIds[transactionId]) {
      delete this.__transactionIds[transactionId];
      return;
    }

    if (value === this.__value) return;
    this.__value = value;
    this.__lastChanged = new Date(transactionTime);

    // Mutate the current device capabilitiesObj so it always reflects the last value.
    const capabilityReference = this.device.capabilitiesObj && this.device.capabilitiesObj[this.id];
    if (capabilityReference) {
      capabilityReference.value = value;
      capabilityReference.lastUpdated = this.__lastChanged;
    }

    this.__listener(value);
  }

  __onDeviceDelete() {
    this.destroy();
  }

  /**
   * @type {boolean|number|string|null}
   */
  get value() {
    return typeof this.__value !== 'undefined'
      ? this.__value
      : null;
  }

  /**
   * @type {Date|null}
   */
  get lastChanged() {
    return (this.__lastChanged instanceof Date)
      ? this.__lastChanged
      : (typeof this.__lastChanged === 'string')
        ? new Date(this.__lastChanged)
        : null;
  }

  /**
   *
   * @param {boolean|number|string} value - The new capability value
   * @param {object} opts
   */
  async setValue(value, opts) {
    const transactionId = `homey-api-${Util.uuid()}`;
    const transactionTime = Date.now();

    this.__transactionIds[transactionId] = transactionTime;

    await this.device.setCapabilityValue({
      value,
      opts,
      transactionId,
      transactionTime,
      capabilityId: this.id,
    });

    this.__value = value;
    this.__lastChanged = new Date();

    // Mutate the current device capabilitiesObj so it always reflects the last value.
    const capabilityReference = this.device.capabilitiesObj && this.device.capabilitiesObj[this.id];
    if (capabilityReference) {
      capabilityReference.value = value;
      capabilityReference.lastUpdated = this.__lastChanged.toISOString();
    }
  }

}

module.exports = DeviceCapability;
