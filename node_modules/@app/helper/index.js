/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app/helper/AsyncDebounce.ts":
/*!*****************************************!*\
  !*** ./src/app/helper/AsyncDebounce.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncDebounce = void 0;
/**
 * Debounces the async function by ms
 *
 * @param functionToDebounce it
 * @param wait in ms
 * @param leading true, if you want the first result
 */
function AsyncDebounce(functionToDebounce, wait, leading = false) {
    let resolvers = [];
    let timeout;
    let leadingResult;
    return function (...args) {
        return new Promise((resolve, _reject) => {
            const runImmediately = leading && !timeout;
            if (timeout != null) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(() => {
                timeout = undefined;
                // @ts-ignore
                const res = leading ? leadingResult : functionToDebounce.apply(this, args);
                for (resolve of resolvers) {
                    resolve(res);
                }
                resolvers = [];
            }, wait);
            if (runImmediately) {
                // @ts-ignore
                leadingResult = functionToDebounce.apply(this, args);
                resolve(leadingResult);
            }
            else {
                resolvers.push(resolve);
            }
        });
    };
}
exports.AsyncDebounce = AsyncDebounce;


/***/ }),

/***/ "./src/app/helper/AsyncThrottle.ts":
/*!*****************************************!*\
  !*** ./src/app/helper/AsyncThrottle.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncThrottle = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/**
 * Throttles the call to the async function to maxCalls per duration.
 *
 * @param funcToThrottle The function to excute.
 * @param duration in ms
 * @param maxCalls per duration
 */
function AsyncThrottle(funcToThrottle, duration, maxCalls = 1) {
    let processCount = 0;
    let ticks = 0;
    // throttle function
    return function (...args) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, _reject) => {
                const now = Date.now();
                if ((now - ticks) > 1) {
                    processCount = duration;
                    ticks = now;
                }
                else if (processCount < maxCalls) {
                    processCount++;
                }
                else {
                    ticks += duration;
                    processCount = 1;
                }
                // @ts-ignore
                setTimeout(() => { resolve(funcToThrottle.apply(this, args)); }, ticks - now);
            });
        });
    };
}
exports.AsyncThrottle = AsyncThrottle;


/***/ }),

/***/ "./src/app/helper/Mutex.ts":
/*!*********************************!*\
  !*** ./src/app/helper/Mutex.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Mutex = void 0;
/**
 * Only one Thread can rule the world.
 *
 * const unlock = await new Mutex().lock();
 * {
 *      // code that should run locked
 * }
 * unlock();
 */
class Mutex {
    constructor() {
        // tslint:disable-next-line: no-empty
        this.locking = Promise.resolve(() => { });
    }
    lock() {
        let unlockNext;
        const willLock = new Promise((resolve) => unlockNext = () => {
            // @ts-ignore
            resolve();
        });
        const willUnlock = this.locking.then(() => unlockNext);
        this.locking = this.locking.then(() => willLock);
        return willUnlock;
    }
}
exports.Mutex = Mutex;


/***/ }),

/***/ "./src/app/helper/Retry.ts":
/*!*********************************!*\
  !*** ./src/app/helper/Retry.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Retry = void 0;
/**
 * Retry the async function.
 *
 * @param func call that
 * @param logger dump errors here
 * @param maxRetries so often
 * @param retryInterval wait this time in ms
 * @param incrementalBackoff double the time on each execution?
 * @param maxRetryInterval maximum duration per cycle
 */
function Retry(func, logger, maxRetries = 5, retryInterval = 1000, incrementalBackoff = false, maxRetryInterval = 10000) {
    return new Promise((resolve, reject) => {
        // call the func
        func()
            .then(resolve)
            // if it fails
            .catch((error) => {
            if (logger != null) {
                logger.debug(`Retry action ${maxRetries} times, waiting for ${retryInterval}`, error);
            }
            // we're done
            if (maxRetries - 1 <= 0) {
                reject(error);
                return;
            }
            // reexecute after retryInterval
            setTimeout(() => {
                // leave or double the time on incremental backoff
                const nextInterval = incrementalBackoff ? Math.min(maxRetryInterval, retryInterval * 2) : retryInterval;
                // retry one time less
                Retry(func, logger, maxRetries - 1, nextInterval, incrementalBackoff, maxRetryInterval)
                    .then(resolve, reject);
            }, retryInterval);
        });
    });
}
exports.Retry = Retry;


/***/ }),

/***/ "./src/app/helper/defaultPlan.ts":
/*!***************************************!*\
  !*** ./src/app/helper/defaultPlan.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_HEATING_DEVICES = exports.DEFAULT_HEATING_ZONES = exports.DEFAULT_HEATING_PLAN = exports.COOL = exports.INTERMEDIATE = exports.WARM = void 0;
const model_1 = __webpack_require__(/*! @app/model */ "@app/model");
exports.WARM = 20.5;
exports.INTERMEDIATE = 18.5;
exports.COOL = 16;
function bathroomSchedule() {
    const setPoints = [];
    for (const d of [model_1.Day.Monday, model_1.Day.Tuesday, model_1.Day.Wednesday, model_1.Day.Thursday, model_1.Day.Friday]) {
        setPoints.push({
            day: d,
            hour: 6,
            minute: 0,
            targetTemperature: exports.WARM,
        });
        setPoints.push({
            day: d,
            hour: 9,
            minute: 0,
            targetTemperature: exports.COOL,
        });
    }
    for (const d of [model_1.Day.Saturday, model_1.Day.Sunday]) {
        setPoints.push({
            day: d,
            hour: 9,
            minute: 0,
            targetTemperature: exports.INTERMEDIATE,
        });
        setPoints.push({
            day: d,
            hour: 23,
            minute: 30,
            targetTemperature: exports.COOL,
        });
    }
    return setPoints;
}
function mainSchedule() {
    const setPoints = [];
    for (const d of [model_1.Day.Monday, model_1.Day.Tuesday, model_1.Day.Wednesday, model_1.Day.Thursday, model_1.Day.Friday]) {
        setPoints.push({
            day: d,
            hour: 17,
            minute: 0,
            targetTemperature: exports.INTERMEDIATE,
        });
        setPoints.push({
            day: d,
            hour: 18,
            minute: 30,
            targetTemperature: exports.WARM,
        });
        setPoints.push({
            day: d,
            hour: 23,
            minute: 0,
            targetTemperature: exports.COOL,
        });
    }
    for (const d of [model_1.Day.Saturday, model_1.Day.Sunday]) {
        setPoints.push({
            day: d,
            hour: 9,
            minute: 0,
            targetTemperature: exports.WARM,
        });
        setPoints.push({
            day: d,
            hour: 23,
            minute: 30,
            targetTemperature: exports.COOL,
        });
    }
    return setPoints;
}
function utilitySchedule() {
    const setPoints = [];
    for (const d of [model_1.Day.Monday, model_1.Day.Tuesday, model_1.Day.Wednesday, model_1.Day.Thursday, model_1.Day.Friday]) {
        setPoints.push({
            day: d,
            hour: 17,
            minute: 0,
            targetTemperature: exports.INTERMEDIATE,
        });
        setPoints.push({
            day: d,
            hour: 23,
            minute: 0,
            targetTemperature: exports.COOL,
        });
    }
    for (const d of [model_1.Day.Saturday, model_1.Day.Sunday]) {
        setPoints.push({
            day: d,
            hour: 9,
            minute: 0,
            targetTemperature: exports.INTERMEDIATE,
        });
        setPoints.push({
            day: d,
            hour: 23,
            minute: 30,
            targetTemperature: exports.COOL,
        });
    }
    return setPoints;
}
// function chart(): ISetPoint[] {
//     const setPoints: ISetPoint[] = [];
//     for (const d of [Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday]) {
//         [0, 1, 2, 3, 4, 5, 6, 7].forEach(t => {
//             setPoints.push({
//                 day: d,
//                 hour: t * 3,
//                 minute: 0,
//                 targetTemperature: t + 16,
//             });
//         });
//     }
//     return setPoints;
// }
const bedSchedule = [1 /*, 2, 3, 4, 5, 6, 0*/].map((e) => ({ day: e, hour: 0, minute: 0, targetTemperature: 16 }));
exports.DEFAULT_HEATING_PLAN = [
    {
        id: "1",
        name: "Living Room",
        enabled: true,
        schedule: mainSchedule(),
        zones: ["Living Room"],
        overrides: {
            DayAtHome: {
                targetTemperature: 17,
            },
        },
    },
    {
        id: "2",
        name: "Bathroom",
        enabled: true,
        schedule: bathroomSchedule(),
        zones: ["Bathroom"],
        overrides: {
            DayAway: {
                targetTemperature: 17,
            },
        },
    },
    {
        id: "3",
        name: "Utility",
        enabled: true,
        schedule: utilitySchedule(),
        zones: ["Kitchen", "Study"],
        overrides: {
            Holiday: {
                targetTemperature: 17,
            },
        },
    },
    {
        id: "4",
        name: "Bedroom",
        enabled: true,
        schedule: bedSchedule,
        zones: ["Bedroom"],
        overrides: {
            Sleep: {
                targetTemperature: 17,
            },
        },
    },
    // {
    //     id: "5",
    //     name: "Chart",
    //     enabled: true,
    //     schedule: chart(),
    // },
];
exports.DEFAULT_HEATING_ZONES = [
    {
        id: "Bathroom",
        name: "Bathroom",
    },
    {
        id: "Bedroom",
        name: "Bedroom",
    },
    {
        id: "Kitchen",
        name: "Kitchen",
    },
    {
        id: "Living Room",
        name: "Living Room",
    },
    {
        id: "Study",
        name: "Study",
    },
];
exports.DEFAULT_HEATING_DEVICES = [
    {
        id: "Bad",
        name: "Bad",
    },
    {
        id: "Bett",
        name: "Bett",
    },
    {
        id: "Flur",
        name: "Flur",
    },
    {
        id: "Tür",
        name: "Tür",
    },
    {
        id: "Mitte",
        name: "Mitte",
    },
    {
        id: "Sofa",
        name: "Sofa",
    },
    {
        id: "Tisch",
        name: "Tisch",
    },
    {
        id: "Büro",
        name: "Büro",
    },
];


/***/ }),

/***/ "./src/app/helper/index.ts":
/*!*********************************!*\
  !*** ./src/app/helper/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./AsyncThrottle */ "./src/app/helper/AsyncThrottle.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Mutex */ "./src/app/helper/Mutex.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Retry */ "./src/app/helper/Retry.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./defaultPlan */ "./src/app/helper/defaultPlan.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./slotTime */ "./src/app/helper/slotTime.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./AsyncDebounce */ "./src/app/helper/AsyncDebounce.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./synchronize */ "./src/app/helper/synchronize.ts"), exports);


/***/ }),

/***/ "./src/app/helper/slotTime.ts":
/*!************************************!*\
  !*** ./src/app/helper/slotTime.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


// tslint:disable: trailing-comma
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.slotTime = void 0;
/**
 * Normalizes the time to a given number of slots.
 *
 * @param minutes it
 * @param slots amount of slots in one hour
 */
function slotTime(minutes, slots = 4) {
    const a = 0;
    const b = Math.round(slots);
    //        (b-a)(x - min)
    // f(x) = -------------- +  a
    //        max - min
    //
    return Math.round(Math.floor((((b - a) * (minutes - 0)) /
        (59 - 0))
        + a) * (60 / b));
}
exports.slotTime = slotTime;


/***/ }),

/***/ "./src/app/helper/synchronize.ts":
/*!***************************************!*\
  !*** ./src/app/helper/synchronize.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.synchronize = void 0;
const Mutex_1 = __webpack_require__(/*! ./Mutex */ "./src/app/helper/Mutex.ts");
function Synchronize(mutex, func) {
    return function (...args) {
        // @ts-ignore
        const self = this;
        try {
            return mutex
                .lock()
                .then((unlock) => func
                .apply(self, args)
                .finally(() => unlock()));
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
}
/**
 * Synchronizes all calls to the given function
 * @param mutex If no mutex is given a new Mutex is created implicitly
 */
function synchronize(mutex) {
    if (mutex == null) {
        mutex = new Mutex_1.Mutex();
    }
    return (_target, _property, descriptor, ..._other) => {
        if (descriptor.value != null) {
            return Object.assign(Object.assign({}, descriptor), { 
                // @ts-ignore
                value: Synchronize.apply(this, [mutex, descriptor.value]) });
        }
        return Object.assign(Object.assign({}, descriptor), { 
            // we do not decorate the setter as this makes no sense here
            // set: Synchronize.apply(this, [mutex, descriptor.set]),
            // @ts-ignore
            get: Synchronize.apply(this, [mutex, descriptor.get]) });
    };
}
exports.synchronize = synchronize;


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "@app/model":
/*!*****************************!*\
  !*** external "@app/model" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("@app/model");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app/helper/index.ts");
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,